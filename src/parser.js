module.exports = (function() {
  /*
   * Generated by PEG.js 0.8.0.
   *
   * http://pegjs.majda.cz/
   */

  function peg$subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function SyntaxError(message, expected, found, offset, line, column) {
    this.message  = message;
    this.expected = expected;
    this.found    = found;
    this.offset   = offset;
    this.line     = line;
    this.column   = column;

    this.name     = "SyntaxError";
  }

  peg$subclass(SyntaxError, Error);

  function parse(input) {
    var options = arguments.length > 1 ? arguments[1] : {},

        peg$FAILED = {},

        peg$startRuleIndices = { DOCUMENT: 0 },
        peg$startRuleIndex   = 0,

        peg$consts = [
          { type: "other", description: "[1] QueryUnit" },
          { type: "other", description: "[2] Query" },
          peg$FAILED,
          function(p, q, v) {
              return {
                  token: 'query',
                  kind: 'query',
                  prologue: p,
                  units: [q],
                  inlineData: v
              }
          },
          { type: "other", description: "[3] Prologue" },
          null,
          [],
          function(b, pfx) {
              return { token: 'prologue',
                  base: b,
                  prefixes: pfx }
          },
          { type: "other", description: "[4] BaseDecl" },
          "BASE",
          { type: "literal", value: "BASE", description: "\"BASE\"" },
          "base",
          { type: "literal", value: "base", description: "\"base\"" },
          function(i) {
              registerDefaultPrefix(i);

              var base = {};
              base.token = 'base';
              base.value = i;

              return base;
          },
          { type: "other", description: "[5] PrefixDecl" },
          "PREFIX",
          { type: "literal", value: "PREFIX", description: "\"PREFIX\"" },
          "prefix",
          { type: "literal", value: "prefix", description: "\"prefix\"" },
          function(p, l) {

              registerPrefix(p,l);

              var prefix = {};
              prefix.token = 'prefix';
              prefix.prefix = p;
              prefix.local = l;

              return prefix;
          },
          { type: "other", description: "[6] SelectQuery" },
          function(s, gs, w, sm) {

              var dataset = {'named':[], 'implicit':[]};
              for(var i=0; i<gs.length; i++) {
                  var g = gs[i];
                  if(g.kind === 'default') {
                      dataset['implicit'].push(g.graph);
                  } else {
                      dataset['named'].push(g.graph)
                  }
              }


              if(dataset['named'].length === 0 && dataset['implicit'].length === 0) {
                  dataset['implicit'].push({token:'uri',
                      prefix:null,
                      suffix:null,
                      value:'https://github.com/antoniogarrote/rdfstore-js#default_graph'});
              }

              var query = {};
              query.kind = 'select';
              query.token = 'executableunit';
              query.dataset = dataset;
              query.projection = s.vars;
              query.modifier = s.modifier;
              query.pattern = w;

              if(sm!=null && sm.limit!=null) {
                  query.limit = sm.limit;
              }
              if(sm!=null && sm.offset!=null) {
                  query.offset = sm.offset;
              }
              if(sm!=null && (sm.order!=null && sm.order!="")) {
                  query.order = sm.order;
              }
              if(sm!=null && sm.group!=null) {
                  query.group = sm.group;
              }

              return query;
          },
          { type: "other", description: "[7] SubSelect" },
          function(s, w, sm) {

              var query = {};
              query.kind = 'select';
              query.token = 'subselect';
              query.projection = s.vars;
              query.modifier = s.modifier;
              query.pattern = w;

              if(sm!=null && sm.limit!=null) {
                  query.limit = sm.limit;
              }
              if(sm!=null && sm.offset!=null) {
                  query.offset = sm.offset;
              }
              if(sm!=null && (sm.order!=null && sm.order!="")) {
                  query.order = sm.order;
              }
              if(sm!=null && sm.group!=null) {
                  query.group = sm.group;
              }

              return query;

          },
          { type: "other", description: "[8] SelectClause" },
          "SELECT",
          { type: "literal", value: "SELECT", description: "\"SELECT\"" },
          "select",
          { type: "literal", value: "select", description: "\"select\"" },
          "DISTINCT",
          { type: "literal", value: "DISTINCT", description: "\"DISTINCT\"" },
          "distinct",
          { type: "literal", value: "distinct", description: "\"distinct\"" },
          "REDUCED",
          { type: "literal", value: "REDUCED", description: "\"REDUCED\"" },
          "reduced",
          { type: "literal", value: "reduced", description: "\"reduced\"" },
          "(",
          { type: "literal", value: "(", description: "\"(\"" },
          "AS",
          { type: "literal", value: "AS", description: "\"AS\"" },
          "as",
          { type: "literal", value: "as", description: "\"as\"" },
          ")",
          { type: "literal", value: ")", description: "\")\"" },
          "*",
          { type: "literal", value: "*", description: "\"*\"" },
          function(mod, proj) {
              var vars = [];
              if(proj.length === 3 && proj[1]==="*") {
                  return {vars: [{token: 'variable', kind:'*'}], modifier:arrayToString(mod)};
              }

              for(var i=0; i< proj.length; i++) {
                  var aVar = proj[i];

                  if(aVar.length === 3) {
                      vars.push({token: 'variable', kind:'var', value:aVar[1]});
                  } else {
                      vars.push({token: 'variable', kind:'aliased', expression: aVar[3], alias:aVar[7]})
                  }
              }

              return {vars: vars, modifier:arrayToString(mod)};
          },
          { type: "other", description: "[9] ConstructQuery" },
          "CONSTRUCT",
          { type: "literal", value: "CONSTRUCT", description: "\"CONSTRUCT\"" },
          "construct",
          { type: "literal", value: "construct", description: "\"construct\"" },
          function(t, gs, w, sm) {
              var dataset = {'named':[], 'implicit':[]};
              for(var i=0; i<gs.length; i++) {
                  var g = gs[i];
                  if(g.kind === 'default') {
                      dataset['implicit'].push(g.graph);
                  } else {
                      dataset['named'].push(g.graph)
                  }
              }


              if(dataset['named'].length === 0 && dataset['implicit'].length === 0) {
                  dataset['implicit'].push({token:'uri',
                      prefix:null,
                      suffix:null,
                      value:'https://github.com/antoniogarrote/rdfstore-js#default_graph'});
              }

              var query = {};
              query.kind = 'construct';
              query.token = 'executableunit'
              query.dataset = dataset;
              query.template = t;
              query.pattern = w;

              if(sm!=null && sm.limit!=null) {
                  query.limit = sm.limit;
              }
              if(sm!=null && sm.offset!=null) {
                  query.offset = sm.offset;
              }
              if(sm!=null && (sm.order!=null && sm.order!="")) {
                  query.order = sm.order;
              }
              return query

          },
          "WHERE",
          { type: "literal", value: "WHERE", description: "\"WHERE\"" },
          "where",
          { type: "literal", value: "where", description: "\"where\"" },
          "{",
          { type: "literal", value: "{", description: "\"{\"" },
          "}",
          { type: "literal", value: "}", description: "\"}\"" },
          function(gs, t, sm) {
              var dataset = {'named':[], 'implicit':[]};
              for(var i=0; i<gs.length; i++) {
                  var g = gs[i];
                  if(g.kind === 'default') {
                      dataset['implicit'].push(g.graph);
                  } else {
                      dataset['named'].push(g.graph)
                  }
              }


              if(dataset['named'].length === 0 && dataset['implicit'].length === 0) {
                  dataset['implicit'].push({token:'uri',
                      prefix:null,
                      suffix:null,
                      value:'https://github.com/antoniogarrote/rdfstore-js#default_graph'});
              }

              var query = {};
              query.kind = 'construct';
              query.token = 'executableunit'
              query.dataset = dataset;
              query.template = t;
              query.pattern = {
                  token: "basicgraphpattern",
                  triplesContext: t.triplesContext
              };

              if(sm!=null && sm.limit!=null) {
                  query.limit = sm.limit;
              }
              if(sm!=null && sm.offset!=null) {
                  query.offset = sm.offset;
              }
              if(sm!=null && (sm.order!=null && sm.order!="")) {
                  query.order = sm.order;
              }
              return query
          },
          { type: "other", description: "[10] DescribeQuery" },
          "DESCRIBE",
          { type: "literal", value: "DESCRIBE", description: "\"DESCRIBE\"" },
          { type: "other", description: "[11] AskQuery" },
          "ASK",
          { type: "literal", value: "ASK", description: "\"ASK\"" },
          "ask",
          { type: "literal", value: "ask", description: "\"ask\"" },
          function(gs, w) {
              var dataset = {'named':[], 'implicit':[]};
              for(var i=0; i<gs.length; i++) {
                  var g = gs[i];
                  if(g.kind === 'implicit') {
                      dataset['implicit'].push(g.graph);
                  } else {
                      dataset['named'].push(g.graph)
                  }
              }


              if(dataset['named'].length === 0 && dataset['implicit'].length === 0) {
                  dataset['implicit'].push({token:'uri',
                      prefix:null,
                      suffix:null,
                      value:'https://github.com/antoniogarrote/rdfstore-js#default_graph'});
              }

              var query = {};
              query.kind = 'ask';
              query.token = 'executableunit'
              query.dataset = dataset;
              query.pattern = w

              return query
          },
          { type: "other", description: "[12] DatasetClause" },
          "FROM",
          { type: "literal", value: "FROM", description: "\"FROM\"" },
          "from",
          { type: "literal", value: "from", description: "\"from\"" },
          function(gs) {
              return gs;
          },
          { type: "other", description: "[13] DefaultGraphClause" },
          function(s) {
              return {graph:s , kind:'default', token:'graphClause'}
          },
          { type: "other", description: "[14] NamedGraphClause" },
          "NAMED",
          { type: "literal", value: "NAMED", description: "\"NAMED\"" },
          "named",
          { type: "literal", value: "named", description: "\"named\"" },
          function(s) {
              return {graph:s, kind:'named', token:'graphCluase'};
          },
          { type: "other", description: "[15] SourceSelector" },
          { type: "other", description: "[16] WhereClause" },
          function(g) {
              return g;
          },
          { type: "other", description: "[17] SolutionModifier" },
          function(gc, oc, lo) {
              var acum = {};
          if(lo != null) {
              if(lo.limit != null) {
                  acum.limit = lo.limit;
              }
              if(lo.offset != null) {
                  acum.offset = lo.offset;
              }
          }

          if(gc != null) {
              acum.group = gc;
          }

          acum.order = oc;

          return acum
          },
          { type: "other", description: "[18] GroupClause" },
          "GROUP",
          { type: "literal", value: "GROUP", description: "\"GROUP\"" },
          "group",
          { type: "literal", value: "group", description: "\"group\"" },
          "BY",
          { type: "literal", value: "BY", description: "\"BY\"" },
          "by",
          { type: "literal", value: "by", description: "\"by\"" },
          function(conds) {
              return conds;
          },
          { type: "other", description: "[19] GroupCondition" },
          function(b) {
              return b;
          },
          function(f) {
              return f;
          },
          function(e, alias) {
              if(alias.length != 0) {
              return {token: 'aliased_expression',
                  expression: e,
                  alias: alias[2] };
          } else {
              return e;
          }
          },
          function(v) {
              return v;
          },
          { type: "other", description: "[20] HavingClause" },
          "HAVING",
          { type: "literal", value: "HAVING", description: "\"HAVING\"" },
          { type: "other", description: "[21] HavingCondition" },
          { type: "other", description: "[22] OrderClause" },
          "ORDER",
          { type: "literal", value: "ORDER", description: "\"ORDER\"" },
          "order",
          { type: "literal", value: "order", description: "\"order\"" },
          function(os) {
              return os;
          },
          { type: "other", description: "[23] OrderCondition" },
          "ASC",
          { type: "literal", value: "ASC", description: "\"ASC\"" },
          "asc",
          { type: "literal", value: "asc", description: "\"asc\"" },
          "DESC",
          { type: "literal", value: "DESC", description: "\"DESC\"" },
          "desc",
          { type: "literal", value: "desc", description: "\"desc\"" },
          function(direction, e) {
              return { direction: direction.toUpperCase(), expression:e };
          },
          function(e) {
              if(e.token === 'var') {
              var e = { token:'expression',
                  expressionType:'atomic',
                  primaryexpression: 'var',
                  value: e };
          }
          return { direction: 'ASC', expression:e };
          },
          { type: "other", description: "[24] LimitOffsetClauses" },
          function(cls) {
              var acum = {};
              for(var i=0; i<cls.length; i++) {
                  var cl = cls[i];
                  if(cl.limit != null) {
                      acum['limit'] = cl.limit;
                  } else if(cl.offset != null){
                      acum['offset'] = cl.offset;
                  }
              }

              return acum;
          },
          { type: "other", description: "[25] LimitClause" },
          "LIMIT",
          { type: "literal", value: "LIMIT", description: "\"LIMIT\"" },
          "limit",
          { type: "literal", value: "limit", description: "\"limit\"" },
          function(i) {
              return { limit:parseInt(i.value) };
          },
          { type: "other", description: "[26] OffsetClause" },
          "OFFSET",
          { type: "literal", value: "OFFSET", description: "\"OFFSET\"" },
          "offset",
          { type: "literal", value: "offset", description: "\"offset\"" },
          function(i) {
              return { offset:parseInt(i.value) };
          },
          { type: "other", description: "[27] BindingsClause" },
          "BINDINGS",
          { type: "literal", value: "BINDINGS", description: "\"BINDINGS\"" },
          { type: "other", description: "[28] BindingValue" },
          "UNDEF",
          { type: "literal", value: "UNDEF", description: "\"UNDEF\"" },
          { type: "other", description: "[28]  \tValuesClause\t  ::=  \t( 'VALUES' DataBlock )?" },
          "VALUES",
          { type: "literal", value: "VALUES", description: "\"VALUES\"" },
          "values",
          { type: "literal", value: "values", description: "\"values\"" },
          function(b) {
               if(b != null) {
                 return b[1];
               } else {
                 return null;
               }
          },
          { type: "other", description: "[29] UpdateUnit" },
          { type: "other", description: "[30] Update" },
          ";",
          { type: "literal", value: ";", description: "\";\"" },
          function(p, u, us) {

              var query = {};
          query.token = 'query';
          query.kind = 'update'
          query.prologue = p;

          var units = [u];

          if(us != null && us.length != null && us[3] != null && us[3].units != null) {
              units = units.concat(us[3].units);
          }

          query.units = units;
          return query;
          },
          { type: "other", description: "[31] Update1" },
          { type: "other", description: "[32] Load" },
          "LOAD",
          { type: "literal", value: "LOAD", description: "\"LOAD\"" },
          "load",
          { type: "literal", value: "load", description: "\"load\"" },
          "INTO",
          { type: "literal", value: "INTO", description: "\"INTO\"" },
          "into",
          { type: "literal", value: "into", description: "\"into\"" },
          function(sg, dg) {
              var query = {};
          query.kind = 'load';
          query.token = 'executableunit'
          query.sourceGraph = sg;
          query.destinyGraph = dg[2];

          return query;
          },
          { type: "other", description: "[33] Clear" },
          "CLEAR",
          { type: "literal", value: "CLEAR", description: "\"CLEAR\"" },
          "clear",
          { type: "literal", value: "clear", description: "\"clear\"" },
          "SILENT",
          { type: "literal", value: "SILENT", description: "\"SILENT\"" },
          "silent",
          { type: "literal", value: "silent", description: "\"silent\"" },
          function(ref) {
              var query = {};
              query.kind = 'clear';
              query.token = 'executableunit'
              query.destinyGraph = ref;

              return query;
          },
          { type: "other", description: "[34] Drop" },
          "DROP",
          { type: "literal", value: "DROP", description: "\"DROP\"" },
          "drop",
          { type: "literal", value: "drop", description: "\"drop\"" },
          function(ref) {
              var query = {};
              query.kind = 'drop';
              query.token = 'executableunit'
              query.destinyGraph = ref;

              return query;
          },
          { type: "other", description: "[35] Create" },
          "CREATE",
          { type: "literal", value: "CREATE", description: "\"CREATE\"" },
          "create",
          { type: "literal", value: "create", description: "\"create\"" },
          function(ref) {
              var query = {};
              query.kind = 'create';
              query.token = 'executableunit'
              query.destinyGraph = ref;

              return query;
          },
          { type: "other", description: "[36] InsertData" },
          "INSERT",
          { type: "literal", value: "INSERT", description: "\"INSERT\"" },
          "insert",
          { type: "literal", value: "insert", description: "\"insert\"" },
          "DATA",
          { type: "literal", value: "DATA", description: "\"DATA\"" },
          "data",
          { type: "literal", value: "data", description: "\"data\"" },
          function(qs) {
              var query = {};
              query.kind = 'insertdata';
              query.token = 'executableunit'
              query.quads = qs;

              return query;
          },
          { type: "other", description: "[37] DeleteData" },
          "DELETE",
          { type: "literal", value: "DELETE", description: "\"DELETE\"" },
          "delete",
          { type: "literal", value: "delete", description: "\"delete\"" },
          function(qs) {
              var query = {};
              query.kind = 'deletedata';
              query.token = 'executableunit'
              query.quads = qs;

              return query;
          },
          { type: "other", description: "[38] DeleteWhere" },
          function(p) {
              var query = {};
              query.kind = 'modify';
              query.pattern = p;
              query.with = null;
              query.using = null;

              var quads = [];


              var patternsCollection = p.patterns[0];
              if(patternsCollection.triplesContext == null && patternsCollection.patterns!=null) {
                  patternsCollection = patternsCollection.patterns[0].triplesContext;
              } else {
                  patternsCollection = patternsCollection.triplesContext;
              }

              for(var i=0; i<patternsCollection.length; i++) {
                  var quad = {};
                  var contextQuad = patternsCollection[i];

                  quad['subject'] = contextQuad['subject'];
                  quad['predicate'] = contextQuad['predicate'];
                  quad['object'] = contextQuad['object'];
                  quad['graph'] = contextQuad['graph'];

                  quads.push(quad);
              }

              query.delete = quads;

              return query;
          },
          { type: "other", description: "[39] Modify" },
          "WITH",
          { type: "literal", value: "WITH", description: "\"WITH\"" },
          "with",
          { type: "literal", value: "with", description: "\"with\"" },
          function(wg, dic, uc, p) {
              var query = {};
          query.kind = 'modify';

          if(wg != "") {
              query.with = wg[2];
          } else {
              query.with = null;
          }


          if(dic.length === 3 && dic[2] === '') {
              query.delete = dic[0];
              query.insert = null;
          } else if(dic.length === 3 && dic[0].length != null && dic[1].length != null && dic[2].length != null) {
              query.delete = dic[0];
              query.insert = dic[2];
          } else  {
              query.insert = dic;
              query.delete = null;
          }

          if(uc != '') {
              query.using = uc;
          }

          query.pattern = p;

          return query;
          },
          { type: "other", description: "[40] DeleteClause" },
          function(q) {
              return q;
          },
          { type: "other", description: "[41] InsertClause" },
          { type: "other", description: "[42] UsingClause" },
          "USING",
          { type: "literal", value: "USING", description: "\"USING\"" },
          "using",
          { type: "literal", value: "using", description: "\"using\"" },
          function(g) {
              if(g.length!=null) {
                  return {kind: 'named', uri: g[2]};
              } else {
                  return {kind: 'default', uri: g};
              }
          },
          { type: "other", description: "[43] GraphRef" },
          "GRAPH",
          { type: "literal", value: "GRAPH", description: "\"GRAPH\"" },
          "graph",
          { type: "literal", value: "graph", description: "\"graph\"" },
          function(i) {
              return i;
          },
          { type: "other", description: "[44] GraphRefAll" },
          "DEFAULT",
          { type: "literal", value: "DEFAULT", description: "\"DEFAULT\"" },
          "default",
          { type: "literal", value: "default", description: "\"default\"" },
          function() {
              return 'default';
          },
          function() {
              return 'named';
          },
          "ALL",
          { type: "literal", value: "ALL", description: "\"ALL\"" },
          "all",
          { type: "literal", value: "all", description: "\"all\"" },
          function() {
              return 'all';
          },
          { type: "other", description: "[45] QuadPattern" },
          function(qs) {
              return qs.quadsContext;
          },
          { type: "other", description: "[46] QuadData" },
          { type: "other", description: "[47] Quads" },
          ".",
          { type: "literal", value: ".", description: "\".\"" },
          function(ts, qs) {
              var quads = []
              if(ts.triplesContext != null && ts.triplesContext != null) {
                  for(var i=0; i<ts.triplesContext.length; i++) {
                      var triple = ts.triplesContext[i]
                      triple.graph = null;
                      quads.push(triple)
                  }
              }

              if(qs && qs.length>0 && qs[0].length > 0) {
                  quads = quads.concat(qs[0][0].quadsContext);

                  if( qs[0][2] != null && qs[0][2].triplesContext != null) {
                      for(var i=0; i<qs[0][2].triplesContext.length; i++) {
                          var triple = qs[0][2].triplesContext[i]
                          triple.graph = null;
                          quads.push(triple)
                      }
                  }
              }

              return {token:'quads',
                  quadsContext: quads}
          },
          { type: "other", description: "[48] QuadsNotTriples" },
          function(g, ts) {
              var quads = []
              for(var i=0; i<ts.triplesContext.length; i++) {
              var triple = ts.triplesContext[i]
              triple.graph = g;
              quads.push(triple)
          }

          return {token:'quadsnottriples',
              quadsContext: quads}
          },
          { type: "other", description: "[49] TriplesTemplate" },
          function(b, bs) {
              var triples = b.triplesContext;
              if(bs != null && typeof(bs) === 'object') {
                 if(bs.length != null) {
                    if(bs[3] != null && bs[3].triplesContext!=null) {
                        triples = triples.concat(bs[3].triplesContext);
                    }
                 }
              }

              return {
                  token:'triplestemplate',
                  triplesContext: triples
              };
          },
          { type: "other", description: "[50] GroupGraphPattern" },
          function(p) {
              return p;
          },
          { type: "other", description: "[51] GroupGraphPatternSub" },
          function(tb, tbs) {
              var subpatterns = [];
              if(tb != null && tb != []) {
                  subpatterns.push(tb);
              }

              for(var i=0; i<tbs.length; i++) {
                  for(var j=0; j< tbs[i].length; j++) {
                      if(tbs[i][j] != null && tbs[i][j].token != null) {
                          subpatterns.push(tbs[i][j]);
                      }
                  }
              }

              var compactedSubpatterns = [];

              var currentBasicGraphPatterns = [];
              var currentFilters = [];

              for(var i=0; i<subpatterns.length; i++) {
                  if(subpatterns[i].token!='triplespattern' && subpatterns[i].token != 'filter') {
                      if(currentBasicGraphPatterns.length != 0 || currentFilters.length != 0) {
                          var triplesContext = [];
                          for(var j=0; j<currentBasicGraphPatterns.length; j++) {
                              triplesContext = triplesContext.concat(currentBasicGraphPatterns[j].triplesContext);
                          }
                          if(triplesContext.length > 0) {
                              compactedSubpatterns.push({token: 'basicgraphpattern',
                                  triplesContext: triplesContext});
                          }
                          currentBasicGraphPatterns = [];
                      }
                      compactedSubpatterns.push(subpatterns[i]);
                  } else {
                      if(subpatterns[i].token === 'triplespattern') {
                          currentBasicGraphPatterns.push(subpatterns[i]);
                      } else {
                          currentFilters.push(subpatterns[i]);
                      }
                  }
              }

              if(currentBasicGraphPatterns.length != 0 || currentFilters.length != 0) {
                  var triplesContext = [];
                  for(var j=0; j<currentBasicGraphPatterns.length; j++) {
                      triplesContext = triplesContext.concat(currentBasicGraphPatterns[j].triplesContext);
                  }
                  if(triplesContext.length > 0) {
                      compactedSubpatterns.push({token: 'basicgraphpattern',
                          triplesContext: triplesContext});
                  }
              }

          //      if(compactedSubpatterns.length == 1) {
          //          compactedSubpatterns[0].filters = currentFilters;
          //          return compactedSubpatterns[0];
          //      } else  {
              return { token: 'groupgraphpattern',
                  patterns: compactedSubpatterns,
                  filters: currentFilters }
          //      }
          },
          { type: "other", description: "[54] TriplesBlock" },
          function(b, bs) {
              var triples = b.triplesContext;
          if(bs != null && typeof(bs) === 'object') {
              if(bs != null && bs.length != null) {
                  if(bs[2] != null && bs[2].triplesContext!=null) {
                      triples = triples.concat(bs[2].triplesContext);
                  }
              }
          }

          return {token:'triplespattern',
              triplesContext: triples}
          },
          { type: "other", description: "[53] GraphPatternNotTriples" },
          { type: "other", description: "[54] OptionalGraphPattern" },
          "OPTIONAL",
          { type: "literal", value: "OPTIONAL", description: "\"OPTIONAL\"" },
          "optional",
          { type: "literal", value: "optional", description: "\"optional\"" },
          function(v) {
              return { token: 'optionalgraphpattern',
                  value: v }
          },
          { type: "other", description: "[55] GraphGraphPattern" },
          function(g, gg) {
              for(var i=0; i<gg.patterns.length; i++) {
                  var quads = []
                  var ts = gg.patterns[i];
                  for(var j=0; j<ts.triplesContext.length; j++) {
                      var triple = ts.triplesContext[j]
                      triple.graph = g;
                  }
              }

              gg.token = 'groupgraphpattern'
              return gg;
          },
          { type: "other", description: "[56] ServiceGraphPattern" },
          "SERVICE",
          { type: "literal", value: "SERVICE", description: "\"SERVICE\"" },
          function(v, ts) {
              return {token: 'servicegraphpattern',
                  status: 'todo',
                  value: [v,ts] }
          },
          { type: "other", description: "[57] MinusGraphPattern" },
          "MINUS",
          { type: "literal", value: "MINUS", description: "\"MINUS\"" },
          "minus",
          { type: "literal", value: "minus", description: "\"minus\"" },
          function(ts) {
              return {token: 'minusgraphpattern',
                  status: 'todo',
                  value: ts}
          },
          { type: "other", description: "[58] GroupOrUnionGraphPattern" },
          "UNION",
          { type: "literal", value: "UNION", description: "\"UNION\"" },
          "union",
          { type: "literal", value: "union", description: "\"union\"" },
          function(a, b) {
              if(b.length === 0) {
                  return a;
              } else {

                  var lastToken = {token: 'graphunionpattern',
                      value: [a]};

                  for(var i=0; i<b.length; i++) {
                      if(i==b.length-1) {
                          lastToken.value.push(b[i][3]);
                      } else {
                          lastToken.value.push(b[i][3]);
                          var newToken = {token: 'graphunionpattern',
                              value: [lastToken]}

                          lastToken = newToken;
                      }
                  }

                  return lastToken;

              }
          },
          { type: "other", description: "[59] Filter" },
          "FILTER",
          { type: "literal", value: "FILTER", description: "\"FILTER\"" },
          "filter",
          { type: "literal", value: "filter", description: "\"filter\"" },
          function(c) {
              return {token: 'filter',
                  value: c}
          },
          { type: "other", description: "[60] Bind" },
          "BIND",
          { type: "literal", value: "BIND", description: "\"BIND\"" },
          "bind",
          { type: "literal", value: "bind", description: "\"bind\"" },
          function(ex, v) {
              return {token: 'bind',
                      expresision: ex,
                      as: v};
          },
          { type: "other", description: "[60] Constraint" },
          { type: "other", description: "[61] InlineData" },
          function(d) {
              return d;
          },
          { type: "other", description: "[62] DataBlock" },
          { type: "other", description: "[63] InlineDataOneVar" },
          function(v, d) {
              var result =  {
                  token: 'inlineData',
                  values: [{
                      'var': v,
                      'value': d
                  }]
              };

              return result;
          },
          { type: "other", description: "[64] InlineDataFull" },
          function(vars, vals) {
              var result = {
                  token: 'inlineData',
                  values: [],
                  todo: true
              };
              return result;
          },
          { type: "other", description: "[65] DataBlockValue" },
          { type: "other", description: "[61] FunctionCall" },
          function(i, args) {
              var fcall = {};
              fcall.token = "expression";
              fcall.expressionType = 'irireforfunction'
              fcall.iriref = i;
              fcall.args = args.value;

              return fcall;
          },
          { type: "other", description: "[62] ArgList" },
          function() {
              var args = {};
              args.token = 'args';
              args.value = [];
              return args;
          },
          ",",
          { type: "literal", value: ",", description: "\",\"" },
          function(d, e, es) {
              var cleanEx = [];

              for(var i=0; i<es.length; i++) {
                  cleanEx.push(es[i][1]);
              }
              var args = {};
              args.token = 'args';
              args.value = [e].concat(cleanEx);

              if(d!=null && d.toUpperCase()==="DISTINCT") {
                  args.distinct = true;
              } else {
                  args.distinct = false;
              }

              return args;
          },
          { type: "other", description: "[63] ExpressionList" },
          function(e, es) {
              var cleanEx = [];

              for(var i=0; i<es.length; i++) {
                  cleanEx.push(es[i][1]);
              }
              var args = {};
              args.token = 'args';
              args.value = [e].concat(cleanEx);

              return args;
          },
          { type: "other", description: "[64] ConstructTemplate" },
          function(ts) {
              return ts;
          },
          { type: "other", description: "[65] ConstructTriples" },
          function(b, bs) {
              var triples = b.triplesContext;
          var toTest = null;
          if(bs != null && typeof(bs) === 'object') {
              if(bs.length != null) {
                  if(bs[3] != null && bs[3].triplesContext!=null) {
                      triples = triples.concat(bs[3].triplesContext);
                  }
              }
          }

          return {token:'triplestemplate',
              triplesContext: triples}
          },
          { type: "other", description: "[66] TriplesSameSubject" },
          function(s, pairs) {
              var triplesContext = pairs.triplesContext;
              var subject = s;
              if(pairs.pairs) {
                  for(var i=0; i< pairs.pairs.length; i++) {
                      var pair = pairs.pairs[i];
                      var triple = null;
                      if(pair[1].length != null)
                          pair[1] = pair[1][0]
                      if(subject.token && subject.token==='triplesnodecollection') {
                          triple = {subject: subject.chainSubject[0], predicate: pair[0], object: pair[1]}
                          triplesContext.push(triple);
                          triplesContext = triplesContext.concat(subject.triplesContext);
                      } else {
                          triple = {subject: subject, predicate: pair[0], object: pair[1]}
                          triplesContext.push(triple);
                      }
                  }
              }

              var token = {};
              token.token = "triplessamesubject";
              token.triplesContext = triplesContext;
              token.chainSubject = subject;

              return token;
          },
          function(tn, pairs) {
              var triplesContext = tn.triplesContext;
              var subject = tn.chainSubject;

              if(pairs.pairs) {
                  for(var i=0; i< pairs.pairs.length; i++) {
                      var pair = pairs.pairs[i];
                      if(pair[1].length != null)
                          pair[1] = pair[1][0]

                      if(tn.token === "triplesnodecollection") {
                          for(var j=0; j<subject.length; j++) {
                              var subj = subject[j];
                              if(subj.triplesContext != null) {
                                  var triple = {subject: subj.chainSubject, predicate: pair[0], object: pair[1]}
                                  triplesContext.concat(subj.triplesContext);
                              } else {
                                  var triple = {subject: subject[j], predicate: pair[0], object: pair[1]}
                                  triplesContext.push(triple);
                              }
                          }
                      } else {
                          var triple = {subject: subject, predicate: pair[0], object: pair[1]}
                          triplesContext.push(triple);
                      }
                  }
              }

              var token = {};
              token.token = "triplessamesubject";
              token.triplesContext = triplesContext;
              token.chainSubject = subject;

              return token;
          },
          { type: "other", description: "[83] PropertyListPathNotEmpty" },
          function(v, ol, rest) {
              var token = {};
              token.token = 'propertylist';
              var triplesContext = [];
              var pairs = [];
              var test = [];

              for( var i=0; i<ol.length; i++) {

                  if(ol[i].triplesContext != null) {
                      triplesContext = triplesContext.concat(ol[i].triplesContext);
                      if(ol[i].token==='triplesnodecollection' && ol[i].chainSubject.length != null) {
                          pairs.push([v, ol[i].chainSubject[0]]);
                      } else {
                          pairs.push([v, ol[i].chainSubject]);
                      }

                  } else {
                      pairs.push([v, ol[i]])
                  }

              }


              for(var i=0; i<rest.length; i++) {
                  var tok = rest[i][3];
                  var newVerb  = tok[0];
                  var newObjsList = tok[2] || [];

                  for(var j=0; j<newObjsList.length; j++) {
                      if(newObjsList[j].triplesContext != null) {
                          triplesContext = triplesContext.concat(newObjsList[j].triplesContext);
                          pairs.push([newVerb, newObjsList[j].chainSubject]);
                      } else {
                          pairs.push([newVerb, newObjsList[j]])
                      }
                  }
              }

              token.pairs = pairs;
              token.triplesContext = triplesContext;

              return token;
          },
          { type: "other", description: "[67] PropertyListNotEmpty" },
          function(v, ol, rest) {
              var token = {};
              token.token = 'propertylist';
              var triplesContext = [];
              var pairs = [];
              var test = [];

              for( var i=0; i<ol.length; i++) {

                  if(ol[i].triplesContext != null) {
                      triplesContext = triplesContext.concat(ol[i].triplesContext);
                      if(ol[i].token==='triplesnodecollection' && ol[i].chainSubject.length != null) {
                          pairs.push([v, ol[i].chainSubject[0]]);
                      } else {
                          pairs.push([v, ol[i].chainSubject]);
                      }

                  } else {
                      pairs.push([v, ol[i]])
                  }

              }


              for(var i=0; i<rest.length; i++) {
                  var tok = rest[i][3];
                  var newVerb  = tok[0];
                  var newObjsList = tok[2] || [];

                  for(var j=0; j<newObjsList.length; j++) {
                      if(newObjsList[j].triplesContext != null) {
                          triplesContext = triplesContext.concat(newObjsList[j].triplesContext);
                          pairs.push([newVerb, newObjsList[j].chainSubject]);
                      } else {
                          pairs.push([newVerb, newObjsList[j]])
                      }
                  }
              }

              token.pairs = pairs;
              token.triplesContext = triplesContext;

              return token;

          },
          { type: "other", description: "[68] PropertyList" },
          { type: "other", description: "[86] ObjectListPath" },
          function(obj, objs) {
              var toReturn = [];

              toReturn.push(obj);

              for(var i=0; i<objs.length; i++) {
                  for(var j=0; j<objs[i].length; j++) {
                      if(typeof(objs[i][j])=="object" && objs[i][j].token != null) {
                          toReturn.push(objs[i][j]);
                      }
                  }
              }

              return toReturn;
          },
          { type: "other", description: "[69] ObjectList" },
          function(obj, objs) {

              var toReturn = [];

              toReturn.push(obj);

              for(var i=0; i<objs.length; i++) {
                  for(var j=0; j<objs[i].length; j++) {
                      if(typeof(objs[i][j])=="object" && objs[i][j].token != null) {
                          toReturn.push(objs[i][j]);
                      }
                  }
              }

              return toReturn;
          },
          { type: "other", description: "[87] ObjectPath" },
          { type: "other", description: "[70] Object" },
          { type: "other", description: "[71] Verb" },
          "a",
          { type: "literal", value: "a", description: "\"a\"" },
          function() {
              return{token: 'uri', prefix:null, suffix:null, value:"http://www.w3.org/1999/02/22-rdf-syntax-ns#type"}
          },
          { type: "other", description: "[72] TriplesSameSubjectPath" },
          function(s, pairs) {
              var triplesContext = pairs.triplesContext;
              var subject = s;
              if(pairs.pairs) {
                  for(var i=0; i< pairs.pairs.length; i++) {
                      var pair = pairs.pairs[i];
                      var triple = null;
                      if(pair[1].length != null)
                          pair[1] = pair[1][0]
                      if(subject.token && subject.token==='triplesnodecollection') {
                          triple = {subject: subject.chainSubject[0], predicate: pair[0], object: pair[1]};
                          if(triple.predicate.token === 'path' && triple.predicate.kind === 'element') {
                              triple.predicate = triple.predicate.value;
                          }
                          triplesContext.push(triple);
                          triplesContext = triplesContext.concat(subject.triplesContext);
                      } else {
                          triple = {subject: subject, predicate: pair[0], object: pair[1]}
                          if(triple.predicate.token === 'path' && triple.predicate.kind === 'element') {
                              triple.predicate = triple.predicate.value;
                          }
                          triplesContext.push(triple);
                      }
                  }
              }

              var token = {};
              token.token = "triplessamesubject";
              token.triplesContext = triplesContext;
              token.chainSubject = subject;

              return token;
          },
          function(tn, pairs) {
              var triplesContext = tn.triplesContext;
              var subject = tn.chainSubject;

              if(pairs != null && pairs.pairs != null) {
                  for(var i=0; i< pairs.pairs.length; i++) {
                      var pair = pairs.pairs[i];
                      if(pair[1].length != null)
                          pair[1] = pair[1][0]

                      if(tn.token === "triplesnodecollection") {
                          for(var j=0; j<subject.length; j++) {
                              var subj = subject[j];
                              if(subj.triplesContext != null) {
                                  var triple = {subject: subj.chainSubject, predicate: pair[0], object: pair[1]}
                                  triplesContext.concat(subj.triplesContext);
                              } else {
                                  var triple = {subject: subject[j], predicate: pair[0], object: pair[1]}
                                  triplesContext.push(triple);
                              }
                          }
                      } else {
                          var triple = {subject: subject, predicate: pair[0], object: pair[1]}
                          triplesContext.push(triple);
                      }
                  }
              }

              var token = {};
              token.token = "triplessamesubject";
              token.triplesContext = triplesContext;
              token.chainSubject = subject;

              return token;

          },
          { type: "other", description: "[73] PropertyListNotEmptyPath" },
          function(v, ol, rest) {
              token = {}
              token.token = 'propertylist';
              var triplesContext = [];
              var pairs = [];
              var test = [];

              for( var i=0; i<ol.length; i++) {

                  if(ol[i].triplesContext != null) {
                      triplesContext = triplesContext.concat(ol[i].triplesContext);
                      if(ol[i].token==='triplesnodecollection' && ol[i].chainSubject.length != null) {
                          pairs.push([v, ol[i].chainSubject[0]]);
                      } else {
                          pairs.push([v, ol[i].chainSubject]);
                      }

                  } else {
                      pairs.push([v, ol[i]])
                  }

              }


              for(var i=0; i<rest.length; i++) {
                  var tok = rest[i][3];
                  var newVerb  = tok[0];
                  var newObjsList = tok[1] || [];

                  for(var j=0; j<newObjsList.length; j++) {
                      if(newObjsList[j].triplesContext != null) {
                          triplesContext = triplesContext.concat(newObjsList[j].triplesContext);
                          pairs.push([newVerb, newObjsList[j].chainSubject]);
                      } else {
                          pairs.push([newVerb, newObjsList[j]])
                      }
                  }
              }

              token.pairs = pairs;
              token.triplesContext = triplesContext;

              return token;
          },
          { type: "other", description: "[74] PropertyListPath" },
          { type: "other", description: "[75]" },
          function(p) {
              var path = {};
              path.token = 'path';
              path.kind = 'element';
              path.value = p;

              return p;
          },
          { type: "other", description: "[76] VerbSimple" },
          { type: "other", description: "[77] Path" },
          { type: "other", description: "[78] PathAlternative" },
          "|",
          { type: "literal", value: "|", description: "\"|\"" },
          function(first, rest) {
              if(rest == null || rest.length === 0) {
                  return first;
              } else {
                  var acum = [];
                  for(var i=0; i<rest.length; i++)
                      acum.push(rest[1]);

                  var path = {};
                  path.token = 'path';
                  path.kind = 'alternative';
                  path.value = acum;

                  return path;
              }
          },
          { type: "other", description: "[79] PathSequence" },
          "/",
          { type: "literal", value: "/", description: "\"/\"" },
          function(first, rest) {
              if(rest == null || rest.length === 0) {
                  return first;
              } else {
                  var acum = [first];

                  for(var i=0; i<rest.length; i++)
                      acum.push(rest[i][1]);

                  var path = {};
                  path.token = 'path';
                  path.kind = 'sequence';

                  path.value = acum;

                  return path;
              }
          },
          { type: "other", description: "[88] PathElt" },
          function(p, mod) {
              if(p.token && p.token != 'path' && mod == '') {
              return p;
          } else if(p.token && p.token != path && mod != '') {
              var path = {};
              path.token = 'path';
              path.kind = 'element';
              path.value = p;
              path.modifier = mod;
              return path;
          } else {
              p.modifier = mod;
              return p;
          }
          },
          { type: "other", description: "[81] PathEltOrInverse" },
          "^",
          { type: "literal", value: "^", description: "\"^\"" },
          function(elt) {
              var path = {};
              path.token = 'path';
              path.kind = 'inversePath';
              path.value = elt;

              return path;
          },
          { type: "other", description: "[82] PathMod" },
          "?",
          { type: "literal", value: "?", description: "\"?\"" },
          "+",
          { type: "literal", value: "+", description: "\"+\"" },
          { type: "other", description: "[83] PathPrimary" },
          "!",
          { type: "literal", value: "!", description: "\"!\"" },
          { type: "other", description: "[85] PathOneInPropertySet" },
          { type: "other", description: "[86] Integer" },
          { type: "other", description: "[100] TriplesNodePath" },
          function(c) {
              var triplesContext = [];
              var chainSubject = [];

              var triple = null;

              // catch NIL
              /*
               if(c.length == 1 && c[0].token && c[0].token === 'nil') {
               GlobalBlankNodeCounter++;
               return  {token: "triplesnodecollection",
               triplesContext:[{subject: {token:'blank', value:("_:"+GlobalBlankNodeCounter)},
               predicate:{token:'uri', prefix:null, suffix:null, value:'http://www.w3.org/1999/02/22-rdf-syntax-ns#rest'},
               object:  {token:'blank', value:("_:"+(GlobalBlankNodeCounter+1))}}],
               chainSubject:{token:'blank', value:("_:"+GlobalBlankNodeCounter)}};

               }
               */

              // other cases
              for(var i=0; i<c.length; i++) {
                  GlobalBlankNodeCounter++;
                  //_:b0  rdf:first  1 ;
                  //rdf:rest   _:b1 .
                  var nextObject = null;
                  if(c[i].chainSubject == null && c[i].triplesContext == null) {
                      nextObject = c[i];
                  } else {
                      nextObject = c[i].chainSubject;
                      triplesContext = triplesContext.concat(c[i].triplesContext);
                  }
                  triple = {
                      subject: {token:'blank', value:("_:"+GlobalBlankNodeCounter)},
                      predicate:{token:'uri', prefix:null, suffix:null, value:'http://www.w3.org/1999/02/22-rdf-syntax-ns#first'},
                      object:nextObject
                  };

                  if(i==0) {
                      chainSubject.push(triple.subject);
                  }

                  triplesContext.push(triple);

                  if(i===(c.length-1)) {
                      triple = {subject: {token:'blank', value:("_:"+GlobalBlankNodeCounter)},
                          predicate:{token:'uri', prefix:null, suffix:null, value:'http://www.w3.org/1999/02/22-rdf-syntax-ns#rest'},
                          object:   {token:'uri', prefix:null, suffix:null, value:'http://www.w3.org/1999/02/22-rdf-syntax-ns#nil'}};
                  } else {
                      triple = {subject: {token:'blank', value:("_:"+GlobalBlankNodeCounter)},
                          predicate:{token:'uri', prefix:null, suffix:null, value:'http://www.w3.org/1999/02/22-rdf-syntax-ns#rest'},
                          object:  {token:'blank', value:("_:"+(GlobalBlankNodeCounter+1))} };
                  }

                  triplesContext.push(triple);
              }

              return {token:"triplesnodecollection", triplesContext:triplesContext, chainSubject:chainSubject};
          },
          { type: "other", description: "[87] TriplesNode" },
          function(c) {
              var triplesContext = [];
              var chainSubject = [];

              var triple = null;

              // catch NIL
              /*
               if(c.length == 1 && c[0].token && c[0].token === 'nil') {
               GlobalBlankNodeCounter++;
               return  {token: "triplesnodecollection",
               triplesContext:[{subject: {token:'blank', value:("_:"+GlobalBlankNodeCounter)},
               predicate:{token:'uri', prefix:null, suffix:null, value:'http://www.w3.org/1999/02/22-rdf-syntax-ns#rest'},
               object:  {token:'blank', value:("_:"+(GlobalBlankNodeCounter+1))}}],
               chainSubject:{token:'blank', value:("_:"+GlobalBlankNodeCounter)}};

               }
               */

              // other cases
              for(var i=0; i<c.length; i++) {
                  GlobalBlankNodeCounter++;
                  //_:b0  rdf:first  1 ;
                  //rdf:rest   _:b1 .
                  var nextObject = null;
                  if(c[i].chainSubject == null && c[i].triplesContext == null) {
                      nextObject = c[i];
                  } else {
                      nextObject = c[i].chainSubject;
                      triplesContext = triplesContext.concat(nextObject.triplesContext);
                  }
                  triple = {subject: {token:'blank', value:("_:"+GlobalBlankNodeCounter)},
                      predicate:{token:'uri', prefix:null, suffix:null, value:'http://www.w3.org/1999/02/22-rdf-syntax-ns#first'},
                      object:nextObject };

                  if(i==0) {
                      chainSubject.push(triple.subject);
                  }

                  triplesContext.push(triple);

                  if(i===(c.length-1)) {
                      triple = {subject: {token:'blank', value:("_:"+GlobalBlankNodeCounter)},
                          predicate:{token:'uri', prefix:null, suffix:null, value:'http://www.w3.org/1999/02/22-rdf-syntax-ns#rest'},
                          object:   {token:'uri', prefix:null, suffix:null, value:'http://www.w3.org/1999/02/22-rdf-syntax-ns#nil'}};
                  } else {
                      triple = {subject: {token:'blank', value:("_:"+GlobalBlankNodeCounter)},
                          predicate:{token:'uri', prefix:null, suffix:null, value:'http://www.w3.org/1999/02/22-rdf-syntax-ns#rest'},
                          object:  {token:'blank', value:("_:"+(GlobalBlankNodeCounter+1))} };
                  }

                  triplesContext.push(triple);
              }

              return {token:"triplesnodecollection", triplesContext:triplesContext, chainSubject:chainSubject};
          },
          { type: "other", description: "[101] BlankNodePropertyListPath" },
          "[",
          { type: "literal", value: "[", description: "\"[\"" },
          "]",
          { type: "literal", value: "]", description: "\"]\"" },
          function(pl) {
              GlobalBlankNodeCounter++;
              var subject = {token:'blank', value:'_:'+GlobalBlankNodeCounter};
               var newTriples =  [];

              for(var i=0; i< pl.pairs.length; i++) {
                  var pair = pl.pairs[i];
                  var triple = {}
                  triple.subject = subject;
                  triple.predicate = pair[0];
                  if(pair[1].length != null)
                      pair[1] = pair[1][0]
                  triple.object = pair[1];
                  newTriples.push(triple);
              }

              return {
                  token: 'triplesnode',
                  kind: 'blanknodepropertylist',
                  triplesContext: pl.triplesContext.concat(newTriples),
                  chainSubject: subject
              };
          },
          { type: "other", description: "[88] BlankNodePropertyList" },
          function(pl) {

              GlobalBlankNodeCounter++;
              var subject = {token:'blank', value:'_:'+GlobalBlankNodeCounter};
              var newTriples =  [];

              for(var i=0; i< pl.pairs.length; i++) {
                  var pair = pl.pairs[i];
                  var triple = {}
                  triple.subject = subject;
                  triple.predicate = pair[0];
                  if(pair[1].length != null)
                      pair[1] = pair[1][0]
                  triple.object = pair[1];
                  newTriples.push(triple);
              }

              return {
                  token: 'triplesnode',
                  kind: 'blanknodepropertylist',
                  triplesContext: pl.triplesContext.concat(newTriples),
                  chainSubject: subject
              };
          },
          { type: "other", description: "[103] CollectionPath" },
          function(gn) {
              return gn;
          },
          { type: "other", description: "[89] Collection" },
          { type: "other", description: "[105] GraphNodePath" },
          function(gn) {
              return gn[1];
          },
          { type: "other", description: "[90] GraphNode" },
          { type: "other", description: "[91] VarOrTerm" },
          { type: "other", description: "[92] VarOrIRIref" },
          { type: "other", description: "[93] Var" },
          function(v) {
              var term = {};
              term.token = 'var';
              term.value = v;
              return term;
          },
          { type: "other", description: "[94] GraphTerm" },
          { type: "other", description: "[95] Expression" },
          { type: "other", description: "[96] ConditionalOrExpression" },
          "||",
          { type: "literal", value: "||", description: "\"||\"" },
          function(v, vs) {
              if(vs.length === 0) {
                  return v;
              }

              var exp = {};
              exp.token = "expression";
              exp.expressionType = "conditionalor";
              var ops = [v];

              for(var i=0; i<vs.length; i++) {
                  ops.push(vs[i][3]);
              }

              exp.operands = ops;

              return exp;
          },
          { type: "other", description: "[97] ConditionalAndExpression" },
          "&&",
          { type: "literal", value: "&&", description: "\"&&\"" },
          function(v, vs) {
              if(vs.length === 0) {
                  return v;
              }
              var exp = {};
              exp.token = "expression";
              exp.expressionType = "conditionaland";
              var ops = [v];

              for(var i=0; i<vs.length; i++) {
                  ops.push(vs[i][3]);
              }

              exp.operands = ops;

              return exp;
          },
          { type: "other", description: "[98] ValueLogical" },
          { type: "other", description: "[99] RelationalExpression" },
          "=",
          { type: "literal", value: "=", description: "\"=\"" },
          "!=",
          { type: "literal", value: "!=", description: "\"!=\"" },
          "<",
          { type: "literal", value: "<", description: "\"<\"" },
          ">",
          { type: "literal", value: ">", description: "\">\"" },
          "<=",
          { type: "literal", value: "<=", description: "\"<=\"" },
          ">=",
          { type: "literal", value: ">=", description: "\">=\"" },
          "I",
          { type: "literal", value: "I", description: "\"I\"" },
          "i",
          { type: "literal", value: "i", description: "\"i\"" },
          "N",
          { type: "literal", value: "N", description: "\"N\"" },
          "n",
          { type: "literal", value: "n", description: "\"n\"" },
          "O",
          { type: "literal", value: "O", description: "\"O\"" },
          "o",
          { type: "literal", value: "o", description: "\"o\"" },
          "T",
          { type: "literal", value: "T", description: "\"T\"" },
          "t",
          { type: "literal", value: "t", description: "\"t\"" },
          function(op1, op2) {
              if(op2.length === 0) {
                  return op1;
              } else if(op2[0][1] === 'i' || op2[0][1] === 'I' || op2[0][1] === 'n' || op2[0][1] === 'N'){
                  var exp = {};

                  if(op2[0][1] === 'i' || op2[0][1] === 'I') {
                      var operator = "=";
                      exp.expressionType = "conditionalor"
                  } else {
                      var operator = "!=";
                      exp.expressionType = "conditionaland"
                  }
                  var lop = op1;
                  var rops = []
                  for(var opi=0; opi<op2[0].length; opi++) {
                      if(op2[0][opi].token ==="args") {
                          rops = op2[0][opi].value;
                          break;
                      }
                  }

                  exp.token = "expression";
                  exp.operands = [];
                  for(var i=0; i<rops.length; i++) {
                      var nextOperand = {};
                      nextOperand.token = "expression";
                      nextOperand.expressionType = "relationalexpression";
                      nextOperand.operator = operator;
                      nextOperand.op1 = lop;
                      nextOperand.op2 = rops[i];

                      exp.operands.push(nextOperand);
                  }
                  return exp;
              } else {
                  var exp = {};
                  exp.expressionType = "relationalexpression"
                  exp.operator = op2[0][1];
                  exp.op1 = op1;
                  exp.op2 = op2[0][3];
                  exp.token = "expression";

                  return exp;
              }
          },
          { type: "other", description: "[100] NumericExpression" },
          { type: "other", description: "[101] AdditiveExpression" },
          "-",
          { type: "literal", value: "-", description: "\"-\"" },
          function(op1, ops) {
              if(ops.length === 0) {
                  return op1;
              }

              var ex = {};
              ex.token = 'expression';
              ex.expressionType = 'additiveexpression';
              ex.summand = op1;
              ex.summands = [];

              for(var i=0; i<ops.length; i++) {
                  var summand = ops[i];
                  var sum = {};
                  if(summand.length == 4 && typeof(summand[1]) === "string") {
                      sum.operator = summand[1];
                      sum.expression = summand[3];
                  } else {
                      var subexp = {}
                      var firstFactor = sum[0];
                      var operator = sum[1][1];
                      var secondFactor = sum[1][3];
                      var operator = null;
                      if(firstFactor.value < 0) {
                          sum.operator = '-';
                          firstFactor.value = - firstFactor.value;
                      } else {
                          sum.operator = '+';
                      }
                      subexp.token = 'expression';
                      subexp.expressionType = 'multiplicativeexpression';
                      subexp.operator = firstFactor;
                      subexp.factors = [{operator: operator, expression: secondFactor}];

                      sum.expression = subexp;
                  }
                  ex.summands.push(sum);
              }

              return ex;
          },
          { type: "other", description: "[102] MultiplicativeExpression" },
          function(exp, exps) {
              if(exps.length === 0) {
                  return exp;
              }

              var ex = {};
              ex.token = 'expression';
              ex.expressionType = 'multiplicativeexpression';
              ex.factor = exp;
              ex.factors = [];
              for(var i=0; i<exps.length; i++) {
                  var factor = exps[i];
                  var fact = {};
                  fact.operator = factor[1];
                  fact.expression = factor[3];
                  ex.factors.push(fact);
              }

              return ex;
          },
          { type: "other", description: "[103] UnaryExpression" },
          function(e) {
              var ex = {};
              ex.token = 'expression';
              ex.expressionType = 'unaryexpression';
              ex.unaryexpression = "!";
              ex.expression = e;

              return ex;
          },
          function(v) {
              var ex = {};
              ex.token = 'expression';
              ex.expressionType = 'unaryexpression';
              ex.unaryexpression = "+";
              ex.expression = v;

              return ex;
          },
          function(v) {
              var ex = {};
              ex.token = 'expression';
              ex.expressionType = 'unaryexpression';
              ex.unaryexpression = "-";
              ex.expression = v;

              return ex;
          },
          { type: "other", description: "[104] PrimaryExpression" },
          function(v) {
              var ex = {};
              ex.token = 'expression';
              ex.expressionType = 'atomic';
              ex.primaryexpression = 'rdfliteral';
              ex.value = v;

              return ex;
          },
          function(v) {
              var ex = {};
              ex.token = 'expression';
              ex.expressionType = 'atomic';
              ex.primaryexpression = 'numericliteral';
              ex.value = v;

              return ex;
          },
          function(v) {
              var ex = {};
              ex.token = 'expression';
              ex.expressionType = 'atomic';
              ex.primaryexpression = 'booleanliteral';
              ex.value = v;

              return ex;
          },
          function(v) {
              var ex = {};
              ex.token = 'expression';
              ex.expressionType = 'atomic';
              ex.primaryexpression = 'var';
              ex.value = v;

              return ex;
          },
          { type: "other", description: "[105] BrackettedExpression" },
          function(e) {
              return e;
          },
          { type: "other", description: "[106] BuiltInCall" },
          "STR",
          { type: "literal", value: "STR", description: "\"STR\"" },
          "str",
          { type: "literal", value: "str", description: "\"str\"" },
          function(e) {
              var ex = {};
              ex.token = 'expression'
              ex.expressionType = 'builtincall'
              ex.builtincall = 'str'
              ex.args = [e]

              return ex;
          },
          "LANG",
          { type: "literal", value: "LANG", description: "\"LANG\"" },
          "lang",
          { type: "literal", value: "lang", description: "\"lang\"" },
          function(e) {
              var ex = {};
              ex.token = 'expression'
              ex.expressionType = 'builtincall'
              ex.builtincall = 'lang'
              ex.args = [e]

              return ex;
          },
          "LANGMATCHES",
          { type: "literal", value: "LANGMATCHES", description: "\"LANGMATCHES\"" },
          "langmatches",
          { type: "literal", value: "langmatches", description: "\"langmatches\"" },
          function(e1, e2) {
              var ex = {};
              ex.token = 'expression'
              ex.expressionType = 'builtincall'
              ex.builtincall = 'langmatches'
              ex.args = [e1,e2]

              return ex;
          },
          "DATATYPE",
          { type: "literal", value: "DATATYPE", description: "\"DATATYPE\"" },
          "datatype",
          { type: "literal", value: "datatype", description: "\"datatype\"" },
          function(e) {
              var ex = {};
              ex.token = 'expression'
              ex.expressionType = 'builtincall'
              ex.builtincall = 'datatype'
              ex.args = [e]

              return ex;
          },
          "BOUND",
          { type: "literal", value: "BOUND", description: "\"BOUND\"" },
          "bound",
          { type: "literal", value: "bound", description: "\"bound\"" },
          function(v) {
              var ex = {};
              ex.token = 'expression'
              ex.expressionType = 'builtincall'
              ex.builtincall = 'bound'
              ex.args = [v]

              return ex;
          },
          "IRI",
          { type: "literal", value: "IRI", description: "\"IRI\"" },
          "iri",
          { type: "literal", value: "iri", description: "\"iri\"" },
          function(e) {
              var ex = {};
              ex.token = 'expression';
              ex.expressionType = 'builtincall';
              ex.builtincall = 'iri'
              ex.args = [e];

              return ex;
          },
          "URI",
          { type: "literal", value: "URI", description: "\"URI\"" },
          "uri",
          { type: "literal", value: "uri", description: "\"uri\"" },
          function(e) {
              var ex = {};
              ex.token = 'expression';
              ex.expressionType = 'builtincall';
              ex.builtincall = 'uri'
              ex.args = [e];

              return ex;
          },
          "BNODE",
          { type: "literal", value: "BNODE", description: "\"BNODE\"" },
          "bnode",
          { type: "literal", value: "bnode", description: "\"bnode\"" },
          function(arg) {
              var ex = {};
              ex.token = 'expression';
              ex.expressionType = 'builtincall';
              ex.builtincall = 'bnode';
              if(arg.length === 5) {
                  ex.args = [arg[2]];
              } else {
                  ex.args = null;
              }

              return ex;
          },
          "COALESCE",
          { type: "literal", value: "COALESCE", description: "\"COALESCE\"" },
          "coalesce",
          { type: "literal", value: "coalesce", description: "\"coalesce\"" },
          function(args) {
              var ex = {};
              ex.token = 'expression';
              ex.expressionType = 'builtincall';
              ex.builtincall = 'coalesce';
              ex.args = args;

              return ex;
          },
          "IF",
          { type: "literal", value: "IF", description: "\"IF\"" },
          "if",
          { type: "literal", value: "if", description: "\"if\"" },
          function(test, trueCond, falseCond) {
              var ex = {};
              ex.token = 'expression';
              ex.expressionType = 'builtincall';
              ex.builtincall = 'if';
              ex.args = [test,trueCond,falseCond];

              return ex;
          },
          "ISLITERAL",
          { type: "literal", value: "ISLITERAL", description: "\"ISLITERAL\"" },
          "isliteral",
          { type: "literal", value: "isliteral", description: "\"isliteral\"" },
          function(arg) {
              var ex = {};
              ex.token = 'expression';
              ex.expressionType = 'builtincall';
              ex.builtincall = 'isliteral';
              ex.args = [arg];

              return ex;
          },
          "ISBLANK",
          { type: "literal", value: "ISBLANK", description: "\"ISBLANK\"" },
          "isblank",
          { type: "literal", value: "isblank", description: "\"isblank\"" },
          function(arg) {
              var ex = {};
              ex.token = 'expression';
              ex.expressionType = 'builtincall';
              ex.builtincall = 'isblank';
              ex.args = [arg];

              return ex;
          },
          "SAMETERM",
          { type: "literal", value: "SAMETERM", description: "\"SAMETERM\"" },
          "sameterm",
          { type: "literal", value: "sameterm", description: "\"sameterm\"" },
          function(e1, e2) {
              var ex = {};
              ex.token = 'expression';
              ex.expressionType = 'builtincall';
              ex.builtincall = 'sameterm';
              ex.args = [e1, e2];
              return ex;
          },
          "ISURI",
          { type: "literal", value: "ISURI", description: "\"ISURI\"" },
          "isuri",
          { type: "literal", value: "isuri", description: "\"isuri\"" },
          "ISIRI",
          { type: "literal", value: "ISIRI", description: "\"ISIRI\"" },
          "isiri",
          { type: "literal", value: "isiri", description: "\"isiri\"" },
          function(arg) {
              var ex = {};
              ex.token = 'expression';
              ex.expressionType = 'builtincall';
              ex.builtincall = 'isuri';
              ex.args = [arg];

              return ex;
          },
          "custom:",
          { type: "literal", value: "custom:", description: "\"custom:\"" },
          "CUSTOM:",
          { type: "literal", value: "CUSTOM:", description: "\"CUSTOM:\"" },
          /^[a-zA-Z0-9_]/,
          { type: "class", value: "[a-zA-Z0-9_]", description: "[a-zA-Z0-9_]" },
          function(fnname, alter, finalarg) {
              var ex = {};
              ex.token = 'expression';
              ex.expressionType = 'custom';
              ex.name = fnname.join('');
              var acum = [];
              for(var i=0; i<alter.length; i++)
                  acum.push(alter[i][1]);
              acum.push(finalarg);
              ex.args = acum;

              return ex;
          },
          { type: "other", description: "[107] RegexExpression" },
          "REGEX",
          { type: "literal", value: "REGEX", description: "\"REGEX\"" },
          "regex",
          { type: "literal", value: "regex", description: "\"regex\"" },
          function(e1, e2, eo) {
              var regex = {};
          regex.token = 'expression';
          regex.expressionType = 'regex';
          regex.text = e1;
          regex.pattern = e2;
          regex.flags = eo[2];

          return regex;
          },
          { type: "other", description: "[108] ExistsFunc" },
          "EXISTS",
          { type: "literal", value: "EXISTS", description: "\"EXISTS\"" },
          "exists",
          { type: "literal", value: "exists", description: "\"exists\"" },
          function(ggp) {
              var ex = {};
              ex.token = 'expression';
              ex.expressionType = 'builtincall';
              ex.builtincall = 'exists';
              ex.args = [ggp];

              return ex;
          },
          { type: "other", description: "[109] NotExistsFunc" },
          "NOT",
          { type: "literal", value: "NOT", description: "\"NOT\"" },
          "not",
          { type: "literal", value: "not", description: "\"not\"" },
          function(ggp) {
              var ex = {};
              ex.token = 'expression';
              ex.expressionType = 'builtincall';
              ex.builtincall = 'notexists';
              ex.args = [ggp];

              return ex;
          },
          { type: "other", description: "[110] Aggregate" },
          "COUNT",
          { type: "literal", value: "COUNT", description: "\"COUNT\"" },
          "count",
          { type: "literal", value: "count", description: "\"count\"" },
          function(d, e) {
              var exp = {};
          exp.token = 'expression';
          exp.expressionType = 'aggregate';
          exp.aggregateType = 'count';
          exp.distinct = (d != "" ? 'DISTINCT' : d);
          exp.expression = e;

          return exp;

          },
          "GROUP_CONCAT",
          { type: "literal", value: "GROUP_CONCAT", description: "\"GROUP_CONCAT\"" },
          "group_concat",
          { type: "literal", value: "group_concat", description: "\"group_concat\"" },
          "SEPARATOR",
          { type: "literal", value: "SEPARATOR", description: "\"SEPARATOR\"" },
          function(d, e, s) {
              var exp = {};
              exp.token = 'expression';
              exp.expressionType = 'aggregate';
              exp.aggregateType = 'group_concat';
              exp.distinct = (d != "" ? 'DISTINCT' : d);
              exp.expression = e;
              exp.separator = s;

              return exp;

          },
          "SUM",
          { type: "literal", value: "SUM", description: "\"SUM\"" },
          "sum",
          { type: "literal", value: "sum", description: "\"sum\"" },
          function(d, e) {
              var exp = {};
          exp.token = 'expression';
          exp.expressionType = 'aggregate';
          exp.aggregateType = 'sum';
          exp.distinct = (d != "" ? 'DISTINCT' : d);
          exp.expression = e;

          return exp;

          },
          "MIN",
          { type: "literal", value: "MIN", description: "\"MIN\"" },
          "min",
          { type: "literal", value: "min", description: "\"min\"" },
          function(d, e) {
              var exp = {};
          exp.token = 'expression';
          exp.expressionType = 'aggregate';
          exp.aggregateType = 'min';
          exp.distinct = (d != "" ? 'DISTINCT' : d);
          exp.expression = e;

          return exp;

          },
          "MAX",
          { type: "literal", value: "MAX", description: "\"MAX\"" },
          "max",
          { type: "literal", value: "max", description: "\"max\"" },
          function(d, e) {
              var exp = {};
          exp.token = 'expression'
          exp.expressionType = 'aggregate'
          exp.aggregateType = 'max'
          exp.distinct = (d != "" ? 'DISTINCT' : d);
          exp.expression = e

          return exp

          },
          "AVG",
          { type: "literal", value: "AVG", description: "\"AVG\"" },
          "avg",
          { type: "literal", value: "avg", description: "\"avg\"" },
          function(d, e) {
              var exp = {};
          exp.token = 'expression'
          exp.expressionType = 'aggregate'
          exp.aggregateType = 'avg'
          exp.distinct = (d != "" ? 'DISTINCT' : d);
          exp.expression = e

          return exp

          },
          { type: "other", description: "[117] IRIrefOrFunction" },
          function(i, args) {
              var fcall = {};
          fcall.token = "expression";
          fcall.expressionType = 'irireforfunction';
          fcall.iriref = i;
          fcall.args = args.value;

          return fcall;
          },
          { type: "other", description: "[112] RDFLiteral" },
          "^^",
          { type: "literal", value: "^^", description: "\"^^\"" },
          function(s, e) {
              if(typeof(e) === "string" && e.length > 0) {
              return {token:'literal', value:s.value, lang:e.slice(1), type:null}
          } else {
              if(e != null && typeof(e) === "object") {
                  e.shift(); // remove the '^^' char
                  return {token:'literal', value:s.value, lang:null, type:e[0] }
              } else {
                  return { token:'literal', value:s.value, lang:null, type:null }
              }
          }
          },
          { type: "other", description: "[113] NumericLiteral" },
          { type: "other", description: "[114] NumericLiteralUnsigned" },
          { type: "other", description: "[115] NumericLiteralPositive" },
          { type: "other", description: "[116] NumericLiteralNegative" },
          { type: "other", description: "[117] BooleanLiteral" },
          "TRUE",
          { type: "literal", value: "TRUE", description: "\"TRUE\"" },
          "true",
          { type: "literal", value: "true", description: "\"true\"" },
          function() {
              var lit = {};
              lit.token = "literal";
              lit.lang = null;
              lit.type = "http://www.w3.org/2001/XMLSchema#boolean";
              lit.value = true;
              return lit;
          },
          "FALSE",
          { type: "literal", value: "FALSE", description: "\"FALSE\"" },
          "false",
          { type: "literal", value: "false", description: "\"false\"" },
          function() {
              var lit = {};
              lit.token = "literal";
              lit.lang = null;
              lit.type = "http://www.w3.org/2001/XMLSchema#boolean";
              lit.value = false;
              return lit;
          },
          { type: "other", description: "[118] String" },
          function(s) { return {token:'string', value:s} },
          { type: "other", description: "[119] IRIref" },
          function(iri) { return {token: 'uri', prefix:null, suffix:null, value:iri} },
          function(p) { return p },
          { type: "other", description: "[120] PrefixedName" },
          function(p) { return {token: 'uri', prefix:p[0], suffix:p[1], value:null } },
          function(p) { return {token: 'uri', prefix:p, suffix:'', value:null } },
          { type: "other", description: "[121] BlankNode" },
          function(l) { return {token:'blank', value:l}},
          function() { GlobalBlankNodeCounter++; return {token:'blank', value:'_:'+GlobalBlankNodeCounter} },
          { type: "other", description: "[122] IRI_REF" },
          /^[^<>"{}|\^`\\]/,
          { type: "class", value: "[^<>\"{}|\\^`\\\\]", description: "[^<>\"{}|\\^`\\\\]" },
          function(iri_ref) { return iri_ref.join('') },
          { type: "other", description: "[123] PNAME_NS" },
          ":",
          { type: "literal", value: ":", description: "\":\"" },
          { type: "other", description: "[124] PNAME_LN" },
          function(p, s) { return [p, s] },
          { type: "other", description: "[125] BLANK_NODE_LABEL" },
          "_:",
          { type: "literal", value: "_:", description: "\"_:\"" },
          function(l) { return l },
          { type: "other", description: "[126] VAR1" },
          function(v) { return v },
          { type: "other", description: "[127] VAR2" },
          "$",
          { type: "literal", value: "$", description: "\"$\"" },
          { type: "other", description: "[128] LANGTAG" },
          "@",
          { type: "literal", value: "@", description: "\"@\"" },
          /^[a-zA-Z]/,
          { type: "class", value: "[a-zA-Z]", description: "[a-zA-Z]" },
          /^[a-zA-Z0-9]/,
          { type: "class", value: "[a-zA-Z0-9]", description: "[a-zA-Z0-9]" },
          function(a, b) {

              if(b.length===0) {
              return ("@"+a.join('')).toLowerCase();
              } else {
              return ("@"+a.join('')+"-"+b[0][1].join('')).toLowerCase();
              }
              },
          { type: "other", description: "[129] INTEGER" },
          /^[0-9]/,
          { type: "class", value: "[0-9]", description: "[0-9]" },
          function(d) {
              var lit = {};
              lit.token = "literal";
              lit.lang = null;
              lit.type = "http://www.w3.org/2001/XMLSchema#integer";
              lit.value = flattenString(d);
              return lit;
              },
          { type: "other", description: "[130] DECIMAL" },
          function(a, b, c) {

              var lit = {};
              lit.token = "literal";
              lit.lang = null;
              lit.type = "http://www.w3.org/2001/XMLSchema#decimal";
              lit.value = flattenString([a,b,c]);
              return lit;
              },
          function(a, b) {
              var lit = {};
              lit.token = "literal";
              lit.lang = null;
              lit.type = "http://www.w3.org/2001/XMLSchema#decimal";
              lit.value = flattenString([a,b]);
              return lit;
              },
          { type: "other", description: "[131] DOUBLE" },
          function(a, b, c, e) {
              var lit = {};
              lit.token = "literal";
              lit.lang = null;
              lit.type = "http://www.w3.org/2001/XMLSchema#double";
              lit.value = flattenString([a,b,c,e]);
              return lit;
              },
          function(a, b, c) {
              var lit = {};
              lit.token = "literal";
              lit.lang = null;
              lit.type = "http://www.w3.org/2001/XMLSchema#double";
              lit.value = flattenString([a,b,c]);
              return lit;
              },
          function(a, b) {
              var lit = {};
              lit.token = "literal";
              lit.lang = null;
              lit.type = "http://www.w3.org/2001/XMLSchema#double";
              lit.value = flattenString([a,b]);
              return lit;
              },
          { type: "other", description: "[132] INTEGER_POSITIVE" },
          function(d) { d.value = "+"+d.value; return d; },
          { type: "other", description: "[133] DECIMAL_POSITIVE" },
          function(d) { d.value = "+"+d.value; return d },
          { type: "other", description: "[134] DOUBLE_POSITIVE" },
          { type: "other", description: "[135] INTEGER_NEGATIVE" },
          function(d) { d.value = "-"+d.value; return d; },
          { type: "other", description: "[136] DECIMAL_NEGATIVE" },
          { type: "other", description: "[137] DOUBLE_NEGATIVE" },
          { type: "other", description: "[138] EXPONENT" },
          /^[eE]/,
          { type: "class", value: "[eE]", description: "[eE]" },
          /^[+\-]/,
          { type: "class", value: "[+\\-]", description: "[+\\-]" },
          function(a, b, c) { return flattenString([a,b,c]) },
          { type: "other", description: "[139] STRING_LITERAL1" },
          "'",
          { type: "literal", value: "'", description: "\"'\"" },
          /^[^'\\\n\r]/,
          { type: "class", value: "[^'\\\\\\n\\r]", description: "[^'\\\\\\n\\r]" },
          function(content) { return flattenString(content) },
          { type: "other", description: "[140] STRING_LITERAL2" },
          "\"",
          { type: "literal", value: "\"", description: "\"\\\"\"" },
          /^[^"\\\n\r]/,
          { type: "class", value: "[^\"\\\\\\n\\r]", description: "[^\"\\\\\\n\\r]" },
          { type: "other", description: "[141] STRING_LITERAL_LONG1" },
          "'''",
          { type: "literal", value: "'''", description: "\"'''\"" },
          /^[^'\\]/,
          { type: "class", value: "[^'\\\\]", description: "[^'\\\\]" },
          { type: "other", description: "[142] STRING_LITERAL_LONG2" },
          "\"\"\"",
          { type: "literal", value: "\"\"\"", description: "\"\\\"\\\"\\\"\"" },
          /^[^"\\]/,
          { type: "class", value: "[^\"\\\\]", description: "[^\"\\\\]" },
          { type: "other", description: "[143] ECHAR" },
          "\\",
          { type: "literal", value: "\\", description: "\"\\\\\"" },
          /^[tbnrf"']/,
          { type: "class", value: "[tbnrf\"']", description: "[tbnrf\"']" },
          { type: "other", description: "[144] NIL" },
          function() {

              return  {token: "triplesnodecollection",
              triplesContext:[],
              chainSubject:[{token:'uri', value:"http://www.w3.org/1999/02/22-rdf-syntax-ns#nil"}]};
              },
          { type: "other", description: "[145] WS" },
          /^[ ]/,
          { type: "class", value: "[ ]", description: "[ ]" },
          /^[\t]/,
          { type: "class", value: "[\\t]", description: "[\\t]" },
          /^[\r]/,
          { type: "class", value: "[\\r]", description: "[\\r]" },
          /^[\n]/,
          { type: "class", value: "[\\n]", description: "[\\n]" },
          { type: "other", description: " COMMENT" },
          "#",
          { type: "literal", value: "#", description: "\"#\"" },
          /^[^\n\r]/,
          { type: "class", value: "[^\\n\\r]", description: "[^\\n\\r]" },
          { type: "other", description: "[146] ANON" },
          { type: "other", description: "[147] PN_CHARS_BASE" },
          /^[A-Z]/,
          { type: "class", value: "[A-Z]", description: "[A-Z]" },
          /^[a-z]/,
          { type: "class", value: "[a-z]", description: "[a-z]" },
          /^[\xC0-\xD6]/,
          { type: "class", value: "[\\xC0-\\xD6]", description: "[\\xC0-\\xD6]" },
          /^[\xD8-\xF6]/,
          { type: "class", value: "[\\xD8-\\xF6]", description: "[\\xD8-\\xF6]" },
          /^[\xF8-\u02FF]/,
          { type: "class", value: "[\\xF8-\\u02FF]", description: "[\\xF8-\\u02FF]" },
          /^[\u0370-\u037D]/,
          { type: "class", value: "[\\u0370-\\u037D]", description: "[\\u0370-\\u037D]" },
          /^[\u037F-\u1FFF]/,
          { type: "class", value: "[\\u037F-\\u1FFF]", description: "[\\u037F-\\u1FFF]" },
          /^[\u200C-\u200D]/,
          { type: "class", value: "[\\u200C-\\u200D]", description: "[\\u200C-\\u200D]" },
          /^[\u2070-\u218F]/,
          { type: "class", value: "[\\u2070-\\u218F]", description: "[\\u2070-\\u218F]" },
          /^[\u2C00-\u2FEF]/,
          { type: "class", value: "[\\u2C00-\\u2FEF]", description: "[\\u2C00-\\u2FEF]" },
          /^[\u3001-\uD7FF]/,
          { type: "class", value: "[\\u3001-\\uD7FF]", description: "[\\u3001-\\uD7FF]" },
          /^[\uF900-\uFDCF]/,
          { type: "class", value: "[\\uF900-\\uFDCF]", description: "[\\uF900-\\uFDCF]" },
          /^[\uFDF0-\uFFFD]/,
          { type: "class", value: "[\\uFDF0-\\uFFFD]", description: "[\\uFDF0-\\uFFFD]" },
          /^[\u1000-\uEFFF]/,
          { type: "class", value: "[\\u1000-\\uEFFF]", description: "[\\u1000-\\uEFFF]" },
          { type: "other", description: "[148] PN_CHARS_U" },
          "_",
          { type: "literal", value: "_", description: "\"_\"" },
          { type: "other", description: "[149] VARNAME" },
          /^[\xB7]/,
          { type: "class", value: "[\\xB7]", description: "[\\xB7]" },
          /^[\u0300-\u036F]/,
          { type: "class", value: "[\\u0300-\\u036F]", description: "[\\u0300-\\u036F]" },
          /^[\u203F-\u2040]/,
          { type: "class", value: "[\\u203F-\\u2040]", description: "[\\u203F-\\u2040]" },
          function(init, rpart) { return init+rpart.join('') },
          { type: "other", description: "[150] PN_CHARS" },
          { type: "other", description: "[151] PN_PREFIX" },
          function(base, rest) { if(rest[rest.length-1] == '.'){
              throw new Error("Wrong PN_PREFIX, cannot finish with '.'")
              } else {
              return base + rest.join('');
              }},
          { type: "other", description: "[152] PN_LOCAL" },
          function(base, rest) {
            return base + (rest||[]).join('');
          },
          { type: "other", description: "[170] PLX" },
          { type: "other", description: "[171] PERCENT" },
          "%",
          { type: "literal", value: "%", description: "\"%\"" },
          function(h) {
            return h.join("");
          },
          { type: "other", description: "[172] HEX" },
          /^[A-F]/,
          { type: "class", value: "[A-F]", description: "[A-F]" },
          /^[a-f]/,
          { type: "class", value: "[a-f]", description: "[a-f]" },
          { type: "other", description: "[173] PN_LOCAL_ESC" },
          "~",
          { type: "literal", value: "~", description: "\"~\"" },
          "&",
          { type: "literal", value: "&", description: "\"&\"" },
          function(c) {
             return "\\"+c;
          }
        ],

        peg$bytecode = [
          peg$decode("7!"),
          peg$decode("7\"*# \"7?"),
          peg$decode("87#9*\" 3 "),
          peg$decode("8!7$+P$7'*/ \"7**) \"7+*# \"7,+4%7>+*%4#6###\"! %$## \"$\"# \"\"# \"9*\" 3!"),
          peg$decode("8!7%*# \" %+M$ &7\xC0,#&7\xC0\"+;% &7&,#&7&\"+)%4#6'#\"\" %$## \"$\"# \"\"# \"9*\" 3$"),
          peg$decode("8! &7\xC0,#&7\xC0\"+`$.)\"\"2)3**) \".+\"\"2+3,+D% &7\xC0,#&7\xC0\"+2%7\xA9+(%4$6-$! %$$# \"$## \"$\"# \"\"# \"9*\" 3("),
          peg$decode("8! &7\xC0,#&7\xC0\"+}$./\"\"2/30*) \".1\"\"2132+a% &7\xC0,#&7\xC0\"+O%7\xAA+E% &7\xC0,#&7\xC0\"+3%7\xA9+)%4&63&\"\" %$&# \"$%# \"$$# \"$## \"$\"# \"\"# \"9*\" 3."),
          peg$decode("8!7)+\xA3$ &7\xC0,#&7\xC0\"+\x91% &7-,#&7-\"+% &7\xC0,#&7\xC0\"+m%71+c% &7\xC0,#&7\xC0\"+Q%72+G% &7\xC0,#&7\xC0\"+5%7<++%4)65)$(&$\"%$)# \"$(# \"$'# \"$&# \"$%# \"$$# \"$## \"$\"# \"\"# \"9*\" 34"),
          peg$decode("8!7)+>$71+4%72+*%4#67##\"! %$## \"$\"# \"\"# \"9*\" 36"),
          peg$decode("8! &7\xC0,#&7\xC0\"+\u02DB$.9\"\"293:*) \".;\"\"2;3<+\u02BF% &7\xC0,#&7\xC0\"+\u02AD%.=\"\"2=3>*) \".?\"\"2?3@*5 \".A\"\"2A3B*) \".C\"\"2C3D*# \" %+\u0273% &7\xC0,#&7\xC0\"+\u0261% &! &7\xC0,#&7\xC0\"+?$7\x8C+5% &7\xC0,#&7\xC0\"+#%'#%$## \"$\"# \"\"# \"*\xE0 \"! &7\xC0,#&7\xC0\"+\xCD$.E\"\"2E3F+\xBD% &7\xC0,#&7\xC0\"+\xAB%7\x8E+\xA1% &7\xC0,#&7\xC0\"+\x8F%.G\"\"2G3H*) \".I\"\"2I3J+s% &7\xC0,#&7\xC0\"+a%7\x8C+W% &7\xC0,#&7\xC0\"+E%.K\"\"2K3L+5% &7\xC0,#&7\xC0\"+#%'+%$+# \"$*# \"$)# \"$(# \"$'# \"$&# \"$%# \"$$# \"$## \"$\"# \"\"# \"+\u0118$,\u0115&! &7\xC0,#&7\xC0\"+?$7\x8C+5% &7\xC0,#&7\xC0\"+#%'#%$## \"$\"# \"\"# \"*\xE0 \"! &7\xC0,#&7\xC0\"+\xCD$.E\"\"2E3F+\xBD% &7\xC0,#&7\xC0\"+\xAB%7\x8E+\xA1% &7\xC0,#&7\xC0\"+\x8F%.G\"\"2G3H*) \".I\"\"2I3J+s% &7\xC0,#&7\xC0\"+a%7\x8C+W% &7\xC0,#&7\xC0\"+E%.K\"\"2K3L+5% &7\xC0,#&7\xC0\"+#%'+%$+# \"$*# \"$)# \"$(# \"$'# \"$&# \"$%# \"$$# \"$## \"$\"# \"\"# \"\"\"\" \"*X \"! &7\xC0,#&7\xC0\"+E$.M\"\"2M3N+5% &7\xC0,#&7\xC0\"+#%'#%$## \"$\"# \"\"# \"+)%4&6O&\"\" %$&# \"$%# \"$$# \"$## \"$\"# \"\"# \"9*\" 38"),
          peg$decode("8! &7\xC0,#&7\xC0\"+\xBF$.Q\"\"2Q3R*) \".S\"\"2S3T+\xA3% &7\xC0,#&7\xC0\"+\x91%7h+\x87% &7\xC0,#&7\xC0\"+u% &7-,#&7-\"+c% &7\xC0,#&7\xC0\"+Q%71+G% &7\xC0,#&7\xC0\"+5%72++%4*6U*$&$\" %$*# \"$)# \"$(# \"$'# \"$&# \"$%# \"$$# \"$## \"$\"# \"\"# \"*\u012D \"! &7\xC0,#&7\xC0\"+\u011A$.Q\"\"2Q3R*) \".S\"\"2S3T+\xFE% &7\xC0,#&7\xC0\"+\xEC% &7-,#&7-\"+\xDA% &7\xC0,#&7\xC0\"+\xC8%.V\"\"2V3W*) \".X\"\"2X3Y+\xAC% &7\xC0,#&7\xC0\"+\x9A%.Z\"\"2Z3[+\x8A% &7\xC0,#&7\xC0\"+x%7S*# \" %+h% &7\xC0,#&7\xC0\"+V%.\\\"\"2\\3]+F% &7\xC0,#&7\xC0\"+4%72+*%4.6^.#*$ %$.# \"$-# \"$,# \"$+# \"$*# \"$)# \"$(# \"$'# \"$&# \"$%# \"$$# \"$## \"$\"# \"\"# \"9*\" 3P"),
          peg$decode("8!.`\"\"2`3a+t$ &7\x8B+&$,#&7\x8B\"\"\" \"*) \".M\"\"2M3N+O% &7-,#&7-\"+=%71*# \" %+-%72+#%'%%$%# \"$$# \"$## \"$\"# \"\"# \"9*\" 3_"),
          peg$decode("8! &7\xC0,#&7\xC0\"+\x85$.c\"\"2c3d*) \".e\"\"2e3f+i% &7\xC0,#&7\xC0\"+W% &7-,#&7-\"+E% &7\xC0,#&7\xC0\"+3%71+)%4&6g&\"\" %$&# \"$%# \"$$# \"$## \"$\"# \"\"# \"9*\" 3b"),
          peg$decode("8!.i\"\"2i3j*) \".k\"\"2k3l+\\$ &7\xC0,#&7\xC0\"+J%7.*# \"7/+:% &7\xC0,#&7\xC0\"+(%4$6m$!!%$$# \"$## \"$\"# \"\"# \"9*\" 3h"),
          peg$decode("8! &7\xC0,#&7\xC0\"+2$70+(%4\"6o\"! %$\"# \"\"# \"9*\" 3n"),
          peg$decode("8!.q\"\"2q3r*) \".s\"\"2s3t+D$ &7\xC0,#&7\xC0\"+2%70+(%4#6u#! %$## \"$\"# \"\"# \"9*\" 3p"),
          peg$decode("87\xA69*\" 3v"),
          peg$decode("8!.V\"\"2V3W*) \".X\"\"2X3Y*# \" %+V$ &7\xC0,#&7\xC0\"+D%7T+:% &7\xC0,#&7\xC0\"+(%4$6x$!!%$$# \"$## \"$\"# \"\"# \"9*\" 3w"),
          peg$decode("8!73*# \" %+Z$75*# \" %+J%77*# \" %+:%79*# \" %+*%4$6z$##! %$$# \"$## \"$\"# \"\"# \"9*\" 3y"),
          peg$decode("8!.|\"\"2|3}*) \".~\"\"2~3+\x81$ &7\xC0,#&7\xC0\"+o%.\x80\"\"2\x803\x81*) \".\x82\"\"2\x823\x83+S% &7\xC0,#&7\xC0\"+A% &74+&$,#&74\"\"\" \"+(%4%6\x84%! %$%# \"$$# \"$## \"$\"# \"\"# \"9*\" 3{"),
          peg$decode("8! &7\xC0,#&7\xC0\"+D$7\x99+:% &7\xC0,#&7\xC0\"+(%4#6\x86#!!%$## \"$\"# \"\"# \"*\u016B \"! &7\xC0,#&7\xC0\"+D$7e+:% &7\xC0,#&7\xC0\"+(%4#6\x87#!!%$## \"$\"# \"\"# \"*\u0131 \"! &7\xC0,#&7\xC0\"+\xE4$.E\"\"2E3F+\xD4% &7\xC0,#&7\xC0\"+\xC2%7\x8E+\xB8% &7\xC0,#&7\xC0\"+\xA6%!.G\"\"2G3H*) \".I\"\"2I3J+?$ &7\xC0,#&7\xC0\"+-%7\x8C+#%'#%$## \"$\"# \"\"# \"*# \" %+]% &7\xC0,#&7\xC0\"+K%.K\"\"2K3L+;% &7\xC0,#&7\xC0\"+)%4)6\x88)\"%#%$)# \"$(# \"$'# \"$&# \"$%# \"$$# \"$## \"$\"# \"\"# \"*W \"! &7\xC0,#&7\xC0\"+D$7\x8C+:% &7\xC0,#&7\xC0\"+(%4#6\x89#!!%$## \"$\"# \"\"# \"9*\" 3\x85"),
          peg$decode("8!.\x8B\"\"2\x8B3\x8C+<$ &76+&$,#&76\"\"\" \"+#%'\"%$\"# \"\"# \"9*\" 3\x8A"),
          peg$decode("87_9*\" 3\x8D"),
          peg$decode("8!.\x8F\"\"2\x8F3\x90*) \".\x91\"\"2\x913\x92+\x93$ &7\xC0,#&7\xC0\"+\x81%.\x80\"\"2\x803\x81*) \".\x82\"\"2\x823\x83+e% &7\xC0,#&7\xC0\"+S% &78+&$,#&78\"\"\" \"+:% &7\xC0,#&7\xC0\"+(%4&6\x93&!!%$&# \"$%# \"$$# \"$## \"$\"# \"\"# \"9*\" 3\x8E"),
          peg$decode("8!.\x95\"\"2\x953\x96*A \".\x97\"\"2\x973\x98*5 \".\x99\"\"2\x993\x9A*) \".\x9B\"\"2\x9B3\x9C+W$ &7\xC0,#&7\xC0\"+E%7\x98+;% &7\xC0,#&7\xC0\"+)%4$6\x9D$\"#!%$$# \"$## \"$\"# \"\"# \"*K \"!7_*# \"7\x8C+:$ &7\xC0,#&7\xC0\"+(%4\"6\x9E\"!!%$\"# \"\"# \"9*\" 3\x94"),
          peg$decode("8!!7:+3$7;*# \" %+#%'\"%$\"# \"\"# \"*> \"!7;+3$7:*# \" %+#%'\"%$\"# \"\"# \"+' 4!6\xA0!! %9*\" 3\x9F"),
          peg$decode("8!.\xA2\"\"2\xA23\xA3*) \".\xA4\"\"2\xA43\xA5+V$ &7\xC0,#&7\xC0\"+D%7\xB0+:% &7\xC0,#&7\xC0\"+(%4$6\xA6$!!%$$# \"$## \"$\"# \"\"# \"9*\" 3\xA1"),
          peg$decode("8!.\xA8\"\"2\xA83\xA9*) \".\xAA\"\"2\xAA3\xAB+V$ &7\xC0,#&7\xC0\"+D%7\xB0+:% &7\xC0,#&7\xC0\"+(%4$6\xAC$!!%$$# \"$## \"$\"# \"\"# \"9*\" 3\xA7"),
          peg$decode("8!.\xAE\"\"2\xAE3\xAF+\xE7$ &7\x8C,#&7\x8C\"+\xD5%.Z\"\"2Z3[+\xC5% &!.E\"\"2E3F+L$ &7=+&$,#&7=\"\"\" \"+3%.K\"\"2K3L+#%'#%$## \"$\"# \"\"# \"*# \"7\xBF,c&!.E\"\"2E3F+L$ &7=+&$,#&7=\"\"\" \"+3%.K\"\"2K3L+#%'#%$## \"$\"# \"\"# \"*# \"7\xBF\"+3%.\\\"\"2\\3]+#%'%%$%# \"$$# \"$## \"$\"# \"\"# \"*# \" %9*\" 3\xAD"),
          peg$decode("87\xA6*; \"7\x9F*5 \"7\xA0*/ \"7\xA4*) \".\xB1\"\"2\xB13\xB29*\" 3\xB0"),
          peg$decode("8!!.\xB4\"\"2\xB43\xB5*) \".\xB6\"\"2\xB63\xB7+-$7a+#%'\"%$\"# \"\"# \"*# \" %+' 4!6\xB8!! %9*\" 3\xB3"),
          peg$decode("87@9*\" 3\xB9"),
          peg$decode("8!7$+\x9B$ &7\xC0,#&7\xC0\"+\x89%7A+%! &7\xC0,#&7\xC0\"+U$.\xBB\"\"2\xBB3\xBC+E% &7\xC0,#&7\xC0\"+3%7@*# \" %+#%'$%$$# \"$## \"$\"# \"\"# \"*# \" %+*%4$6\xBD$##! %$$# \"$## \"$\"# \"\"# \"9*\" 3\xBA"),
          peg$decode("87B*G \"7C*A \"7D*; \"7E*5 \"7F*/ \"7G*) \"7H*# \"7I9*\" 3\xBE"),
          peg$decode("8!.\xC0\"\"2\xC03\xC1*) \".\xC2\"\"2\xC23\xC3+\xA0$ &7\xC0,#&7\xC0\"+\x8E%7\xA6+\x84% &7\xC0,#&7\xC0\"+r%!.\xC4\"\"2\xC43\xC5*) \".\xC6\"\"2\xC63\xC7+?$ &7\xC0,#&7\xC0\"+-%7M+#%'#%$## \"$\"# \"\"# \"*# \" %+)%4%6\xC8%\"\" %$%# \"$$# \"$## \"$\"# \"\"# \"9*\" 3\xBF"),
          peg$decode("8!.\xCA\"\"2\xCA3\xCB*) \".\xCC\"\"2\xCC3\xCD+x$ &7\xC0,#&7\xC0\"+f%.\xCE\"\"2\xCE3\xCF*) \".\xD0\"\"2\xD03\xD1*# \" %+D% &7\xC0,#&7\xC0\"+2%7N+(%4%6\xD2%! %$%# \"$$# \"$## \"$\"# \"\"# \"9*\" 3\xC9"),
          peg$decode("8!.\xD4\"\"2\xD43\xD5*) \".\xD6\"\"2\xD63\xD7+x$ &7\xC0,#&7\xC0\"+f%.\xCE\"\"2\xCE3\xCF*) \".\xD0\"\"2\xD03\xD1*# \" %+D% &7\xC0,#&7\xC0\"+2%7N+(%4%6\xD8%! %$%# \"$$# \"$## \"$\"# \"\"# \"9*\" 3\xD3"),
          peg$decode("8!.\xDA\"\"2\xDA3\xDB*) \".\xDC\"\"2\xDC3\xDD+x$ &7\xC0,#&7\xC0\"+f%.\xCE\"\"2\xCE3\xCF*) \".\xD0\"\"2\xD03\xD1*# \" %+D% &7\xC0,#&7\xC0\"+2%7M+(%4%6\xDE%! %$%# \"$$# \"$## \"$\"# \"\"# \"9*\" 3\xD9"),
          peg$decode("8!.\xE0\"\"2\xE03\xE1*) \".\xE2\"\"2\xE23\xE3+r$ &7\xC0,#&7\xC0\"+`%.\xE4\"\"2\xE43\xE5*) \".\xE6\"\"2\xE63\xE7+D% &7\xC0,#&7\xC0\"+2%7P+(%4%6\xE8%! %$%# \"$$# \"$## \"$\"# \"\"# \"9*\" 3\xDF"),
          peg$decode("8!.\xEA\"\"2\xEA3\xEB*) \".\xEC\"\"2\xEC3\xED+`$ &7\xC0,#&7\xC0\"+N%.\xE4\"\"2\xE43\xE5*) \".\xE6\"\"2\xE63\xE7+2%7P+(%4$6\xEE$! %$$# \"$## \"$\"# \"\"# \"9*\" 3\xE9"),
          peg$decode("8!.\xEA\"\"2\xEA3\xEB*) \".\xEC\"\"2\xEC3\xED+r$ &7\xC0,#&7\xC0\"+`%.V\"\"2V3W*) \".X\"\"2X3Y+D% &7\xC0,#&7\xC0\"+2%7T+(%4%6\xF0%! %$%# \"$$# \"$## \"$\"# \"\"# \"9*\" 3\xEF"),
          peg$decode("8!!.\xF2\"\"2\xF23\xF3*) \".\xF4\"\"2\xF43\xF5+?$ &7\xC0,#&7\xC0\"+-%7\xA6+#%'#%$## \"$\"# \"\"# \"*# \" %+\xFA$ &7\xC0,#&7\xC0\"+\xE8%!7J+E$ &7\xC0,#&7\xC0\"+3%7K*# \" %+#%'#%$## \"$\"# \"\"# \"*# \"7K+\xAB% &7\xC0,#&7\xC0\"+\x99% &7L,#&7L\"+\x87% &7\xC0,#&7\xC0\"+u%.V\"\"2V3W*) \".X\"\"2X3Y+Y% &7\xC0,#&7\xC0\"+G%7T+=% &7\xC0,#&7\xC0\"++%4*6\xF6*$)'%!%$*# \"$)# \"$(# \"$'# \"$&# \"$%# \"$$# \"$## \"$\"# \"\"# \"9*\" 3\xF1"),
          peg$decode("8!.\xEA\"\"2\xEA3\xEB*) \".\xEC\"\"2\xEC3\xED+2$7O+(%4\"6\xF8\"! %$\"# \"\"# \"9*\" 3\xF7"),
          peg$decode("8!.\xE0\"\"2\xE03\xE1*) \".\xE2\"\"2\xE23\xE3+2$7O+(%4\"6\xF8\"! %$\"# \"\"# \"9*\" 3\xF9"),
          peg$decode("8! &7\xC0,#&7\xC0\"+\x9F$.\xFB\"\"2\xFB3\xFC*) \".\xFD\"\"2\xFD3\xFE+\x83% &7\xC0,#&7\xC0\"+q%7\xA6*\\ \"!.q\"\"2q3r*) \".s\"\"2s3t+?$ &7\xC0,#&7\xC0\"+-%7\xA6+#%'#%$## \"$\"# \"\"# \"+(%4$6\xFF$! %$$# \"$## \"$\"# \"\"# \"9*\" 3\xFA"),
          peg$decode("8!.\u0101\"\"2\u01013\u0102*) \".\u0103\"\"2\u01033\u0104+D$ &7\xC0,#&7\xC0\"+2%7\xA6+(%4#6\u0105#! %$## \"$\"# \"\"# \"9*\" 3\u0100"),
          peg$decode("8!7M+' 4!6x!! %*\x86 \"!.\u0107\"\"2\u01073\u0108*) \".\u0109\"\"2\u01093\u010A+& 4!6\u010B! %*c \"!.q\"\"2q3r*) \".s\"\"2s3t+& 4!6\u010C! %*@ \"!.\u010D\"\"2\u010D3\u010E*) \".\u010F\"\"2\u010F3\u0110+& 4!6\u0111! %9*\" 3\u0106"),
          peg$decode("8! &7\xC0,#&7\xC0\"+\x88$.Z\"\"2Z3[+x% &7\xC0,#&7\xC0\"+f%7Q+\\% &7\xC0,#&7\xC0\"+J%.\\\"\"2\\3]+:% &7\xC0,#&7\xC0\"+(%4'6\u0113'!#%$'# \"$&# \"$%# \"$$# \"$## \"$\"# \"\"# \"9*\" 3\u0112"),
          peg$decode("8! &7\xC0,#&7\xC0\"+\x88$.Z\"\"2Z3[+x% &7\xC0,#&7\xC0\"+f%7Q+\\% &7\xC0,#&7\xC0\"+J%.\\\"\"2\\3]+:% &7\xC0,#&7\xC0\"+(%4'6\u0113'!#%$'# \"$&# \"$%# \"$$# \"$## \"$\"# \"\"# \"9*\" 3\u0114"),
          peg$decode("8!7S*# \" %+\x9D$ &!7R+I$.\u0116\"\"2\u01163\u0117*# \" %+3%7S*# \" %+#%'#%$## \"$\"# \"\"# \",T&!7R+I$.\u0116\"\"2\u01163\u0117*# \" %+3%7S*# \" %+#%'#%$## \"$\"# \"\"# \"\"+)%4\"6\u0118\"\"! %$\"# \"\"# \"9*\" 3\u0115"),
          peg$decode("8! &7\xC0,#&7\xC0\"+\xD9$.\u0101\"\"2\u01013\u0102*) \".\u0103\"\"2\u01033\u0104+\xBD% &7\xC0,#&7\xC0\"+\xAB%7\x8B+\xA1% &7\xC0,#&7\xC0\"+\x8F%.Z\"\"2Z3[+% &7\xC0,#&7\xC0\"+m%7S*# \" %+]% &7\xC0,#&7\xC0\"+K%.\\\"\"2\\3]+;% &7\xC0,#&7\xC0\"+)%4+6\u011A+\"'#%$+# \"$*# \"$)# \"$(# \"$'# \"$&# \"$%# \"$$# \"$## \"$\"# \"\"# \"9*\" 3\u0119"),
          peg$decode("8!7j+~$! &7\xC0,#&7\xC0\"+U$.\u0116\"\"2\u01163\u0117+E% &7\xC0,#&7\xC0\"+3%7S*# \" %+#%'$%$$# \"$## \"$\"# \"\"# \"*# \" %+)%4\"6\u011C\"\"! %$\"# \"\"# \"9*\" 3\u011B"),
          peg$decode("8!.Z\"\"2Z3[+f$ &7\xC0,#&7\xC0\"+T%7(+J% &7\xC0,#&7\xC0\"+8%.\\\"\"2\\3]+(%4%6\u011E%!\"%$%# \"$$# \"$## \"$\"# \"\"# \"*w \"!.Z\"\"2Z3[+f$ &7\xC0,#&7\xC0\"+T%7U+J% &7\xC0,#&7\xC0\"+8%.\\\"\"2\\3]+(%4%6\u011E%!\"%$%# \"$$# \"$## \"$\"# \"\"# \"9*\" 3\u011D"),
          peg$decode("8!7V*# \" %+\xF7$ &7\xC0,#&7\xC0\"+\xE5% &!7W+m$ &7\xC0,#&7\xC0\"+[%.\u0116\"\"2\u01163\u0117*# \" %+E% &7\xC0,#&7\xC0\"+3%7V*# \" %+#%'%%$%# \"$$# \"$## \"$\"# \"\"# \",x&!7W+m$ &7\xC0,#&7\xC0\"+[%.\u0116\"\"2\u01163\u0117*# \" %+E% &7\xC0,#&7\xC0\"+3%7V*# \" %+#%'%%$%# \"$$# \"$## \"$\"# \"\"# \"\"+)%4#6\u0120#\"\" %$## \"$\"# \"\"# \"9*\" 3\u011F"),
          peg$decode("8!7s+l$! &7\xC0,#&7\xC0\"+C$.\u0116\"\"2\u01163\u0117+3%7V*# \" %+#%'#%$## \"$\"# \"\"# \"*# \" %+)%4\"6\u0122\"\"! %$\"# \"\"# \"9*\" 3\u0121"),
          peg$decode("87\\*G \"7X*A \"7[*; \"7Y*5 \"7Z*/ \"7]*) \"7^*# \"7`9*\" 3\u0123"),
          peg$decode("8! &7\xC0,#&7\xC0\"+`$.\u0125\"\"2\u01253\u0126*) \".\u0127\"\"2\u01273\u0128+D% &7\xC0,#&7\xC0\"+2%7T+(%4$6\u0129$! %$$# \"$## \"$\"# \"\"# \"9*\" 3\u0124"),
          peg$decode("8! &7\xC0,#&7\xC0\"+}$.\u0101\"\"2\u01013\u0102*) \".\u0103\"\"2\u01033\u0104+a% &7\xC0,#&7\xC0\"+O%7\x8B+E% &7\xC0,#&7\xC0\"+3%7T+)%4&6\u012B&\"\" %$&# \"$%# \"$$# \"$## \"$\"# \"\"# \"9*\" 3\u012A"),
          peg$decode("8!.\u012D\"\"2\u012D3\u012E+=$7\x8B+3%7T+)%4#6\u012F#\"! %$## \"$\"# \"\"# \"9*\" 3\u012C"),
          peg$decode("8!.\u0131\"\"2\u01313\u0132*) \".\u0133\"\"2\u01333\u0134+D$ &7\xC0,#&7\xC0\"+2%7T+(%4#6\u0135#! %$## \"$\"# \"\"# \"9*\" 3\u0130"),
          peg$decode("8!7T+\xD1$ &! &7\xC0,#&7\xC0\"+[$.\u0137\"\"2\u01373\u0138*) \".\u0139\"\"2\u01393\u013A+?% &7\xC0,#&7\xC0\"+-%7T+#%'$%$$# \"$## \"$\"# \"\"# \",n&! &7\xC0,#&7\xC0\"+[$.\u0137\"\"2\u01373\u0138*) \".\u0139\"\"2\u01393\u013A+?% &7\xC0,#&7\xC0\"+-%7T+#%'$%$$# \"$## \"$\"# \"\"# \"\"+)%4\"6\u013B\"\"! %$\"# \"\"# \"9*\" 3\u0136"),
          peg$decode("8! &7\xC0,#&7\xC0\"+`$.\u013D\"\"2\u013D3\u013E*) \".\u013F\"\"2\u013F3\u0140+D% &7\xC0,#&7\xC0\"+2%7_+(%4$6\u0141$! %$$# \"$## \"$\"# \"\"# \"9*\" 3\u013C"),
          peg$decode("8! &7\xC0,#&7\xC0\"+\xEF$.\u0143\"\"2\u01433\u0144*) \".\u0145\"\"2\u01453\u0146+\xD3% &7\xC0,#&7\xC0\"+\xC1%.E\"\"2E3F+\xB1% &7\xC0,#&7\xC0\"+\x9F%7\x8E+\x95% &7\xC0,#&7\xC0\"+\x83%.I\"\"2I3J*) \".G\"\"2G3H+g% &7\xC0,#&7\xC0\"+U%7\x8C+K% &7\xC0,#&7\xC0\"+9%.K\"\"2K3L+)%4,6\u0147,\"&\"%$,# \"$+# \"$*# \"$)# \"$(# \"$'# \"$&# \"$%# \"$$# \"$## \"$\"# \"\"# \"9*\" 3\u0142"),
          peg$decode("87\x98*) \"7\x99*# \"7e9*\" 3\u0148"),
          peg$decode("8! &7\xC0,#&7\xC0\"+`$.\xB4\"\"2\xB43\xB5*) \".\xB6\"\"2\xB63\xB7+D% &7\xC0,#&7\xC0\"+2%7a+(%4$6\u014A$! %$$# \"$## \"$\"# \"\"# \"9*\" 3\u0149"),
          peg$decode("87b*# \"7c9*\" 3\u014B"),
          peg$decode("8! &7\xC0,#&7\xC0\"+\x89$7\x8C+% &7\xC0,#&7\xC0\"+m%.Z\"\"2Z3[+]% &7\xC0,#&7\xC0\"+K% &7d,#&7d\"+9%.\\\"\"2\\3]+)%4'6\u014D'\"%!%$'# \"$&# \"$%# \"$$# \"$## \"$\"# \"\"# \"9*\" 3\u014C"),
          peg$decode("8! &7\xC0,#&7\xC0\"+\u01FA$7\xBF*z \"!.E\"\"2E3F+i$ &7\xC0,#&7\xC0\"+W% &7\x8C,#&7\x8C\"+E% &7\xC0,#&7\xC0\"+3%.K\"\"2K3L+#%'%%$%# \"$$# \"$## \"$\"# \"\"# \"+\u0193% &7\xC0,#&7\xC0\"+\u0181%.Z\"\"2Z3[+\u0171% &7\xC0,#&7\xC0\"+\u015F% &! &7\xC0,#&7\xC0\"+\x8B$.E\"\"2E3F+{% &7\xC0,#&7\xC0\"+i% &7d,#&7d\"+W% &7\xC0,#&7\xC0\"+E%.K\"\"2K3L+5% &7\xC0,#&7\xC0\"+#%''%$'# \"$&# \"$%# \"$$# \"$## \"$\"# \"\"# \"*# \"7\xBF,\xA4&! &7\xC0,#&7\xC0\"+\x8B$.E\"\"2E3F+{% &7\xC0,#&7\xC0\"+i% &7d,#&7d\"+W% &7\xC0,#&7\xC0\"+E%.K\"\"2K3L+5% &7\xC0,#&7\xC0\"+#%''%$'# \"$&# \"$%# \"$$# \"$## \"$\"# \"\"# \"*# \"7\xBF\"+K% &7\xC0,#&7\xC0\"+9%.\\\"\"2\\3]+)%4(6\u014F(\"&\"%$(# \"$'# \"$&# \"$%# \"$$# \"$## \"$\"# \"\"# \"9*\" 3\u014E"),
          peg$decode("8! &7\xC0,#&7\xC0\"+b$7\xA9*; \"7\x9F*5 \"7\xA0*/ \"7\xA4*) \".\xB1\"\"2\xB13\xB2+:% &7\xC0,#&7\xC0\"+(%4#6\x89#!!%$## \"$\"# \"\"# \"9*\" 3\u0150"),
          peg$decode("8!7\xA6+3$7f+)%4\"6\u0152\"\"! %$\"# \"\"# \"9*\" 3\u0151"),
          peg$decode("8!7\xBF+& 4!6\u0154! %*\xBF \"!.E\"\"2E3F+\xAE$.=\"\"2=3>*) \".?\"\"2?3@*# \" %+\x8C%7\x8E+\x82% &!.\u0155\"\"2\u01553\u0156+-$7\x8E+#%'\"%$\"# \"\"# \",>&!.\u0155\"\"2\u01553\u0156+-$7\x8E+#%'\"%$\"# \"\"# \"\"+:%.K\"\"2K3L+*%4%6\u0157%##\"!%$%# \"$$# \"$## \"$\"# \"\"# \"9*\" 3\u0153"),
          peg$decode("8!7\xBF+& 4!6\u0154! %*\xAE \"!.E\"\"2E3F+\x9D$7\xA6*# \"7\x8E+\x8D% &!.\u0155\"\"2\u01553\u0156+3$7\xA6*# \"7\x8E+#%'\"%$\"# \"\"# \",D&!.\u0155\"\"2\u01553\u0156+3$7\xA6*# \"7\x8E+#%'\"%$\"# \"\"# \"\"+9%.K\"\"2K3L+)%4$6\u0159$\"\"!%$$# \"$## \"$\"# \"\"# \"9*\" 3\u0158"),
          peg$decode("8!.Z\"\"2Z3[+l$ &7\xC0,#&7\xC0\"+Z%7i*# \" %+J% &7\xC0,#&7\xC0\"+8%.\\\"\"2\\3]+(%4%6\u015B%!\"%$%# \"$$# \"$## \"$\"# \"\"# \"9*\" 3\u015A"),
          peg$decode("8!7j+~$! &7\xC0,#&7\xC0\"+U$.\u0116\"\"2\u01163\u0117+E% &7\xC0,#&7\xC0\"+3%7i*# \" %+#%'$%$$# \"$## \"$\"# \"\"# \"*# \" %+)%4\"6\u015D\"\"! %$\"# \"\"# \"9*\" 3\u015C"),
          peg$decode("8! &7\xC0,#&7\xC0\"+O$7\x8A+E% &7\xC0,#&7\xC0\"+3%7l+)%4$6\u015F$\"\" %$$# \"$## \"$\"# \"\"# \"*b \"! &7\xC0,#&7\xC0\"+O$7\x83+E% &7\xC0,#&7\xC0\"+3%7m+)%4$6\u0160$\"\" %$$# \"$## \"$\"# \"\"# \"9*\" 3\u015E"),
          peg$decode("8!7v*# \"7w+\u013C$ &7\xC0,#&7\xC0\"+\u012A%7n+\u0120% &! &7\xC0,#&7\xC0\"+\x82$.\xBB\"\"2\xBB3\xBC+r% &7\xC0,#&7\xC0\"+`%!7v*# \"7w+?$ &7\xC0,#&7\xC0\"+-%7o+#%'#%$## \"$\"# \"\"# \"*# \" %+#%'$%$$# \"$## \"$\"# \"\"# \",\x95&! &7\xC0,#&7\xC0\"+\x82$.\xBB\"\"2\xBB3\xBC+r% &7\xC0,#&7\xC0\"+`%!7v*# \"7w+?$ &7\xC0,#&7\xC0\"+-%7o+#%'#%$## \"$\"# \"\"# \"*# \" %+#%'$%$$# \"$## \"$\"# \"\"# \"\"+*%4$6\u0162$##! %$$# \"$## \"$\"# \"\"# \"9*\" 3\u0161"),
          peg$decode("8!7r+\u0130$ &7\xC0,#&7\xC0\"+\u011E%7o+\u0114% &! &7\xC0,#&7\xC0\"+|$.\xBB\"\"2\xBB3\xBC+l% &7\xC0,#&7\xC0\"+Z%!7r+?$ &7\xC0,#&7\xC0\"+-%7o+#%'#%$## \"$\"# \"\"# \"*# \" %+#%'$%$$# \"$## \"$\"# \"\"# \",\x8F&! &7\xC0,#&7\xC0\"+|$.\xBB\"\"2\xBB3\xBC+l% &7\xC0,#&7\xC0\"+Z%!7r+?$ &7\xC0,#&7\xC0\"+-%7o+#%'#%$## \"$\"# \"\"# \"*# \" %+#%'$%$$# \"$## \"$\"# \"\"# \"\"+*%4$6\u0164$##! %$$# \"$## \"$\"# \"\"# \"9*\" 3\u0163"),
          peg$decode("87l*# \" %9*\" 3\u0165"),
          peg$decode("8!7p+\xA7$ &7\xC0,#&7\xC0\"+\x95% &!.\u0155\"\"2\u01553\u0156+?$ &7\xC0,#&7\xC0\"+-%7p+#%'#%$## \"$\"# \"\"# \",P&!.\u0155\"\"2\u01553\u0156+?$ &7\xC0,#&7\xC0\"+-%7p+#%'#%$## \"$\"# \"\"# \"\"+)%4#6\u0167#\"\" %$## \"$\"# \"\"# \"9*\" 3\u0166"),
          peg$decode("8!7q+\xA7$ &7\xC0,#&7\xC0\"+\x95% &!.\u0155\"\"2\u01553\u0156+?$ &7\xC0,#&7\xC0\"+-%7q+#%'#%$## \"$\"# \"\"# \",P&!.\u0155\"\"2\u01553\u0156+?$ &7\xC0,#&7\xC0\"+-%7q+#%'#%$## \"$\"# \"\"# \"\"+)%4#6\u0169#\"\" %$## \"$\"# \"\"# \"9*\" 3\u0168"),
          peg$decode("87\x889*\" 3\u016A"),
          peg$decode("87\x899*\" 3\u016B"),
          peg$decode("87\x8B*4 \"!.\u016D\"\"2\u016D3\u016E+& 4!6\u016F! %9*\" 3\u016C"),
          peg$decode("8! &7\xC0,#&7\xC0\"+O$7\x8A+E% &7\xC0,#&7\xC0\"+3%7t+)%4$6\u0171$\"\" %$$# \"$## \"$\"# \"\"# \"*b \"! &7\xC0,#&7\xC0\"+O$7\x82+E% &7\xC0,#&7\xC0\"+3%7u+)%4$6\u0172$\"\" %$$# \"$## \"$\"# \"\"# \"9*\" 3\u0170"),
          peg$decode("8!7v*# \"7w+\u0118$ &7\xC0,#&7\xC0\"+\u0106%7n+\xFC% &! &7\xC0,#&7\xC0\"+p$.\xBB\"\"2\xBB3\xBC+`% &7\xC0,#&7\xC0\"+N%!7v*# \"7w+-$7o+#%'\"%$\"# \"\"# \"*# \" %+#%'$%$$# \"$## \"$\"# \"\"# \",\x83&! &7\xC0,#&7\xC0\"+p$.\xBB\"\"2\xBB3\xBC+`% &7\xC0,#&7\xC0\"+N%!7v*# \"7w+-$7o+#%'\"%$\"# \"\"# \"*# \" %+#%'$%$$# \"$## \"$\"# \"\"# \"\"+*%4$6\u0174$##! %$$# \"$## \"$\"# \"\"# \"9*\" 3\u0173"),
          peg$decode("87k*# \" %9*\" 3\u0175"),
          peg$decode("8!7x+' 4!6\u0177!! %9*\" 3\u0176"),
          peg$decode("87\x8C9*\" 3\u0178"),
          peg$decode("87y9*\" 3\u0179"),
          peg$decode("8!7z+q$ &!.\u017B\"\"2\u017B3\u017C+-$7z+#%'\"%$\"# \"\"# \",>&!.\u017B\"\"2\u017B3\u017C+-$7z+#%'\"%$\"# \"\"# \"\"+)%4\"6\u017D\"\"! %$\"# \"\"# \"9*\" 3\u017A"),
          peg$decode("8!7|+q$ &!.\u017F\"\"2\u017F3\u0180+-$7|+#%'\"%$\"# \"\"# \",>&!.\u017F\"\"2\u017F3\u0180+-$7|+#%'\"%$\"# \"\"# \"\"+)%4\"6\u0181\"\"! %$\"# \"\"# \"9*\" 3\u017E"),
          peg$decode("8!7~+9$7}*# \" %+)%4\"6\u0183\"\"! %$\"# \"\"# \"9*\" 3\u0182"),
          peg$decode("87{*C \"!.\u0185\"\"2\u01853\u0186+2$7{+(%4\"6\u0187\"! %$\"# \"\"# \"9*\" 3\u0184"),
          peg$decode("8.M\"\"2M3N*\xEA \".\u0189\"\"2\u01893\u018A*\xDE \".\u018B\"\"2\u018B3\u018C*\xD2 \"!.Z\"\"2Z3[+\xC1$!7\x81+{$!.\u0155\"\"2\u01553\u0156+T$.\\\"\"2\\3]*> \"!7\x81+3$.\\\"\"2\\3]+#%'\"%$\"# \"\"# \"+#%'\"%$\"# \"\"# \"*) \".\\\"\"2\\3]+#%'\"%$\"# \"\"# \"*N \"!.\u0155\"\"2\u01553\u0156+=$7\x81+3%.\\\"\"2\\3]+#%'#%$## \"$\"# \"\"# \"+#%'\"%$\"# \"\"# \"9*\" 3\u0188"),
          peg$decode("87\xA6*\x8B \"!.\u016D\"\"2\u016D3\u016E+& 4!6\u016F! %*t \"!.\u018E\"\"2\u018E3\u018F+-$7+#%'\"%$\"# \"\"# \"*S \"!.E\"\"2E3F+B$7x+8%.K\"\"2K3L+(%4#6\u011E#!!%$## \"$\"# \"\"# \"9*\" 3\u018D"),
          peg$decode("7\x80*\xA7 \"!.E\"\"2E3F+\x96$!7\x80+k$ &!.\u017B\"\"2\u017B3\u017C+-$7\x80+#%'\"%$\"# \"\"# \",>&!.\u017B\"\"2\u017B3\u017C+-$7\x80+#%'\"%$\"# \"\"# \"\"+#%'\"%$\"# \"\"# \"*# \" %+3%.K\"\"2K3L+#%'#%$## \"$\"# \"\"# \""),
          peg$decode("87\xA6*V \".\u016D\"\"2\u016D3\u016E*J \"!.\u0185\"\"2\u01853\u0186+9$7\xA6*) \".\u016D\"\"2\u016D3\u016E+#%'\"%$\"# \"\"# \"9*\" 3\u0190"),
          peg$decode("87\xB09*\" 3\u0191"),
          peg$decode("8!7\x86+' 4!6\u0193!! %*# \"7\x849*\" 3\u0192"),
          peg$decode("8!7\x87+' 4!6\u0195!! %*# \"7\x859*\" 3\u0194"),
          peg$decode("8! &7\xC0,#&7\xC0\"+v$.\u0197\"\"2\u01973\u0198+f% &7\xC0,#&7\xC0\"+T%7t+J%.\u0199\"\"2\u01993\u019A+:% &7\xC0,#&7\xC0\"+(%4&6\u019B&!\"%$&# \"$%# \"$$# \"$## \"$\"# \"\"# \"9*\" 3\u0196"),
          peg$decode("8! &7\xC0,#&7\xC0\"+\x88$.\u0197\"\"2\u01973\u0198+x% &7\xC0,#&7\xC0\"+f%7l+\\% &7\xC0,#&7\xC0\"+J%.\u0199\"\"2\u01993\u019A+:% &7\xC0,#&7\xC0\"+(%4'6\u019D'!#%$'# \"$&# \"$%# \"$$# \"$## \"$\"# \"\"# \"9*\" 3\u019C"),
          peg$decode("8! &7\xC0,#&7\xC0\"+\x97$.E\"\"2E3F+\x87% &7\xC0,#&7\xC0\"+u% &7\x88+&$,#&7\x88\"\"\" \"+\\% &7\xC0,#&7\xC0\"+J%.K\"\"2K3L+:% &7\xC0,#&7\xC0\"+(%4'6\u019F'!#%$'# \"$&# \"$%# \"$$# \"$## \"$\"# \"\"# \"9*\" 3\u019E"),
          peg$decode("8! &7\xC0,#&7\xC0\"+\x97$.E\"\"2E3F+\x87% &7\xC0,#&7\xC0\"+u% &7\x89+&$,#&7\x89\"\"\" \"+\\% &7\xC0,#&7\xC0\"+J%.K\"\"2K3L+:% &7\xC0,#&7\xC0\"+(%4'6\u019F'!#%$'# \"$&# \"$%# \"$$# \"$## \"$\"# \"\"# \"9*\" 3\u01A0"),
          peg$decode("8!! &7\xC0,#&7\xC0\"+?$7\x8A+5% &7\xC0,#&7\xC0\"+#%'#%$## \"$\"# \"\"# \"*R \"! &7\xC0,#&7\xC0\"+?$7\x82+5% &7\xC0,#&7\xC0\"+#%'#%$## \"$\"# \"\"# \"+' 4!6\u01A2!! %9*\" 3\u01A1"),
          peg$decode("8!! &7\xC0,#&7\xC0\"+?$7\x8A+5% &7\xC0,#&7\xC0\"+#%'#%$## \"$\"# \"\"# \"*R \"! &7\xC0,#&7\xC0\"+?$7\x83+5% &7\xC0,#&7\xC0\"+#%'#%$## \"$\"# \"\"# \"+' 4!6\u01A2!! %9*\" 3\u01A3"),
          peg$decode("87\x8C*# \"7\x8D9*\" 3\u01A4"),
          peg$decode("87\x8C*# \"7\xA69*\" 3\u01A5"),
          peg$decode("8! &7\xC0,#&7\xC0\"+J$7\xAD*# \"7\xAE+:% &7\xC0,#&7\xC0\"+(%4#6\u01A7#!!%$## \"$\"# \"\"# \"9*\" 3\u01A6"),
          peg$decode("87\xA6*; \"7\x9F*5 \"7\xA0*/ \"7\xA4*) \"7\xA8*# \"7\xBF9*\" 3\u01A8"),
          peg$decode("87\x8F9*\" 3\u01A9"),
          peg$decode("8!7\x90+\xB9$ &! &7\xC0,#&7\xC0\"+O$.\u01AB\"\"2\u01AB3\u01AC+?% &7\xC0,#&7\xC0\"+-%7\x90+#%'$%$$# \"$## \"$\"# \"\"# \",b&! &7\xC0,#&7\xC0\"+O$.\u01AB\"\"2\u01AB3\u01AC+?% &7\xC0,#&7\xC0\"+-%7\x90+#%'$%$$# \"$## \"$\"# \"\"# \"\"+)%4\"6\u01AD\"\"! %$\"# \"\"# \"9*\" 3\u01AA"),
          peg$decode("8!7\x91+\xB9$ &! &7\xC0,#&7\xC0\"+O$.\u01AF\"\"2\u01AF3\u01B0+?% &7\xC0,#&7\xC0\"+-%7\x91+#%'$%$$# \"$## \"$\"# \"\"# \",b&! &7\xC0,#&7\xC0\"+O$.\u01AF\"\"2\u01AF3\u01B0+?% &7\xC0,#&7\xC0\"+-%7\x91+#%'$%$$# \"$## \"$\"# \"\"# \"\"+)%4\"6\u01B1\"\"! %$\"# \"\"# \"9*\" 3\u01AE"),
          peg$decode("87\x929*\" 3\u01B2"),
          peg$decode("8!7\x93+\u05EB$ &! &7\xC0,#&7\xC0\"+O$.\u01B4\"\"2\u01B43\u01B5+?% &7\xC0,#&7\xC0\"+-%7\x93+#%'$%$$# \"$## \"$\"# \"\"# \"*\u02B6 \"! &7\xC0,#&7\xC0\"+O$.\u01B6\"\"2\u01B63\u01B7+?% &7\xC0,#&7\xC0\"+-%7\x93+#%'$%$$# \"$## \"$\"# \"\"# \"*\u0271 \"! &7\xC0,#&7\xC0\"+O$.\u01B8\"\"2\u01B83\u01B9+?% &7\xC0,#&7\xC0\"+-%7\x93+#%'$%$$# \"$## \"$\"# \"\"# \"*\u022C \"! &7\xC0,#&7\xC0\"+O$.\u01BA\"\"2\u01BA3\u01BB+?% &7\xC0,#&7\xC0\"+-%7\x93+#%'$%$$# \"$## \"$\"# \"\"# \"*\u01E7 \"! &7\xC0,#&7\xC0\"+O$.\u01BC\"\"2\u01BC3\u01BD+?% &7\xC0,#&7\xC0\"+-%7\x93+#%'$%$$# \"$## \"$\"# \"\"# \"*\u01A2 \"! &7\xC0,#&7\xC0\"+O$.\u01BE\"\"2\u01BE3\u01BF+?% &7\xC0,#&7\xC0\"+-%7\x93+#%'$%$$# \"$## \"$\"# \"\"# \"*\u015D \"! &7\xC0,#&7\xC0\"+w$.\u01C0\"\"2\u01C03\u01C1*) \".\u01C2\"\"2\u01C23\u01C3+[%.\u01C4\"\"2\u01C43\u01C5*) \".\u01C6\"\"2\u01C63\u01C7+?% &7\xC0,#&7\xC0\"+-%7g+#%'%%$%# \"$$# \"$## \"$\"# \"\"# \"*\xF0 \"! &7\xC0,#&7\xC0\"+\xDD$.\u01C4\"\"2\u01C43\u01C5*) \".\u01C6\"\"2\u01C63\u01C7+\xC1%.\u01C8\"\"2\u01C83\u01C9*) \".\u01CA\"\"2\u01CA3\u01CB+\xA5%.\u01CC\"\"2\u01CC3\u01CD*) \".\u01CE\"\"2\u01CE3\u01CF+\x89% &7\xC0,#&7\xC0\"+w%.\u01C0\"\"2\u01C03\u01C1*) \".\u01C2\"\"2\u01C23\u01C3+[%.\u01C4\"\"2\u01C43\u01C5*) \".\u01C6\"\"2\u01C63\u01C7+?% &7\xC0,#&7\xC0\"+-%7g+#%')%$)# \"$(# \"$'# \"$&# \"$%# \"$$# \"$## \"$\"# \"\"# \",\u02FB&! &7\xC0,#&7\xC0\"+O$.\u01B4\"\"2\u01B43\u01B5+?% &7\xC0,#&7\xC0\"+-%7\x93+#%'$%$$# \"$## \"$\"# \"\"# \"*\u02B6 \"! &7\xC0,#&7\xC0\"+O$.\u01B6\"\"2\u01B63\u01B7+?% &7\xC0,#&7\xC0\"+-%7\x93+#%'$%$$# \"$## \"$\"# \"\"# \"*\u0271 \"! &7\xC0,#&7\xC0\"+O$.\u01B8\"\"2\u01B83\u01B9+?% &7\xC0,#&7\xC0\"+-%7\x93+#%'$%$$# \"$## \"$\"# \"\"# \"*\u022C \"! &7\xC0,#&7\xC0\"+O$.\u01BA\"\"2\u01BA3\u01BB+?% &7\xC0,#&7\xC0\"+-%7\x93+#%'$%$$# \"$## \"$\"# \"\"# \"*\u01E7 \"! &7\xC0,#&7\xC0\"+O$.\u01BC\"\"2\u01BC3\u01BD+?% &7\xC0,#&7\xC0\"+-%7\x93+#%'$%$$# \"$## \"$\"# \"\"# \"*\u01A2 \"! &7\xC0,#&7\xC0\"+O$.\u01BE\"\"2\u01BE3\u01BF+?% &7\xC0,#&7\xC0\"+-%7\x93+#%'$%$$# \"$## \"$\"# \"\"# \"*\u015D \"! &7\xC0,#&7\xC0\"+w$.\u01C0\"\"2\u01C03\u01C1*) \".\u01C2\"\"2\u01C23\u01C3+[%.\u01C4\"\"2\u01C43\u01C5*) \".\u01C6\"\"2\u01C63\u01C7+?% &7\xC0,#&7\xC0\"+-%7g+#%'%%$%# \"$$# \"$## \"$\"# \"\"# \"*\xF0 \"! &7\xC0,#&7\xC0\"+\xDD$.\u01C4\"\"2\u01C43\u01C5*) \".\u01C6\"\"2\u01C63\u01C7+\xC1%.\u01C8\"\"2\u01C83\u01C9*) \".\u01CA\"\"2\u01CA3\u01CB+\xA5%.\u01CC\"\"2\u01CC3\u01CD*) \".\u01CE\"\"2\u01CE3\u01CF+\x89% &7\xC0,#&7\xC0\"+w%.\u01C0\"\"2\u01C03\u01C1*) \".\u01C2\"\"2\u01C23\u01C3+[%.\u01C4\"\"2\u01C43\u01C5*) \".\u01C6\"\"2\u01C63\u01C7+?% &7\xC0,#&7\xC0\"+-%7g+#%')%$)# \"$(# \"$'# \"$&# \"$%# \"$$# \"$## \"$\"# \"\"# \"\"+)%4\"6\u01D0\"\"! %$\"# \"\"# \"9*\" 3\u01B3"),
          peg$decode("87\x949*\" 3\u01D1"),
          peg$decode("8!7\x95+\u0299$ &! &7\xC0,#&7\xC0\"+O$.\u018B\"\"2\u018B3\u018C+?% &7\xC0,#&7\xC0\"+-%7\x95+#%'$%$$# \"$## \"$\"# \"\"# \"*\u010D \"! &7\xC0,#&7\xC0\"+O$.\u01D3\"\"2\u01D33\u01D4+?% &7\xC0,#&7\xC0\"+-%7\x95+#%'$%$$# \"$## \"$\"# \"\"# \"*\xC8 \"!7\xA3*# \"7\xA3+\xB7$! &7\xC0,#&7\xC0\"+O$.M\"\"2M3N+?% &7\xC0,#&7\xC0\"+-%7\x96+#%'$%$$# \"$## \"$\"# \"\"# \"*b \"! &7\xC0,#&7\xC0\"+O$.\u017F\"\"2\u017F3\u0180+?% &7\xC0,#&7\xC0\"+-%7\x96+#%'$%$$# \"$## \"$\"# \"\"# \"*# \" %+#%'\"%$\"# \"\"# \",\u0152&! &7\xC0,#&7\xC0\"+O$.\u018B\"\"2\u018B3\u018C+?% &7\xC0,#&7\xC0\"+-%7\x95+#%'$%$$# \"$## \"$\"# \"\"# \"*\u010D \"! &7\xC0,#&7\xC0\"+O$.\u01D3\"\"2\u01D33\u01D4+?% &7\xC0,#&7\xC0\"+-%7\x95+#%'$%$$# \"$## \"$\"# \"\"# \"*\xC8 \"!7\xA3*# \"7\xA3+\xB7$! &7\xC0,#&7\xC0\"+O$.M\"\"2M3N+?% &7\xC0,#&7\xC0\"+-%7\x96+#%'$%$$# \"$## \"$\"# \"\"# \"*b \"! &7\xC0,#&7\xC0\"+O$.\u017F\"\"2\u017F3\u0180+?% &7\xC0,#&7\xC0\"+-%7\x96+#%'$%$$# \"$## \"$\"# \"\"# \"*# \" %+#%'\"%$\"# \"\"# \"\"+)%4\"6\u01D5\"\"! %$\"# \"\"# \"9*\" 3\u01D2"),
          peg$decode("8!7\x96+\u0143$ &! &7\xC0,#&7\xC0\"+O$.M\"\"2M3N+?% &7\xC0,#&7\xC0\"+-%7\x96+#%'$%$$# \"$## \"$\"# \"\"# \"*b \"! &7\xC0,#&7\xC0\"+O$.\u017F\"\"2\u017F3\u0180+?% &7\xC0,#&7\xC0\"+-%7\x96+#%'$%$$# \"$## \"$\"# \"\"# \",\xA7&! &7\xC0,#&7\xC0\"+O$.M\"\"2M3N+?% &7\xC0,#&7\xC0\"+-%7\x96+#%'$%$$# \"$## \"$\"# \"\"# \"*b \"! &7\xC0,#&7\xC0\"+O$.\u017F\"\"2\u017F3\u0180+?% &7\xC0,#&7\xC0\"+-%7\x96+#%'$%$$# \"$## \"$\"# \"\"# \"\"+)%4\"6\u01D7\"\"! %$\"# \"\"# \"9*\" 3\u01D6"),
          peg$decode("8!.\u018E\"\"2\u018E3\u018F+D$ &7\xC0,#&7\xC0\"+2%7\x97+(%4#6\u01D9#! %$## \"$\"# \"\"# \"*\x93 \"!.\u018B\"\"2\u018B3\u018C+D$ &7\xC0,#&7\xC0\"+2%7\x97+(%4#6\u01DA#! %$## \"$\"# \"\"# \"*[ \"!.\u01D3\"\"2\u01D33\u01D4+D$ &7\xC0,#&7\xC0\"+2%7\x97+(%4#6\u01DB#! %$## \"$\"# \"\"# \"*# \"7\x979*\" 3\u01D8"),
          peg$decode("87\x98*w \"7\x99*q \"7\x9E*k \"!7\x9F+' 4!6\u01DD!! %*Y \"!7\xA0+' 4!6\u01DE!! %*G \"!7\xA4+' 4!6\u01DF!! %*5 \"7\x9D*/ \"!7\x8C+' 4!6\u01E0!! %9*\" 3\u01DC"),
          peg$decode("8!.E\"\"2E3F+f$ &7\xC0,#&7\xC0\"+T%7\x8E+J% &7\xC0,#&7\xC0\"+8%.K\"\"2K3L+(%4%6\u01E2%!\"%$%# \"$$# \"$## \"$\"# \"\"# \"9*\" 3\u01E1"),
          peg$decode("8!.\u01E4\"\"2\u01E43\u01E5*) \".\u01E6\"\"2\u01E63\u01E7+\x88$ &7\xC0,#&7\xC0\"+v%.E\"\"2E3F+f% &7\xC0,#&7\xC0\"+T%7\x8E+J% &7\xC0,#&7\xC0\"+8%.K\"\"2K3L+(%4'6\u01E8'!\"%$'# \"$&# \"$%# \"$$# \"$## \"$\"# \"\"# \"*\u0913 \"!.\u01E9\"\"2\u01E93\u01EA*) \".\u01EB\"\"2\u01EB3\u01EC+\x88$ &7\xC0,#&7\xC0\"+v%.E\"\"2E3F+f% &7\xC0,#&7\xC0\"+T%7\x8E+J% &7\xC0,#&7\xC0\"+8%.K\"\"2K3L+(%4'6\u01ED'!\"%$'# \"$&# \"$%# \"$$# \"$## \"$\"# \"\"# \"*\u088B \"!.\u01EE\"\"2\u01EE3\u01EF*) \".\u01F0\"\"2\u01F03\u01F1+\xC7$ &7\xC0,#&7\xC0\"+\xB5%.E\"\"2E3F+\xA5% &7\xC0,#&7\xC0\"+\x93%7\x8E+\x89% &7\xC0,#&7\xC0\"+w%.\u0155\"\"2\u01553\u0156+g% &7\xC0,#&7\xC0\"+U%7\x8E+K% &7\xC0,#&7\xC0\"+9%.K\"\"2K3L+)%4+6\u01F2+\"&\"%$+# \"$*# \"$)# \"$(# \"$'# \"$&# \"$%# \"$$# \"$## \"$\"# \"\"# \"*\u07C4 \"!.\u01F3\"\"2\u01F33\u01F4*) \".\u01F5\"\"2\u01F53\u01F6+\x88$ &7\xC0,#&7\xC0\"+v%.E\"\"2E3F+f% &7\xC0,#&7\xC0\"+T%7\x8E+J% &7\xC0,#&7\xC0\"+8%.K\"\"2K3L+(%4'6\u01F7'!\"%$'# \"$&# \"$%# \"$$# \"$## \"$\"# \"\"# \"*\u073C \"!.\u01F8\"\"2\u01F83\u01F9*) \".\u01FA\"\"2\u01FA3\u01FB+\x88$ &7\xC0,#&7\xC0\"+v%.E\"\"2E3F+f% &7\xC0,#&7\xC0\"+T%7\x8C+J% &7\xC0,#&7\xC0\"+8%.K\"\"2K3L+(%4'6\u01FC'!\"%$'# \"$&# \"$%# \"$$# \"$## \"$\"# \"\"# \"*\u06B4 \"!.\u01FD\"\"2\u01FD3\u01FE*) \".\u01FF\"\"2\u01FF3\u0200+\x88$ &7\xC0,#&7\xC0\"+v%.E\"\"2E3F+f% &7\xC0,#&7\xC0\"+T%7\x8E+J% &7\xC0,#&7\xC0\"+8%.K\"\"2K3L+(%4'6\u0201'!\"%$'# \"$&# \"$%# \"$$# \"$## \"$\"# \"\"# \"*\u062C \"!.\u0202\"\"2\u02023\u0203*) \".\u0204\"\"2\u02043\u0205+\x88$ &7\xC0,#&7\xC0\"+v%.E\"\"2E3F+f% &7\xC0,#&7\xC0\"+T%7\x8E+J% &7\xC0,#&7\xC0\"+8%.K\"\"2K3L+(%4'6\u0206'!\"%$'# \"$&# \"$%# \"$$# \"$## \"$\"# \"\"# \"*\u05A4 \"!.\u0207\"\"2\u02073\u0208*) \".\u0209\"\"2\u02093\u020A+\x99$ &7\xC0,#&7\xC0\"+\x87%!.E\"\"2E3F+a$ &7\xC0,#&7\xC0\"+O%7\x8E+E% &7\xC0,#&7\xC0\"+3%.K\"\"2K3L+#%'%%$%# \"$$# \"$## \"$\"# \"\"# \"*# \"7\xBF+(%4#6\u020B#! %$## \"$\"# \"\"# \"*\u050B \"!.\u020C\"\"2\u020C3\u020D*) \".\u020E\"\"2\u020E3\u020F+D$ &7\xC0,#&7\xC0\"+2%7g+(%4#6\u0210#! %$## \"$\"# \"\"# \"*\u04C7 \"!.\u0211\"\"2\u02113\u0212*) \".\u0213\"\"2\u02133\u0214+\u0106$ &7\xC0,#&7\xC0\"+\xF4%.E\"\"2E3F+\xE4% &7\xC0,#&7\xC0\"+\xD2%7\x8E+\xC8% &7\xC0,#&7\xC0\"+\xB6%.\u0155\"\"2\u01553\u0156+\xA6% &7\xC0,#&7\xC0\"+\x94%7\x8E+\x8A% &7\xC0,#&7\xC0\"+x%.\u0155\"\"2\u01553\u0156+h% &7\xC0,#&7\xC0\"+V%7\x8E+L% &7\xC0,#&7\xC0\"+:%.K\"\"2K3L+*%4/6\u0215/#*&\"%$/# \"$.# \"$-# \"$,# \"$+# \"$*# \"$)# \"$(# \"$'# \"$&# \"$%# \"$$# \"$## \"$\"# \"\"# \"*\u03C1 \"!.\u0216\"\"2\u02163\u0217*) \".\u0218\"\"2\u02183\u0219+\x88$ &7\xC0,#&7\xC0\"+v%.E\"\"2E3F+f% &7\xC0,#&7\xC0\"+T%7\x8E+J% &7\xC0,#&7\xC0\"+8%.K\"\"2K3L+(%4'6\u021A'!\"%$'# \"$&# \"$%# \"$$# \"$## \"$\"# \"\"# \"*\u0339 \"!.\u021B\"\"2\u021B3\u021C*) \".\u021D\"\"2\u021D3\u021E+\x88$ &7\xC0,#&7\xC0\"+v%.E\"\"2E3F+f% &7\xC0,#&7\xC0\"+T%7\x8E+J% &7\xC0,#&7\xC0\"+8%.K\"\"2K3L+(%4'6\u021F'!\"%$'# \"$&# \"$%# \"$$# \"$## \"$\"# \"\"# \"*\u02B1 \"!.\u0220\"\"2\u02203\u0221*) \".\u0222\"\"2\u02223\u0223+\xC7$ &7\xC0,#&7\xC0\"+\xB5%.E\"\"2E3F+\xA5% &7\xC0,#&7\xC0\"+\x93%7\x8E+\x89% &7\xC0,#&7\xC0\"+w%.\u0155\"\"2\u01553\u0156+g% &7\xC0,#&7\xC0\"+U%7\x8E+K% &7\xC0,#&7\xC0\"+9%.K\"\"2K3L+)%4+6\u0224+\"&\"%$+# \"$*# \"$)# \"$(# \"$'# \"$&# \"$%# \"$$# \"$## \"$\"# \"\"# \"*\u01EA \"!.\u0225\"\"2\u02253\u0226*A \".\u0227\"\"2\u02273\u0228*5 \".\u0229\"\"2\u02293\u022A*) \".\u022B\"\"2\u022B3\u022C+\x88$ &7\xC0,#&7\xC0\"+v%.E\"\"2E3F+f% &7\xC0,#&7\xC0\"+T%7\x8E+J% &7\xC0,#&7\xC0\"+8%.K\"\"2K3L+(%4'6\u022D'!\"%$'# \"$&# \"$%# \"$$# \"$## \"$\"# \"\"# \"*\u014A \"!.\u022E\"\"2\u022E3\u022F*) \".\u0230\"\"2\u02303\u0231+\u011B$ &0\u0232\"\"1!3\u0233+,$,)&0\u0232\"\"1!3\u0233\"\"\" \"+\xF6% &7\xC0,#&7\xC0\"+\xE4%.E\"\"2E3F+\xD4% &! &7\xC0,#&7\xC0\"+=$7\x8E+3%.\u0155\"\"2\u01553\u0156+#%'#%$## \"$\"# \"\"# \",P&! &7\xC0,#&7\xC0\"+=$7\x8E+3%.\u0155\"\"2\u01553\u0156+#%'#%$## \"$\"# \"\"# \"\"+h% &7\xC0,#&7\xC0\"+V%7\x8E+L% &7\xC0,#&7\xC0\"+:%.K\"\"2K3L+*%4)6\u0234)#'$\"%$)# \"$(# \"$'# \"$&# \"$%# \"$$# \"$## \"$\"# \"\"# \"*/ \"7\x9A*) \"7\x9B*# \"7\x9C9*\" 3\u01E3"),
          peg$decode("8!.\u0236\"\"2\u02363\u0237*) \".\u0238\"\"2\u02383\u0239+\u0117$ &7\xC0,#&7\xC0\"+\u0105%.E\"\"2E3F+\xF5% &7\xC0,#&7\xC0\"+\xE3%7\x8E+\xD9% &7\xC0,#&7\xC0\"+\xC7%.\u0155\"\"2\u01553\u0156+\xB7% &7\xC0,#&7\xC0\"+\xA5%7\x8E+\x9B% &7\xC0,#&7\xC0\"+\x89%!.\u0155\"\"2\u01553\u0156+?$ &7\xC0,#&7\xC0\"+-%7\x8E+#%'#%$## \"$\"# \"\"# \"*# \" %+L% &7\xC0,#&7\xC0\"+:%.K\"\"2K3L+*%4-6\u023A-#($\"%$-# \"$,# \"$+# \"$*# \"$)# \"$(# \"$'# \"$&# \"$%# \"$$# \"$## \"$\"# \"\"# \"9*\" 3\u0235"),
          peg$decode("8!.\u023C\"\"2\u023C3\u023D*) \".\u023E\"\"2\u023E3\u023F+D$ &7\xC0,#&7\xC0\"+2%7T+(%4#6\u0240#! %$## \"$\"# \"\"# \"9*\" 3\u023B"),
          peg$decode("8!.\u0242\"\"2\u02423\u0243*) \".\u0244\"\"2\u02443\u0245+r$ &7\xC0,#&7\xC0\"+`%.\u023C\"\"2\u023C3\u023D*) \".\u023E\"\"2\u023E3\u023F+D% &7\xC0,#&7\xC0\"+2%7T+(%4%6\u0246%! %$%# \"$$# \"$## \"$\"# \"\"# \"9*\" 3\u0241"),
          peg$decode("8!.\u0248\"\"2\u02483\u0249*) \".\u024A\"\"2\u024A3\u024B+\xDB$ &7\xC0,#&7\xC0\"+\xC9%.E\"\"2E3F+\xB9% &7\xC0,#&7\xC0\"+\xA7%.=\"\"2=3>*) \".?\"\"2?3@*# \" %+\x85% &7\xC0,#&7\xC0\"+s%.M\"\"2M3N*# \"7\x8E+]% &7\xC0,#&7\xC0\"+K%.K\"\"2K3L+;% &7\xC0,#&7\xC0\"+)%4*6\u024C*\"%#%$*# \"$)# \"$(# \"$'# \"$&# \"$%# \"$$# \"$## \"$\"# \"\"# \"*\u04AA \"!.\u024D\"\"2\u024D3\u024E*) \".\u024F\"\"2\u024F3\u0250+\u0151$ &7\xC0,#&7\xC0\"+\u013F%.E\"\"2E3F+\u012F% &7\xC0,#&7\xC0\"+\u011D%.=\"\"2=3>*) \".?\"\"2?3@*# \" %+\xFB% &7\xC0,#&7\xC0\"+\xE9%7\x8E+\xDF%!.\xBB\"\"2\xBB3\xBC+\x95$ &7\xC0,#&7\xC0\"+\x83%.\u0251\"\"2\u02513\u0252+s% &7\xC0,#&7\xC0\"+a%.\u01B4\"\"2\u01B43\u01B5+Q% &7\xC0,#&7\xC0\"+?%7\xA5+5% &7\xC0,#&7\xC0\"+#%'(%$(# \"$'# \"$&# \"$%# \"$$# \"$## \"$\"# \"\"# \"*# \" %+L%.K\"\"2K3L+<% &7\xC0,#&7\xC0\"+*%4*6\u0253*#%#\"%$*# \"$)# \"$(# \"$'# \"$&# \"$%# \"$$# \"$## \"$\"# \"\"# \"*\u0359 \"!.\u0254\"\"2\u02543\u0255*) \".\u0256\"\"2\u02563\u0257+\xCF$ &7\xC0,#&7\xC0\"+\xBD%.E\"\"2E3F+\xAD% &7\xC0,#&7\xC0\"+\x9B%.=\"\"2=3>*) \".?\"\"2?3@*# \" %+y% &7\xC0,#&7\xC0\"+g%7\x8E+]% &7\xC0,#&7\xC0\"+K%.K\"\"2K3L+;% &7\xC0,#&7\xC0\"+)%4*6\u0258*\"%#%$*# \"$)# \"$(# \"$'# \"$&# \"$%# \"$$# \"$## \"$\"# \"\"# \"*\u028A \"!.\u0259\"\"2\u02593\u025A*) \".\u025B\"\"2\u025B3\u025C+\xCF$ &7\xC0,#&7\xC0\"+\xBD%.E\"\"2E3F+\xAD% &7\xC0,#&7\xC0\"+\x9B%.=\"\"2=3>*) \".?\"\"2?3@*# \" %+y% &7\xC0,#&7\xC0\"+g%7\x8E+]% &7\xC0,#&7\xC0\"+K%.K\"\"2K3L+;% &7\xC0,#&7\xC0\"+)%4*6\u025D*\"%#%$*# \"$)# \"$(# \"$'# \"$&# \"$%# \"$$# \"$## \"$\"# \"\"# \"*\u01BB \"!.\u025E\"\"2\u025E3\u025F*) \".\u0260\"\"2\u02603\u0261+\xCF$ &7\xC0,#&7\xC0\"+\xBD%.E\"\"2E3F+\xAD% &7\xC0,#&7\xC0\"+\x9B%.=\"\"2=3>*) \".?\"\"2?3@*# \" %+y% &7\xC0,#&7\xC0\"+g%7\x8E+]% &7\xC0,#&7\xC0\"+K%.K\"\"2K3L+;% &7\xC0,#&7\xC0\"+)%4*6\u0262*\"%#%$*# \"$)# \"$(# \"$'# \"$&# \"$%# \"$$# \"$## \"$\"# \"\"# \"*\xEC \"!.\u0263\"\"2\u02633\u0264*) \".\u0265\"\"2\u02653\u0266+\xCF$ &7\xC0,#&7\xC0\"+\xBD%.E\"\"2E3F+\xAD% &7\xC0,#&7\xC0\"+\x9B%.=\"\"2=3>*) \".?\"\"2?3@*# \" %+y% &7\xC0,#&7\xC0\"+g%7\x8E+]% &7\xC0,#&7\xC0\"+K%.K\"\"2K3L+;% &7\xC0,#&7\xC0\"+)%4*6\u0267*\"%#%$*# \"$)# \"$(# \"$'# \"$&# \"$%# \"$$# \"$## \"$\"# \"\"# \"9*\" 3\u0247"),
          peg$decode("8!7\xA6+9$7f*# \" %+)%4\"6\u0269\"\"! %$\"# \"\"# \"9*\" 3\u0268"),
          peg$decode("8!7\xA5+Z$7\xAF*> \"!.\u026B\"\"2\u026B3\u026C+-$7\xA6+#%'\"%$\"# \"\"# \"*# \" %+)%4\"6\u026D\"\"! %$\"# \"\"# \"9*\" 3\u026A"),
          peg$decode("87\xA1*) \"7\xA2*# \"7\xA39*\" 3\u026E"),
          peg$decode("87\xB2*) \"7\xB1*# \"7\xB09*\" 3\u026F"),
          peg$decode("87\xB5*) \"7\xB4*# \"7\xB39*\" 3\u0270"),
          peg$decode("87\xB8*) \"7\xB7*# \"7\xB69*\" 3\u0271"),
          peg$decode("8!.\u0273\"\"2\u02733\u0274*) \".\u0275\"\"2\u02753\u0276+& 4!6\u0277! %*@ \"!.\u0278\"\"2\u02783\u0279*) \".\u027A\"\"2\u027A3\u027B+& 4!6\u027C! %9*\" 3\u0272"),
          peg$decode("8!7\xBC+' 4!6\u027E!! %*S \"!7\xBD+' 4!6\u027E!! %*A \"!7\xBA+' 4!6\u027E!! %*/ \"!7\xBB+' 4!6\u027E!! %9*\" 3\u027D"),
          peg$decode("8!7\xA9+' 4!6\u0280!! %*/ \"!7\xA7+' 4!6\u0281!! %9*\" 3\u027F"),
          peg$decode("8!7\xAB+' 4!6\u0283!! %*/ \"!7\xAA+' 4!6\u0284!! %9*\" 3\u0282"),
          peg$decode("8!7\xAC+' 4!6\u0286!! %*. \"!7\xC2+& 4!6\u0287! %9*\" 3\u0285"),
          peg$decode("8!.\u01B8\"\"2\u01B83\u01B9+V$ &0\u0289\"\"1!3\u028A,)&0\u0289\"\"1!3\u028A\"+8%.\u01BA\"\"2\u01BA3\u01BB+(%4#6\u028B#!!%$## \"$\"# \"\"# \"9*\" 3\u0288"),
          peg$decode("8!7\xC7*# \" %+8$.\u028D\"\"2\u028D3\u028E+(%4\"6\u0281\"!!%$\"# \"\"# \"9*\" 3\u028C"),
          peg$decode("8!7\xAA+3$7\xC8+)%4\"6\u0290\"\"! %$\"# \"\"# \"9*\" 3\u028F"),
          peg$decode("8!.\u0292\"\"2\u02923\u0293+2$7\xC8+(%4\"6\u0294\"! %$\"# \"\"# \"9*\" 3\u0291"),
          peg$decode("8!.\u0189\"\"2\u01893\u018A+2$7\xC5+(%4\"6\u0296\"! %$\"# \"\"# \"9*\" 3\u0295"),
          peg$decode("8!.\u0298\"\"2\u02983\u0299+2$7\xC5+(%4\"6\u0296\"! %$\"# \"\"# \"9*\" 3\u0297"),
          peg$decode("8!.\u029B\"\"2\u029B3\u029C+\xCC$ &0\u029D\"\"1!3\u029E+,$,)&0\u029D\"\"1!3\u029E\"\"\" \"+\xA7% &!.\u01D3\"\"2\u01D33\u01D4+H$ &0\u029F\"\"1!3\u02A0+,$,)&0\u029F\"\"1!3\u02A0\"\"\" \"+#%'\"%$\"# \"\"# \",Y&!.\u01D3\"\"2\u01D33\u01D4+H$ &0\u029F\"\"1!3\u02A0+,$,)&0\u029F\"\"1!3\u02A0\"\"\" \"+#%'\"%$\"# \"\"# \"\"+)%4#6\u02A1#\"! %$## \"$\"# \"\"# \"9*\" 3\u029A"),
          peg$decode("8! &0\u02A3\"\"1!3\u02A4+,$,)&0\u02A3\"\"1!3\u02A4\"\"\" \"+' 4!6\u02A5!! %9*\" 3\u02A2"),
          peg$decode("8! &0\u02A3\"\"1!3\u02A4+,$,)&0\u02A3\"\"1!3\u02A4\"\"\" \"+X$.\u0116\"\"2\u01163\u0117+H% &0\u02A3\"\"1!3\u02A4,)&0\u02A3\"\"1!3\u02A4\"+*%4#6\u02A7##\"! %$## \"$\"# \"\"# \"*_ \"!.\u0116\"\"2\u01163\u0117+N$ &0\u02A3\"\"1!3\u02A4+,$,)&0\u02A3\"\"1!3\u02A4\"\"\" \"+)%4\"6\u02A8\"\"! %$\"# \"\"# \"9*\" 3\u02A6"),
          peg$decode("8! &0\u02A3\"\"1!3\u02A4+,$,)&0\u02A3\"\"1!3\u02A4\"\"\" \"+c$.\u0116\"\"2\u01163\u0117+S% &0\u02A3\"\"1!3\u02A4,)&0\u02A3\"\"1!3\u02A4\"+5%7\xB9++%4$6\u02AA$$#\"! %$$# \"$## \"$\"# \"\"# \"*\xA6 \"!.\u0116\"\"2\u01163\u0117+Y$ &0\u02A3\"\"1!3\u02A4+,$,)&0\u02A3\"\"1!3\u02A4\"\"\" \"+4%7\xB9+*%4#6\u02AB##\"! %$## \"$\"# \"\"# \"*Y \"! &0\u02A3\"\"1!3\u02A4+,$,)&0\u02A3\"\"1!3\u02A4\"\"\" \"+3$7\xB9+)%4\"6\u02AC\"\"! %$\"# \"\"# \"9*\" 3\u02A9"),
          peg$decode("8!.\u018B\"\"2\u018B3\u018C+2$7\xB0+(%4\"6\u02AE\"! %$\"# \"\"# \"9*\" 3\u02AD"),
          peg$decode("8!.\u018B\"\"2\u018B3\u018C+2$7\xB1+(%4\"6\u02B0\"! %$\"# \"\"# \"9*\" 3\u02AF"),
          peg$decode("8!.\u018B\"\"2\u018B3\u018C+2$7\xB2+(%4\"6\u02B0\"! %$\"# \"\"# \"9*\" 3\u02B1"),
          peg$decode("8!.\u01D3\"\"2\u01D33\u01D4+2$7\xB0+(%4\"6\u02B3\"! %$\"# \"\"# \"9*\" 3\u02B2"),
          peg$decode("8!.\u01D3\"\"2\u01D33\u01D4+2$7\xB1+(%4\"6\u02B3\"! %$\"# \"\"# \"9*\" 3\u02B4"),
          peg$decode("8!.\u01D3\"\"2\u01D33\u01D4+2$7\xB2+(%4\"6\u02B3\"! %$\"# \"\"# \"9*\" 3\u02B5"),
          peg$decode("8!0\u02B7\"\"1!3\u02B8+e$0\u02B9\"\"1!3\u02BA*# \" %+O% &0\u02A3\"\"1!3\u02A4+,$,)&0\u02A3\"\"1!3\u02A4\"\"\" \"+*%4#6\u02BB##\"! %$## \"$\"# \"\"# \"9*\" 3\u02B6"),
          peg$decode("8!.\u02BD\"\"2\u02BD3\u02BE+b$ &0\u02BF\"\"1!3\u02C0*# \"7\xBE,/&0\u02BF\"\"1!3\u02C0*# \"7\xBE\"+8%.\u02BD\"\"2\u02BD3\u02BE+(%4#6\u02C1#!!%$## \"$\"# \"\"# \"9*\" 3\u02BC"),
          peg$decode("8!.\u02C3\"\"2\u02C33\u02C4+b$ &0\u02C5\"\"1!3\u02C6*# \"7\xBE,/&0\u02C5\"\"1!3\u02C6*# \"7\xBE\"+8%.\u02C3\"\"2\u02C33\u02C4+(%4#6\u02C1#!!%$## \"$\"# \"\"# \"9*\" 3\u02C2"),
          peg$decode("8!.\u02C8\"\"2\u02C83\u02C9+b$ &0\u02CA\"\"1!3\u02CB*# \"7\xBE,/&0\u02CA\"\"1!3\u02CB*# \"7\xBE\"+8%.\u02C8\"\"2\u02C83\u02C9+(%4#6\u02C1#!!%$## \"$\"# \"\"# \"9*\" 3\u02C7"),
          peg$decode("8!.\u02CD\"\"2\u02CD3\u02CE+b$ &0\u02CF\"\"1!3\u02D0*# \"7\xBE,/&0\u02CF\"\"1!3\u02D0*# \"7\xBE\"+8%.\u02CD\"\"2\u02CD3\u02CE+(%4#6\u02C1#!!%$## \"$\"# \"\"# \"9*\" 3\u02CC"),
          peg$decode("8!.\u02D2\"\"2\u02D23\u02D3+3$0\u02D4\"\"1!3\u02D5+#%'\"%$\"# \"\"# \"9*\" 3\u02D1"),
          peg$decode("8!.E\"\"2E3F+I$ &7\xC0,#&7\xC0\"+7%.K\"\"2K3L+'%4#6\u02D7# %$## \"$\"# \"\"# \"9*\" 3\u02D6"),
          peg$decode("80\u02D9\"\"1!3\u02DA*G \"0\u02DB\"\"1!3\u02DC*; \"0\u02DD\"\"1!3\u02DE*/ \"0\u02DF\"\"1!3\u02E0*# \"7\xC19*\" 3\u02D8"),
          peg$decode("8!.\u02E2\"\"2\u02E23\u02E3+A$ &0\u02E4\"\"1!3\u02E5,)&0\u02E4\"\"1!3\u02E5\"+#%'\"%$\"# \"\"# \"9*\" 3\u02E1"),
          peg$decode("8!.\u0197\"\"2\u01973\u0198+E$ &7\xC0,#&7\xC0\"+3%.\u0199\"\"2\u01993\u019A+#%'#%$## \"$\"# \"\"# \"9*\" 3\u02E6"),
          peg$decode("80\u02E8\"\"1!3\u02E9*\xB9 \"0\u02EA\"\"1!3\u02EB*\xAD \"0\u02EC\"\"1!3\u02ED*\xA1 \"0\u02EE\"\"1!3\u02EF*\x95 \"0\u02F0\"\"1!3\u02F1*\x89 \"0\u02F2\"\"1!3\u02F3*} \"0\u02F4\"\"1!3\u02F5*q \"0\u02F6\"\"1!3\u02F7*e \"0\u02F8\"\"1!3\u02F9*Y \"0\u02FA\"\"1!3\u02FB*M \"0\u02FC\"\"1!3\u02FD*A \"0\u02FE\"\"1!3\u02FF*5 \"0\u0300\"\"1!3\u0301*) \"0\u0302\"\"1!3\u03039*\" 3\u02E7"),
          peg$decode("87\xC3*) \".\u0305\"\"2\u03053\u03069*\" 3\u0304"),
          peg$decode("8!7\xC4*) \"0\u02A3\"\"1!3\u02A4+\x9B$ &7\xC4*M \"0\u02A3\"\"1!3\u02A4*A \"0\u0308\"\"1!3\u0309*5 \"0\u030A\"\"1!3\u030B*) \"0\u030C\"\"1!3\u030D,S&7\xC4*M \"0\u02A3\"\"1!3\u02A4*A \"0\u0308\"\"1!3\u0309*5 \"0\u030A\"\"1!3\u030B*) \"0\u030C\"\"1!3\u030D\"+)%4\"6\u030E\"\"! %$\"# \"\"# \"9*\" 3\u0307"),
          peg$decode("87\xC4*Y \".\u01D3\"\"2\u01D33\u01D4*M \"0\u02A3\"\"1!3\u02A4*A \"0\u0308\"\"1!3\u0309*5 \"0\u030A\"\"1!3\u030B*) \"0\u030C\"\"1!3\u030D9*\" 3\u030F"),
          peg$decode("8!7\xC3+S$ &7\xC6*) \".\u0116\"\"2\u01163\u0117,/&7\xC6*) \".\u0116\"\"2\u01163\u0117\"+)%4\"6\u0311\"\"! %$\"# \"\"# \"9*\" 3\u0310"),
          peg$decode("8!7\xC4*; \"0\u02A3\"\"1!3\u02A4*/ \".\u028D\"\"2\u028D3\u028E*# \"7\xC9+w$ &7\xC6*; \".\u0116\"\"2\u01163\u0117*/ \".\u028D\"\"2\u028D3\u028E*# \"7\xC9,A&7\xC6*; \".\u0116\"\"2\u01163\u0117*/ \".\u028D\"\"2\u028D3\u028E*# \"7\xC9\"+)%4\"6\u0313\"\"! %$\"# \"\"# \"9*\" 3\u0312"),
          peg$decode("87\xCA*# \"7\xCC9*\" 3\u0314"),
          peg$decode("8!!.\u0316\"\"2\u03163\u0317+7$7\xCB+-%7\xCB+#%'#%$## \"$\"# \"\"# \"+' 4!6\u0318!! %9*\" 3\u0315"),
          peg$decode("80\u02A3\"\"1!3\u02A4*5 \"0\u031A\"\"1!3\u031B*) \"0\u031C\"\"1!3\u031D9*\" 3\u0319"),
          peg$decode("8!.\u02D2\"\"2\u02D23\u02D3+\u0128$.\u0305\"\"2\u03053\u0306*\u010D \".\u031F\"\"2\u031F3\u0320*\u0101 \".\u0116\"\"2\u01163\u0117*\xF5 \".\u01D3\"\"2\u01D33\u01D4*\xE9 \".\u018E\"\"2\u018E3\u018F*\xDD \".\u0298\"\"2\u02983\u0299*\xD1 \".\u0321\"\"2\u03213\u0322*\xC5 \".\u02BD\"\"2\u02BD3\u02BE*\xB9 \".E\"\"2E3F*\xAD \".K\"\"2K3L*\xA1 \".M\"\"2M3N*\x95 \".\u018B\"\"2\u018B3\u018C*\x89 \".\u0155\"\"2\u01553\u0156*} \".\xBB\"\"2\xBB3\xBC*q \".\u028D\"\"2\u028D3\u028E*e \".\u01B4\"\"2\u01B43\u01B5*Y \".\u017F\"\"2\u017F3\u0180*M \".\u0189\"\"2\u01893\u018A*A \".\u02E2\"\"2\u02E23\u02E3*5 \".\u029B\"\"2\u029B3\u029C*) \".\u0316\"\"2\u03163\u0317+(%4\"6\u0323\"! %$\"# \"\"# \"9*\" 3\u031E")
        ],

        peg$currPos          = 0,
        peg$reportedPos      = 0,
        peg$cachedPos        = 0,
        peg$cachedPosDetails = { line: 1, column: 1, seenCR: false },
        peg$maxFailPos       = 0,
        peg$maxFailExpected  = [],
        peg$silentFails      = 0,

        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleIndices)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleIndex = peg$startRuleIndices[options.startRule];
    }

    function text() {
      return input.substring(peg$reportedPos, peg$currPos);
    }

    function offset() {
      return peg$reportedPos;
    }

    function line() {
      return peg$computePosDetails(peg$reportedPos).line;
    }

    function column() {
      return peg$computePosDetails(peg$reportedPos).column;
    }

    function expected(description) {
      throw peg$buildException(
        null,
        [{ type: "other", description: description }],
        peg$reportedPos
      );
    }

    function error(message) {
      throw peg$buildException(message, null, peg$reportedPos);
    }

    function peg$computePosDetails(pos) {
      function advance(details, startPos, endPos) {
        var p, ch;

        for (p = startPos; p < endPos; p++) {
          ch = input.charAt(p);
          if (ch === "\n") {
            if (!details.seenCR) { details.line++; }
            details.column = 1;
            details.seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            details.line++;
            details.column = 1;
            details.seenCR = true;
          } else {
            details.column++;
            details.seenCR = false;
          }
        }
      }

      if (peg$cachedPos !== pos) {
        if (peg$cachedPos > pos) {
          peg$cachedPos = 0;
          peg$cachedPosDetails = { line: 1, column: 1, seenCR: false };
        }
        advance(peg$cachedPosDetails, peg$cachedPos, pos);
        peg$cachedPos = pos;
      }

      return peg$cachedPosDetails;
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) { return; }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$buildException(message, expected, pos) {
      function cleanupExpected(expected) {
        var i = 1;

        expected.sort(function(a, b) {
          if (a.description < b.description) {
            return -1;
          } else if (a.description > b.description) {
            return 1;
          } else {
            return 0;
          }
        });

        while (i < expected.length) {
          if (expected[i - 1] === expected[i]) {
            expected.splice(i, 1);
          } else {
            i++;
          }
        }
      }

      function buildMessage(expected, found) {
        function stringEscape(s) {
          function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }

          return s
            .replace(/\\/g,   '\\\\')
            .replace(/"/g,    '\\"')
            .replace(/\x08/g, '\\b')
            .replace(/\t/g,   '\\t')
            .replace(/\n/g,   '\\n')
            .replace(/\f/g,   '\\f')
            .replace(/\r/g,   '\\r')
            .replace(/[\x00-\x07\x0B\x0E\x0F]/g, function(ch) { return '\\x0' + hex(ch); })
            .replace(/[\x10-\x1F\x80-\xFF]/g,    function(ch) { return '\\x'  + hex(ch); })
            .replace(/[\u0180-\u0FFF]/g,         function(ch) { return '\\u0' + hex(ch); })
            .replace(/[\u1080-\uFFFF]/g,         function(ch) { return '\\u'  + hex(ch); });
        }

        var expectedDescs = new Array(expected.length),
            expectedDesc, foundDesc, i;

        for (i = 0; i < expected.length; i++) {
          expectedDescs[i] = expected[i].description;
        }

        expectedDesc = expected.length > 1
          ? expectedDescs.slice(0, -1).join(", ")
              + " or "
              + expectedDescs[expected.length - 1]
          : expectedDescs[0];

        foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";

        return "Expected " + expectedDesc + " but " + foundDesc + " found.";
      }

      var posDetails = peg$computePosDetails(pos),
          found      = pos < input.length ? input.charAt(pos) : null;

      if (expected !== null) {
        cleanupExpected(expected);
      }

      return new SyntaxError(
        message !== null ? message : buildMessage(expected, found),
        expected,
        found,
        pos,
        posDetails.line,
        posDetails.column
      );
    }

    function peg$decode(s) {
      var bc = new Array(s.length), i;

      for (i = 0; i < s.length; i++) {
        bc[i] = s.charCodeAt(i) - 32;
      }

      return bc;
    }

    function peg$parseRule(index) {
      var bc    = peg$bytecode[index],
          ip    = 0,
          ips   = [],
          end   = bc.length,
          ends  = [],
          stack = [],
          params, i;

      function protect(object) {
        return Object.prototype.toString.apply(object) === "[object Array]" ? [] : object;
      }

      while (true) {
        while (ip < end) {
          switch (bc[ip]) {
            case 0:
              stack.push(protect(peg$consts[bc[ip + 1]]));
              ip += 2;
              break;

            case 1:
              stack.push(peg$currPos);
              ip++;
              break;

            case 2:
              stack.pop();
              ip++;
              break;

            case 3:
              peg$currPos = stack.pop();
              ip++;
              break;

            case 4:
              stack.length -= bc[ip + 1];
              ip += 2;
              break;

            case 5:
              stack.splice(-2, 1);
              ip++;
              break;

            case 6:
              stack[stack.length - 2].push(stack.pop());
              ip++;
              break;

            case 7:
              stack.push(stack.splice(stack.length - bc[ip + 1], bc[ip + 1]));
              ip += 2;
              break;

            case 8:
              stack.pop();
              stack.push(input.substring(stack[stack.length - 1], peg$currPos));
              ip++;
              break;

            case 9:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (stack[stack.length - 1]) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 10:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (stack[stack.length - 1] === peg$FAILED) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 11:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (stack[stack.length - 1] !== peg$FAILED) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 12:
              if (stack[stack.length - 1] !== peg$FAILED) {
                ends.push(end);
                ips.push(ip);

                end = ip + 2 + bc[ip + 1];
                ip += 2;
              } else {
                ip += 2 + bc[ip + 1];
              }

              break;

            case 13:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (input.length > peg$currPos) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 14:
              ends.push(end);
              ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

              if (input.substr(peg$currPos, peg$consts[bc[ip + 1]].length) === peg$consts[bc[ip + 1]]) {
                end = ip + 4 + bc[ip + 2];
                ip += 4;
              } else {
                end = ip + 4 + bc[ip + 2] + bc[ip + 3];
                ip += 4 + bc[ip + 2];
              }

              break;

            case 15:
              ends.push(end);
              ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

              if (input.substr(peg$currPos, peg$consts[bc[ip + 1]].length).toLowerCase() === peg$consts[bc[ip + 1]]) {
                end = ip + 4 + bc[ip + 2];
                ip += 4;
              } else {
                end = ip + 4 + bc[ip + 2] + bc[ip + 3];
                ip += 4 + bc[ip + 2];
              }

              break;

            case 16:
              ends.push(end);
              ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

              if (peg$consts[bc[ip + 1]].test(input.charAt(peg$currPos))) {
                end = ip + 4 + bc[ip + 2];
                ip += 4;
              } else {
                end = ip + 4 + bc[ip + 2] + bc[ip + 3];
                ip += 4 + bc[ip + 2];
              }

              break;

            case 17:
              stack.push(input.substr(peg$currPos, bc[ip + 1]));
              peg$currPos += bc[ip + 1];
              ip += 2;
              break;

            case 18:
              stack.push(peg$consts[bc[ip + 1]]);
              peg$currPos += peg$consts[bc[ip + 1]].length;
              ip += 2;
              break;

            case 19:
              stack.push(peg$FAILED);
              if (peg$silentFails === 0) {
                peg$fail(peg$consts[bc[ip + 1]]);
              }
              ip += 2;
              break;

            case 20:
              peg$reportedPos = stack[stack.length - 1 - bc[ip + 1]];
              ip += 2;
              break;

            case 21:
              peg$reportedPos = peg$currPos;
              ip++;
              break;

            case 22:
              params = bc.slice(ip + 4, ip + 4 + bc[ip + 3]);
              for (i = 0; i < bc[ip + 3]; i++) {
                params[i] = stack[stack.length - 1 - params[i]];
              }

              stack.splice(
                stack.length - bc[ip + 2],
                bc[ip + 2],
                peg$consts[bc[ip + 1]].apply(null, params)
              );

              ip += 4 + bc[ip + 3];
              break;

            case 23:
              stack.push(peg$parseRule(bc[ip + 1]));
              ip += 2;
              break;

            case 24:
              peg$silentFails++;
              ip++;
              break;

            case 25:
              peg$silentFails--;
              ip++;
              break;

            default:
              throw new Error("Invalid opcode: " + bc[ip] + ".");
          }
        }

        if (ends.length > 0) {
          end = ends.pop();
          ip = ips.pop();
        } else {
          break;
        }
      }

      return stack[0];
    }


        var flattenString = function(arrs) {
            var acum ="";
            for(var i=0; i< arrs.length; i++) {
              if(typeof(arrs[i])==='string') {
                acum = acum + arrs[i];
              } else {
                acum = acum + arrs[i].join('');
              }
            }

            return acum;
        }


        var GlobalBlankNodeCounter = 0;

        var prefixes = {};

        var registerPrefix = function(prefix, uri) {
            prefixes[prefix] = uri;
        }

        var registerDefaultPrefix = function(uri) {
            prefixes[null] = uri;
        }

        var arrayToString = function(array) {
            var tmp = "";
            if(array == null)
              return null;

            for(var i=0; i<array.length; i++) {
                tmp = tmp + array[i];
            }

            return tmp.toUpperCase();
        }


    peg$result = peg$parseRule(peg$startRuleIndex);

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        peg$fail({ type: "end", description: "end of input" });
      }

      throw peg$buildException(null, peg$maxFailExpected, peg$maxFailPos);
    }
  }

  return {
    SyntaxError: SyntaxError,
    parse:       parse
  };
})()