module.exports = (function() {
  "use strict";

  /*
   * Generated by PEG.js 0.9.0.
   *
   * http://pegjs.org/
   */

  function peg$subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function peg$SyntaxError(message, expected, found, location) {
    this.message  = message;
    this.expected = expected;
    this.found    = found;
    this.location = location;
    this.name     = "SyntaxError";

    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, peg$SyntaxError);
    }
  }

  peg$subclass(peg$SyntaxError, Error);

  function peg$parse(input) {
    var options = arguments.length > 1 ? arguments[1] : {},
        parser  = this,

        peg$FAILED = {},

        peg$startRuleIndices = { DOCUMENT: 0 },
        peg$startRuleIndex   = 0,

        peg$consts = [
          { type: "other", description: "[1] QueryUnit" },
          { type: "other", description: "[2] Query" },
          function(p, q, v) {
              return {
          	token: 'query',
          	kind: 'query',
          	prologue: p,
          	units: [q],
          	inlineData: v
              }
          },
          { type: "other", description: "[3] Prologue" },
          function(b, pfx) {
              return { token: 'prologue',
          	base: b,
          	prefixes: pfx }
          },
          { type: "other", description: "[4] BaseDecl" },
          "BASE",
          { type: "literal", value: "BASE", description: "\"BASE\"" },
          "base",
          { type: "literal", value: "base", description: "\"base\"" },
          function(i) {
              registerDefaultPrefix(i);

              var base = {};
              base.token = 'base';
              base.value = i;

              return base;
          },
          { type: "other", description: "[5] PrefixDecl" },
          "PREFIX",
          { type: "literal", value: "PREFIX", description: "\"PREFIX\"" },
          "prefix",
          { type: "literal", value: "prefix", description: "\"prefix\"" },
          function(p, l) {

              registerPrefix(p,l);

              var prefix = {};
              prefix.token = 'prefix';
              prefix.prefix = p;
              prefix.local = l;

              return prefix;
          },
          { type: "other", description: "[6] SelectQuery" },
          function(s, gs, w, sm) {

              var dataset = {'named':[], 'implicit':[]};
              for(var i=0; i<gs.length; i++) {
          	var g = gs[i];
          	if(g.kind === 'default') {
          	    dataset['implicit'].push(g.graph);
          	} else {
          	    dataset['named'].push(g.graph)
          	}
              }


              if(dataset['named'].length === 0 && dataset['implicit'].length === 0) {
          	dataset['implicit'].push({token:'uri',
          	    prefix:null,
          	    suffix:null,
          	    value:'https://github.com/antoniogarrote/rdfstore-js#default_graph'});
              }

              var query = {};
              query.kind = 'select';
              query.token = 'executableunit';
              query.dataset = dataset;
              query.projection = s.vars;
              query.modifier = s.modifier;
              query.pattern = w;

              if(sm!=null && sm.limit!=null) {
          	query.limit = sm.limit;
              }
              if(sm!=null && sm.offset!=null) {
          	query.offset = sm.offset;
              }
              if(sm!=null && (sm.order!=null && sm.order!="")) {
          	query.order = sm.order;
              }
              if(sm!=null && sm.group!=null) {
          	query.group = sm.group;
              }

              return query;
          },
          { type: "other", description: "[7] SubSelect" },
          function(s, w, sm) {

              var query = {};
              query.kind = 'select';
              query.token = 'subselect';
              query.projection = s.vars;
              query.modifier = s.modifier;
              query.pattern = w;

              if(sm!=null && sm.limit!=null) {
          	query.limit = sm.limit;
              }
              if(sm!=null && sm.offset!=null) {
          	query.offset = sm.offset;
              }
              if(sm!=null && (sm.order!=null && sm.order!="")) {
          	query.order = sm.order;
              }
              if(sm!=null && sm.group!=null) {
          	query.group = sm.group;
              }

              return query;

          },
          { type: "other", description: "[8] SelectClause" },
          "SELECT",
          { type: "literal", value: "SELECT", description: "\"SELECT\"" },
          "select",
          { type: "literal", value: "select", description: "\"select\"" },
          "DISTINCT",
          { type: "literal", value: "DISTINCT", description: "\"DISTINCT\"" },
          "distinct",
          { type: "literal", value: "distinct", description: "\"distinct\"" },
          "REDUCED",
          { type: "literal", value: "REDUCED", description: "\"REDUCED\"" },
          "reduced",
          { type: "literal", value: "reduced", description: "\"reduced\"" },
          "(",
          { type: "literal", value: "(", description: "\"(\"" },
          "AS",
          { type: "literal", value: "AS", description: "\"AS\"" },
          "as",
          { type: "literal", value: "as", description: "\"as\"" },
          ")",
          { type: "literal", value: ")", description: "\")\"" },
          "*",
          { type: "literal", value: "*", description: "\"*\"" },
          function(mod, proj) {
              var vars = [];
              if(proj.length === 3 && proj[1]==="*") {
          	return {vars: [{token: 'variable', kind:'*'}], modifier:arrayToString(mod)};
              }

              for(var i=0; i< proj.length; i++) {
          	var aVar = proj[i];

          	if(aVar.length === 3) {
          	    vars.push({token: 'variable', kind:'var', value:aVar[1]});
          	} else {
          	    vars.push({token: 'variable', kind:'aliased', expression: aVar[3], alias:aVar[7]})
          	}
              }

              return {vars: vars, modifier:arrayToString(mod)};
          },
          { type: "other", description: "[9] ConstructQuery" },
          "CONSTRUCT",
          { type: "literal", value: "CONSTRUCT", description: "\"CONSTRUCT\"" },
          "construct",
          { type: "literal", value: "construct", description: "\"construct\"" },
          function(t, gs, w, sm) {
              var dataset = {'named':[], 'implicit':[]};
              for(var i=0; i<gs.length; i++) {
          	var g = gs[i];
          	if(g.kind === 'default') {
          	    dataset['implicit'].push(g.graph);
          	} else {
          	    dataset['named'].push(g.graph)
          	}
              }


              if(dataset['named'].length === 0 && dataset['implicit'].length === 0) {
          	dataset['implicit'].push({token:'uri',
          	    prefix:null,
          	    suffix:null,
          	    value:'https://github.com/antoniogarrote/rdfstore-js#default_graph'});
              }

              var query = {};
              query.kind = 'construct';
              query.token = 'executableunit'
              query.dataset = dataset;
              query.template = t;
              query.pattern = w;

              if(sm!=null && sm.limit!=null) {
          	query.limit = sm.limit;
              }
              if(sm!=null && sm.offset!=null) {
          	query.offset = sm.offset;
              }
              if(sm!=null && (sm.order!=null && sm.order!="")) {
          	query.order = sm.order;
              }
              return query

          },
          "WHERE",
          { type: "literal", value: "WHERE", description: "\"WHERE\"" },
          "where",
          { type: "literal", value: "where", description: "\"where\"" },
          "{",
          { type: "literal", value: "{", description: "\"{\"" },
          "}",
          { type: "literal", value: "}", description: "\"}\"" },
          function(gs, t, sm) {
              var dataset = {'named':[], 'implicit':[]};
              for(var i=0; i<gs.length; i++) {
          	var g = gs[i];
          	if(g.kind === 'default') {
          	    dataset['implicit'].push(g.graph);
          	} else {
          	    dataset['named'].push(g.graph)
          	}
              }


              if(dataset['named'].length === 0 && dataset['implicit'].length === 0) {
          	dataset['implicit'].push({token:'uri',
          	    prefix:null,
          	    suffix:null,
          	    value:'https://github.com/antoniogarrote/rdfstore-js#default_graph'});
              }

              var query = {};
              query.kind = 'construct';
              query.token = 'executableunit'
              query.dataset = dataset;
              query.template = t;
              query.pattern = {
          	token: "basicgraphpattern",
          	triplesContext: t.triplesContext
              };

              if(sm!=null && sm.limit!=null) {
          	query.limit = sm.limit;
              }
              if(sm!=null && sm.offset!=null) {
          	query.offset = sm.offset;
              }
              if(sm!=null && (sm.order!=null && sm.order!="")) {
          	query.order = sm.order;
              }
              return query
          },
          { type: "other", description: "[10] DescribeQuery" },
          "DESCRIBE",
          { type: "literal", value: "DESCRIBE", description: "\"DESCRIBE\"" },
          { type: "other", description: "[11] AskQuery" },
          "ASK",
          { type: "literal", value: "ASK", description: "\"ASK\"" },
          "ask",
          { type: "literal", value: "ask", description: "\"ask\"" },
          function(gs, w) {
              var dataset = {'named':[], 'implicit':[]};
              for(var i=0; i<gs.length; i++) {
          	var g = gs[i];
          	if(g.kind === 'implicit') {
          	    dataset['implicit'].push(g.graph);
          	} else {
          	    dataset['named'].push(g.graph)
          	}
              }


              if(dataset['named'].length === 0 && dataset['implicit'].length === 0) {
          	dataset['implicit'].push({token:'uri',
          	    prefix:null,
          	    suffix:null,
          	    value:'https://github.com/antoniogarrote/rdfstore-js#default_graph'});
              }

              var query = {};
              query.kind = 'ask';
              query.token = 'executableunit'
              query.dataset = dataset;
              query.pattern = w

              return query
          },
          { type: "other", description: "[12] DatasetClause" },
          "FROM",
          { type: "literal", value: "FROM", description: "\"FROM\"" },
          "from",
          { type: "literal", value: "from", description: "\"from\"" },
          function(gs) {
              return gs;
          },
          { type: "other", description: "[13] DefaultGraphClause" },
          function(s) {
              return {graph:s , kind:'default', token:'graphClause'}
          },
          { type: "other", description: "[14] NamedGraphClause" },
          "NAMED",
          { type: "literal", value: "NAMED", description: "\"NAMED\"" },
          "named",
          { type: "literal", value: "named", description: "\"named\"" },
          function(s) {
              return {graph:s, kind:'named', token:'graphCluase'};
          },
          { type: "other", description: "[15] SourceSelector" },
          { type: "other", description: "[16] WhereClause" },
          function(g) {
              return g;
          },
          { type: "other", description: "[17] SolutionModifier" },
          function(gc, oc, lo) {
              var acum = {};
          if(lo != null) {
              if(lo.limit != null) {
          	acum.limit = lo.limit;
              }
              if(lo.offset != null) {
          	acum.offset = lo.offset;
              }
          }

          if(gc != null) {
              acum.group = gc;
          }

          acum.order = oc;

          return acum
          },
          { type: "other", description: "[18] GroupClause" },
          "GROUP",
          { type: "literal", value: "GROUP", description: "\"GROUP\"" },
          "group",
          { type: "literal", value: "group", description: "\"group\"" },
          "BY",
          { type: "literal", value: "BY", description: "\"BY\"" },
          "by",
          { type: "literal", value: "by", description: "\"by\"" },
          function(conds) {
              return conds;
          },
          { type: "other", description: "[19] GroupCondition" },
          function(b) {
              return b;
          },
          function(f) {
              return f;
          },
          function(e, alias) {
              if(alias.length != 0) {
              return {token: 'aliased_expression',
          	expression: e,
          	alias: alias[2] };
          } else {
              return e;
          }
          },
          function(v) {
              return v;
          },
          { type: "other", description: "[20] HavingClause" },
          "HAVING",
          { type: "literal", value: "HAVING", description: "\"HAVING\"" },
          { type: "other", description: "[21] HavingCondition" },
          { type: "other", description: "[22] OrderClause" },
          "ORDER",
          { type: "literal", value: "ORDER", description: "\"ORDER\"" },
          "order",
          { type: "literal", value: "order", description: "\"order\"" },
          function(os) {
              return os;
          },
          { type: "other", description: "[23] OrderCondition" },
          "ASC",
          { type: "literal", value: "ASC", description: "\"ASC\"" },
          "asc",
          { type: "literal", value: "asc", description: "\"asc\"" },
          "DESC",
          { type: "literal", value: "DESC", description: "\"DESC\"" },
          "desc",
          { type: "literal", value: "desc", description: "\"desc\"" },
          function(direction, e) {
              return { direction: direction.toUpperCase(), expression:e };
          },
          function(e) {
              if(e.token === 'var') {
              var e = { token:'expression',
          	expressionType:'atomic',
          	primaryexpression: 'var',
          	value: e };
          }
          return { direction: 'ASC', expression:e };
          },
          { type: "other", description: "[24] LimitOffsetClauses" },
          function(cls) {
              var acum = {};
              for(var i=0; i<cls.length; i++) {
          	var cl = cls[i];
          	if(cl != null && cl.limit != null) {
          	    acum['limit'] = cl.limit;
          	} else if(cl != null && cl.offset != null){
          	    acum['offset'] = cl.offset;
          	}
              }

              return acum;
          },
          { type: "other", description: "[25] LimitClause" },
          "LIMIT",
          { type: "literal", value: "LIMIT", description: "\"LIMIT\"" },
          "limit",
          { type: "literal", value: "limit", description: "\"limit\"" },
          function(i) {
              return { limit:parseInt(i.value) };
          },
          { type: "other", description: "[26] OffsetClause" },
          "OFFSET",
          { type: "literal", value: "OFFSET", description: "\"OFFSET\"" },
          "offset",
          { type: "literal", value: "offset", description: "\"offset\"" },
          function(i) {
              return { offset:parseInt(i.value) };
          },
          { type: "other", description: "[27] BindingsClause" },
          "BINDINGS",
          { type: "literal", value: "BINDINGS", description: "\"BINDINGS\"" },
          { type: "other", description: "[28] BindingValue" },
          "UNDEF",
          { type: "literal", value: "UNDEF", description: "\"UNDEF\"" },
          { type: "other", description: "[28]\tValuesClause\t  ::=\t( 'VALUES' DataBlock )?" },
          "VALUES",
          { type: "literal", value: "VALUES", description: "\"VALUES\"" },
          "values",
          { type: "literal", value: "values", description: "\"values\"" },
          function(b) {
               if(b != null) {
                 return b[1];
               } else {
                 return null;
               }
          },
          { type: "other", description: "[29] UpdateUnit" },
          { type: "other", description: "[30] Update" },
          ";",
          { type: "literal", value: ";", description: "\";\"" },
          function(p, u, us) {

              var query = {};
          query.token = 'query';
          query.kind = 'update'
          query.prologue = p;

          var units = [u];

          if(us != null && us.length != null && us[3] != null && us[3].units != null) {
              units = units.concat(us[3].units);
          }

          query.units = units;
          return query;
          },
          { type: "other", description: "[31] Update1" },
          { type: "other", description: "[32] Load" },
          "LOAD",
          { type: "literal", value: "LOAD", description: "\"LOAD\"" },
          "load",
          { type: "literal", value: "load", description: "\"load\"" },
          "INTO",
          { type: "literal", value: "INTO", description: "\"INTO\"" },
          "into",
          { type: "literal", value: "into", description: "\"into\"" },
          function(sg, dg) {
              var query = {};
          query.kind = 'load';
          query.token = 'executableunit';
          query.sourceGraph = sg;
          if(dg != null) {
              query.destinyGraph = dg[2];
          }
          return query;
          },
          { type: "other", description: "[33] Clear" },
          "CLEAR",
          { type: "literal", value: "CLEAR", description: "\"CLEAR\"" },
          "clear",
          { type: "literal", value: "clear", description: "\"clear\"" },
          "SILENT",
          { type: "literal", value: "SILENT", description: "\"SILENT\"" },
          "silent",
          { type: "literal", value: "silent", description: "\"silent\"" },
          function(ref) {
              var query = {};
              query.kind = 'clear';
              query.token = 'executableunit'
              query.destinyGraph = ref;

              return query;
          },
          { type: "other", description: "[34] Drop" },
          "DROP",
          { type: "literal", value: "DROP", description: "\"DROP\"" },
          "drop",
          { type: "literal", value: "drop", description: "\"drop\"" },
          function(ref) {
              var query = {};
              query.kind = 'drop';
              query.token = 'executableunit'
              query.destinyGraph = ref;

              return query;
          },
          { type: "other", description: "[35] Create" },
          "CREATE",
          { type: "literal", value: "CREATE", description: "\"CREATE\"" },
          "create",
          { type: "literal", value: "create", description: "\"create\"" },
          function(ref) {
              var query = {};
              query.kind = 'create';
              query.token = 'executableunit'
              query.destinyGraph = ref;

              return query;
          },
          { type: "other", description: "[36] InsertData" },
          "INSERT",
          { type: "literal", value: "INSERT", description: "\"INSERT\"" },
          "insert",
          { type: "literal", value: "insert", description: "\"insert\"" },
          "DATA",
          { type: "literal", value: "DATA", description: "\"DATA\"" },
          "data",
          { type: "literal", value: "data", description: "\"data\"" },
          function(qs) {
              var query = {};
              query.kind = 'insertdata';
              query.token = 'executableunit'
              query.quads = qs;

              return query;
          },
          { type: "other", description: "[37] DeleteData" },
          "DELETE",
          { type: "literal", value: "DELETE", description: "\"DELETE\"" },
          "delete",
          { type: "literal", value: "delete", description: "\"delete\"" },
          function(qs) {
              var query = {};
              query.kind = 'deletedata';
              query.token = 'executableunit'
              query.quads = qs;

              return query;
          },
          { type: "other", description: "[38] DeleteWhere" },
          function(p) {
              var query = {};
              query.kind = 'modify';
              query.pattern = p;
              query.with = null;
              query.using = null;

              var quads = [];


              var patternsCollection = p.patterns[0];
              if(patternsCollection.triplesContext == null && patternsCollection.patterns!=null) {
          	patternsCollection = patternsCollection.patterns[0].triplesContext;
              } else {
          	patternsCollection = patternsCollection.triplesContext;
              }

              for(var i=0; i<patternsCollection.length; i++) {
          	var quad = {};
          	var contextQuad = patternsCollection[i];

          	quad['subject'] = contextQuad['subject'];
          	quad['predicate'] = contextQuad['predicate'];
          	quad['object'] = contextQuad['object'];
          	quad['graph'] = contextQuad['graph'];

          	quads.push(quad);
              }

              query.delete = quads;

              return query;
          },
          { type: "other", description: "[39] Modify" },
          "WITH",
          { type: "literal", value: "WITH", description: "\"WITH\"" },
          "with",
          { type: "literal", value: "with", description: "\"with\"" },
          function(wg, dic, uc, p) {
              var query = {};
          query.kind = 'modify';

          if(wg != "" && wg != null) {
              query.with = wg[2];
          } else {
              query.with = null;
          }


          if(dic.length === 3 && (dic[2] === ''|| dic[2] == null)) {
              query.delete = dic[0];
              query.insert = null;
          } else if(dic.length === 3 && dic[0].length != null && dic[1].length != null && dic[2].length != null) {
              query.delete = dic[0];
              query.insert = dic[2];
          } else  {
              query.insert = dic;
              query.delete = null;
          }

          if(uc != '') {
              query.using = uc;
          }

          query.pattern = p;

          return query;
          },
          { type: "other", description: "[40] DeleteClause" },
          function(q) {
              return q;
          },
          { type: "other", description: "[41] InsertClause" },
          { type: "other", description: "[42] UsingClause" },
          "USING",
          { type: "literal", value: "USING", description: "\"USING\"" },
          "using",
          { type: "literal", value: "using", description: "\"using\"" },
          function(g) {
              if(g.length!=null) {
          	return {kind: 'named', uri: g[2]};
              } else {
          	return {kind: 'default', uri: g};
              }
          },
          { type: "other", description: "[43] GraphRef" },
          "GRAPH",
          { type: "literal", value: "GRAPH", description: "\"GRAPH\"" },
          "graph",
          { type: "literal", value: "graph", description: "\"graph\"" },
          function(i) {
              return i;
          },
          { type: "other", description: "[44] GraphRefAll" },
          "DEFAULT",
          { type: "literal", value: "DEFAULT", description: "\"DEFAULT\"" },
          "default",
          { type: "literal", value: "default", description: "\"default\"" },
          function() {
              return 'default';
          },
          function() {
              return 'named';
          },
          "ALL",
          { type: "literal", value: "ALL", description: "\"ALL\"" },
          "all",
          { type: "literal", value: "all", description: "\"all\"" },
          function() {
              return 'all';
          },
          { type: "other", description: "[45] QuadPattern" },
          function(qs) {
              return qs.quadsContext;
          },
          { type: "other", description: "[46] QuadData" },
          { type: "other", description: "[47] Quads" },
          ".",
          { type: "literal", value: ".", description: "\".\"" },
          function(ts, qs) {
              var quads = [];
              if(ts != null && ts.triplesContext != null) {
          	for(var i=0; i<ts.triplesContext.length; i++) {
          	    var triple = ts.triplesContext[i]
          	    triple.graph = null;
          	    quads.push(triple)
          	}
              }

              if(qs && qs.length>0 && qs[0].length > 0) {
          	quads = quads.concat(qs[0][0].quadsContext);

          	if( qs[0][2] != null && qs[0][2].triplesContext != null) {
          	    for(var i=0; i<qs[0][2].triplesContext.length; i++) {
          		var triple = qs[0][2].triplesContext[i]
          		triple.graph = null;
          		quads.push(triple)
          	    }
          	}
              }

              return {token:'quads',
          	quadsContext: quads}
          },
          { type: "other", description: "[48] QuadsNotTriples" },
          function(g, ts) {
              var quads = [];
              if(ts!=null) {
          	for (var i = 0; i < ts.triplesContext.length; i++) {
          	    var triple = ts.triplesContext[i];
          	    triple.graph = g;
          	    quads.push(triple)
          	}
              }

          return {token:'quadsnottriples',
              quadsContext: quads}
          },
          { type: "other", description: "[49] TriplesTemplate" },
          function(b, bs) {
              var triples = b.triplesContext;
              if(bs != null && typeof(bs) === 'object') {
                 if(bs.length != null) {
          	  if(bs[3] != null && bs[3].triplesContext!=null) {
          	      triples = triples.concat(bs[3].triplesContext);
          	  }
                 }
              }

              return {
          	token:'triplestemplate',
          	triplesContext: triples
              };
          },
          { type: "other", description: "[50] GroupGraphPattern" },
          function(p) {
              return p;
          },
          { type: "other", description: "[51] GroupGraphPatternSub" },
          function(tb, tbs) {
              var subpatterns = [];
              if(tb != null && tb != []) {
          	subpatterns.push(tb);
              }

              for(var i=0; i<tbs.length; i++) {
          	for(var j=0; j< tbs[i].length; j++) {
          	    if(tbs[i][j] != null && tbs[i][j].token != null) {
          		subpatterns.push(tbs[i][j]);
          	    }
          	}
              }

              var compactedSubpatterns = [];

              var currentBasicGraphPatterns = [];
              var currentFilters = [];
              var currentBinds = [];

              for(var i=0; i<subpatterns.length; i++) {
          	if(subpatterns[i].token!=='triplespattern' && subpatterns[i].token !== 'filter' && subpatterns[i].token !== 'bind') {
          	    if(currentBasicGraphPatterns.length != 0 || currentFilters.length != 0) {
          		var triplesContext = [];
          		for(var j=0; j<currentBasicGraphPatterns.length; j++) {
          		    triplesContext = triplesContext.concat(currentBasicGraphPatterns[j].triplesContext);
          		}
          		if(triplesContext.length > 0) {
          		    compactedSubpatterns.push({token: 'basicgraphpattern',
          			triplesContext: triplesContext});
          		}
          		currentBasicGraphPatterns = [];
          	    }
          	    compactedSubpatterns.push(subpatterns[i]);
          	} else {
          	    if(subpatterns[i].token === 'triplespattern') {
          		currentBasicGraphPatterns.push(subpatterns[i]);
                      } else if(subpatterns[i].token === 'bind') {
                          currentBinds.push(subpatterns[i]);

          	    } else {
          		currentFilters.push(subpatterns[i]);
          	    }
          	}
              }

              if(currentBasicGraphPatterns.length != 0 || currentFilters.length != 0) {
          	var triplesContext = [];
          	for(var j=0; j<currentBasicGraphPatterns.length; j++) {
          	    triplesContext = triplesContext.concat(currentBasicGraphPatterns[j].triplesContext);
          	}
          	if(triplesContext.length > 0) {
          	    compactedSubpatterns.push({token: 'basicgraphpattern',
          		triplesContext: triplesContext});
          	}
              }

          //      if(compactedSubpatterns.length == 1) {
          //          compactedSubpatterns[0].filters = currentFilters;
          //          return compactedSubpatterns[0];
          //      } else  {
              return { token: 'groupgraphpattern',
          	patterns: compactedSubpatterns,
                  filters: currentFilters,
                  binds: currentBinds
              }
          //      }
          },
          { type: "other", description: "[54] TriplesBlock" },
          function(b, bs) {
              var triples = b.triplesContext;
          if(bs != null && typeof(bs) === 'object') {
              if(bs != null && bs.length != null) {
          	if(bs[2] != null && bs[2].triplesContext!=null) {
          	    triples = triples.concat(bs[2].triplesContext);
          	}
              }
          }

          return {token:'triplespattern',
              triplesContext: triples}
          },
          { type: "other", description: "[53] GraphPatternNotTriples" },
          { type: "other", description: "[54] OptionalGraphPattern" },
          "OPTIONAL",
          { type: "literal", value: "OPTIONAL", description: "\"OPTIONAL\"" },
          "optional",
          { type: "literal", value: "optional", description: "\"optional\"" },
          function(v) {
              return { token: 'optionalgraphpattern',
          	value: v }
          },
          { type: "other", description: "[55] GraphGraphPattern" },
          function(g, gg) {
              for(var i=0; i<gg.patterns.length; i++) {
          	var quads = []
          	var ts = gg.patterns[i];
          	for(var j=0; j<ts.triplesContext.length; j++) {
          	    var triple = ts.triplesContext[j]
          	    triple.graph = g;
          	}
              }

              gg.token = 'groupgraphpattern'
              return gg;
          },
          { type: "other", description: "[56] ServiceGraphPattern" },
          "SERVICE",
          { type: "literal", value: "SERVICE", description: "\"SERVICE\"" },
          function(v, ts) {
              return {token: 'servicegraphpattern',
          	status: 'todo',
          	value: [v,ts] }
          },
          { type: "other", description: "[57] MinusGraphPattern" },
          "MINUS",
          { type: "literal", value: "MINUS", description: "\"MINUS\"" },
          "minus",
          { type: "literal", value: "minus", description: "\"minus\"" },
          function(ts) {
              return {token: 'minusgraphpattern',
          	status: 'todo',
          	value: ts}
          },
          { type: "other", description: "[58] GroupOrUnionGraphPattern" },
          "UNION",
          { type: "literal", value: "UNION", description: "\"UNION\"" },
          "union",
          { type: "literal", value: "union", description: "\"union\"" },
          function(a, b) {
              if(b.length === 0) {
          	return a;
              } else {

          	var lastToken = {token: 'graphunionpattern',
          	    value: [a]};

          	for(var i=0; i<b.length; i++) {
          	    if(i==b.length-1) {
          		lastToken.value.push(b[i][3]);
          	    } else {
          		lastToken.value.push(b[i][3]);
          		var newToken = {token: 'graphunionpattern',
          		    value: [lastToken]}

          		lastToken = newToken;
          	    }
          	}

          	return lastToken;

              }
          },
          { type: "other", description: "[59] Filter" },
          "FILTER",
          { type: "literal", value: "FILTER", description: "\"FILTER\"" },
          "filter",
          { type: "literal", value: "filter", description: "\"filter\"" },
          function(c) {
              return {token: 'filter',
          	value: c}
          },
          { type: "other", description: "[60] Bind" },
          "BIND",
          { type: "literal", value: "BIND", description: "\"BIND\"" },
          "bind",
          { type: "literal", value: "bind", description: "\"bind\"" },
          function(ex, v) {
              return {token: 'bind',
          	    expression: ex,
          	    as: v};
          },
          { type: "other", description: "[60] Constraint" },
          { type: "other", description: "[61] InlineData" },
          function(d) {
              return d;
          },
          { type: "other", description: "[62] DataBlock" },
          { type: "other", description: "[63] InlineDataOneVar" },
          function(v, d) {
              var result =  {
          	token: 'inlineData',
          	values: [{
          	    'var': v,
          	    'value': d
          	}]
              };

              return result;
          },
          { type: "other", description: "[64] InlineDataFull" },
          function(vars, vals) {
              var result = {
          	token: 'inlineData',
          	values: [],
          	todo: true
              };
              return result;
          },
          { type: "other", description: "[65] DataBlockValue" },
          { type: "other", description: "[61] FunctionCall" },
          function(i, args) {
              var fcall = {};
              fcall.token = "expression";
              fcall.expressionType = 'irireforfunction'
              fcall.iriref = i;
              fcall.args = args.value;

              return fcall;
          },
          { type: "other", description: "[62] ArgList" },
          function() {
              var args = {};
              args.token = 'args';
              args.value = [];
              return args;
          },
          ",",
          { type: "literal", value: ",", description: "\",\"" },
          function(d, e, es) {
              var cleanEx = [];

              for(var i=0; i<es.length; i++) {
          	cleanEx.push(es[i][1]);
              }
              var args = {};
              args.token = 'args';
              args.value = [e].concat(cleanEx);

              if(d!=null && d.toUpperCase()==="DISTINCT") {
          	args.distinct = true;
              } else {
          	args.distinct = false;
              }

              return args;
          },
          { type: "other", description: "[63] ExpressionList" },
          function(e, es) {
              var cleanEx = [];

              for(var i=0; i<es.length; i++) {
          	cleanEx.push(es[i][1]);
              }
              var args = {};
              args.token = 'args';
              args.value = [e].concat(cleanEx);

              return args;
          },
          { type: "other", description: "[64] ConstructTemplate" },
          function(ts) {
              return ts;
          },
          { type: "other", description: "[65] ConstructTriples" },
          function(b, bs) {
              var triples = b.triplesContext;
          var toTest = null;
          if(bs != null && typeof(bs) === 'object') {
              if(bs.length != null) {
          	if(bs[3] != null && bs[3].triplesContext!=null) {
          	    triples = triples.concat(bs[3].triplesContext);
          	}
              }
          }

          return {token:'triplestemplate',
              triplesContext: triples}
          },
          { type: "other", description: "[66] TriplesSameSubject" },
          function(s, pairs) {
              var triplesContext = pairs.triplesContext;
              var subject = s;
              if(pairs.pairs) {
          	for(var i=0; i< pairs.pairs.length; i++) {
          	    var pair = pairs.pairs[i];
          	    var triple = null;
          	    if(pair[1].length != null)
          		pair[1] = pair[1][0]
          	    if(subject.token && subject.token==='triplesnodecollection') {
          		triple = {subject: subject.chainSubject[0], predicate: pair[0], object: pair[1]}
          		triplesContext.push(triple);
          		triplesContext = triplesContext.concat(subject.triplesContext);
          	    } else {
          		triple = {subject: subject, predicate: pair[0], object: pair[1]}
          		triplesContext.push(triple);
          	    }
          	}
              }

              var token = {};
              token.token = "triplessamesubject";
              token.triplesContext = triplesContext;
              token.chainSubject = subject;

              return token;
          },
          function(tn, pairs) {
              var triplesContext = tn.triplesContext;
              var subject = tn.chainSubject;

              if(pairs.pairs) {
          	for(var i=0; i< pairs.pairs.length; i++) {
          	    var pair = pairs.pairs[i];
          	    if(pair[1].length != null)
          		pair[1] = pair[1][0]

          	    if(tn.token === "triplesnodecollection") {
          		for(var j=0; j<subject.length; j++) {
          		    var subj = subject[j];
          		    if(subj.triplesContext != null) {
          			var triple = {subject: subj.chainSubject, predicate: pair[0], object: pair[1]}
          			triplesContext.concat(subj.triplesContext);
          		    } else {
          			var triple = {subject: subject[j], predicate: pair[0], object: pair[1]}
          			triplesContext.push(triple);
          		    }
          		}
          	    } else {
          		var triple = {subject: subject, predicate: pair[0], object: pair[1]}
          		triplesContext.push(triple);
          	    }
          	}
              }

              var token = {};
              token.token = "triplessamesubject";
              token.triplesContext = triplesContext;
              token.chainSubject = subject;

              return token;
          },
          { type: "other", description: "[83] PropertyListPathNotEmpty" },
          function(v, ol, rest) {
              var tokenParsed = {};
              tokenParsed.token = 'propertylist';
              var triplesContext = [];
              var pairs = [];
              var test = [];

              for( var i=0; i<ol.length; i++) {

          	if(ol[i].triplesContext != null) {
          	    triplesContext = triplesContext.concat(ol[i].triplesContext);
          	    if(ol[i].token==='triplesnodecollection' && ol[i].chainSubject.length != null) {
          		pairs.push([v, ol[i].chainSubject[0]]);
          	    } else {
          		pairs.push([v, ol[i].chainSubject]);
          	    }

          	} else {
          	    pairs.push([v, ol[i]])
          	}

              }


              for(var i=0; i<rest.length; i++) {
          	var tok = rest[i][3];
          	var newVerb  = tok[0];
          	var newObjsList = tok[2] || [];

          	for(var j=0; j<newObjsList.length; j++) {
          	    if(newObjsList[j].triplesContext != null) {
          		triplesContext = triplesContext.concat(newObjsList[j].triplesContext);
          		pairs.push([newVerb, newObjsList[j].chainSubject]);
          	    } else {
          		pairs.push([newVerb, newObjsList[j]])
          	    }
          	}
              }

              tokenParsed.pairs = pairs;
              tokenParsed.triplesContext = triplesContext;

              return tokenParsed;
          },
          { type: "other", description: "[67] PropertyListNotEmpty" },
          function(v, ol, rest) {
              var tokenParsed = {};
              tokenParsed.token = 'propertylist';
              var triplesContext = [];
              var pairs = [];
              var test = [];

              for( var i=0; i<ol.length; i++) {

          	if(ol[i].triplesContext != null) {
          	    triplesContext = triplesContext.concat(ol[i].triplesContext);
          	    if(ol[i].token==='triplesnodecollection' && ol[i].chainSubject.length != null) {
          		pairs.push([v, ol[i].chainSubject[0]]);
          	    } else {
          		pairs.push([v, ol[i].chainSubject]);
          	    }

          	} else {
          	    pairs.push([v, ol[i]])
          	}

              }


              for(var i=0; i<rest.length; i++) {
          	var tok = rest[i][3];
          	var newVerb  = tok[0];
          	var newObjsList = tok[2] || [];

          	for(var j=0; j<newObjsList.length; j++) {
          	    if(newObjsList[j].triplesContext != null) {
          		triplesContext = triplesContext.concat(newObjsList[j].triplesContext);
          		pairs.push([newVerb, newObjsList[j].chainSubject]);
          	    } else {
          		pairs.push([newVerb, newObjsList[j]])
          	    }
          	}
              }

              tokenParsed.pairs = pairs;
              tokenParsed.triplesContext = triplesContext;

              return tokenParsed;

          },
          { type: "other", description: "[68] PropertyList" },
          { type: "other", description: "[86] ObjectListPath" },
          function(obj, objs) {
              var toReturn = [];

              toReturn.push(obj);

              for(var i=0; i<objs.length; i++) {
          	for(var j=0; j<objs[i].length; j++) {
          	    if(typeof(objs[i][j])=="object" && objs[i][j].token != null) {
          		toReturn.push(objs[i][j]);
          	    }
          	}
              }

              return toReturn;
          },
          { type: "other", description: "[69] ObjectList" },
          function(obj, objs) {

              var toReturn = [];

              toReturn.push(obj);

              for(var i=0; i<objs.length; i++) {
          	for(var j=0; j<objs[i].length; j++) {
          	    if(typeof(objs[i][j])=="object" && objs[i][j].token != null) {
          		toReturn.push(objs[i][j]);
          	    }
          	}
              }

              return toReturn;
          },
          { type: "other", description: "[87] ObjectPath" },
          { type: "other", description: "[70] Object" },
          { type: "other", description: "[71] Verb" },
          "a",
          { type: "literal", value: "a", description: "\"a\"" },
          function() {
              return{token: 'uri', prefix:null, suffix:null, value:"http://www.w3.org/1999/02/22-rdf-syntax-ns#type"}
          },
          { type: "other", description: "[72] TriplesSameSubjectPath" },
          function(s, pairs) {
              var triplesContext = pairs.triplesContext;
              var subject = s;
              if(pairs.pairs) {
          	for(var i=0; i< pairs.pairs.length; i++) {
          	    var pair = pairs.pairs[i];
          	    var triple = null;
          	    if(pair[1].length != null)
          		pair[1] = pair[1][0]
          	    if(subject.token && subject.token==='triplesnodecollection') {
          		triple = {subject: subject.chainSubject[0], predicate: pair[0], object: pair[1]};
          		if(triple.predicate.token === 'path' && triple.predicate.kind === 'element') {
          		    triple.predicate = triple.predicate.value;
          		}
          		triplesContext.push(triple);
          		triplesContext = triplesContext.concat(subject.triplesContext);
          	    } else {
          		triple = {subject: subject, predicate: pair[0], object: pair[1]}
          		if(triple.predicate.token === 'path' && triple.predicate.kind === 'element') {
          		    triple.predicate = triple.predicate.value;
          		}
          		triplesContext.push(triple);
          	    }
          	}
              }

              var tokenParsed = {};
              tokenParsed.token = "triplessamesubject";
              tokenParsed.triplesContext = triplesContext;
              tokenParsed.chainSubject = subject;

              return tokenParsed;
          },
          function(tn, pairs) {
              var triplesContext = tn.triplesContext;
              var subject = tn.chainSubject;

              if(pairs != null && pairs.pairs != null) {
          	for(var i=0; i< pairs.pairs.length; i++) {
          	    var pair = pairs.pairs[i];
          	    if(pair[1].length != null)
          		pair[1] = pair[1][0]

          	    if(tn.token === "triplesnodecollection") {
          		for(var j=0; j<subject.length; j++) {
          		    var subj = subject[j];
          		    if(subj.triplesContext != null) {
          			var triple = {subject: subj.chainSubject, predicate: pair[0], object: pair[1]}
          			triplesContext.concat(subj.triplesContext);
          		    } else {
          			var triple = {subject: subject[j], predicate: pair[0], object: pair[1]}
          			triplesContext.push(triple);
          		    }
          		}
          	    } else {
          		var triple = {subject: subject, predicate: pair[0], object: pair[1]}
          		triplesContext.push(triple);
          	    }
          	}
              }

              var tokenParsed = {};
              tokenParsed.token = "triplessamesubject";
              tokenParsed.triplesContext = triplesContext;
              tokenParsed.chainSubject = subject;

              return tokenParsed;

          },
          { type: "other", description: "[73] PropertyListNotEmptyPath" },
          function(v, ol, rest) {
              var token = {}
              token.token = 'propertylist';
              var triplesContext = [];
              var pairs = [];
              var test = [];

              for( var i=0; i<ol.length; i++) {

          	if(ol[i].triplesContext != null) {
          	    triplesContext = triplesContext.concat(ol[i].triplesContext);
          	    if(ol[i].token==='triplesnodecollection' && ol[i].chainSubject.length != null) {
          		pairs.push([v, ol[i].chainSubject[0]]);
          	    } else {
          		pairs.push([v, ol[i].chainSubject]);
          	    }

          	} else {
          	    pairs.push([v, ol[i]])
          	}

              }


              for(var i=0; i<rest.length; i++) {
          	var tok = rest[i][3];
          	var newVerb  = tok[0];
          	var newObjsList = tok[1] || [];

          	for(var j=0; j<newObjsList.length; j++) {
          	    if(newObjsList[j].triplesContext != null) {
          		triplesContext = triplesContext.concat(newObjsList[j].triplesContext);
          		pairs.push([newVerb, newObjsList[j].chainSubject]);
          	    } else {
          		pairs.push([newVerb, newObjsList[j]])
          	    }
          	}
              }

              token.pairs = pairs;
              token.triplesContext = triplesContext;

              return token;
          },
          { type: "other", description: "[74] PropertyListPath" },
          { type: "other", description: "[75]" },
          function(p) {
              var path = {};
              path.token = 'path';
              path.kind = 'element';
              path.value = p;

              return p;
          },
          { type: "other", description: "[76] VerbSimple" },
          { type: "other", description: "[77] Path" },
          { type: "other", description: "[78] PathAlternative" },
          "|",
          { type: "literal", value: "|", description: "\"|\"" },
          function(first, rest) {
              if(rest == null || rest.length === 0) {
          	return first;
              } else {
          	var acum = [];
          	for(var i=0; i<rest.length; i++)
          	    acum.push(rest[1]);

          	var path = {};
          	path.token = 'path';
          	path.kind = 'alternative';
          	path.value = acum;

          	return path;
              }
          },
          { type: "other", description: "[79] PathSequence" },
          "/",
          { type: "literal", value: "/", description: "\"/\"" },
          function(first, rest) {
              if(rest == null || rest.length === 0) {
          	return first;
              } else {
          	var acum = [first];

          	for(var i=0; i<rest.length; i++)
          	    acum.push(rest[i][1]);

          	var path = {};
          	path.token = 'path';
          	path.kind = 'sequence';

          	path.value = acum;

          	return path;
              }
          },
          { type: "other", description: "[88] PathElt" },
          function(p, mod) {
              if(p.token && p.token != 'path' && mod == '') {
              return p;
          } else if(p.token && p.token != path && mod != '') {
              var path = {};
              path.token = 'path';
              path.kind = 'element';
              path.value = p;
              path.modifier = mod;
              return path;
          } else {
              p.modifier = mod;
              return p;
          }
          },
          { type: "other", description: "[81] PathEltOrInverse" },
          "^",
          { type: "literal", value: "^", description: "\"^\"" },
          function(elt) {
              var path = {};
              path.token = 'path';
              path.kind = 'inversePath';
              path.value = elt;

              return path;
          },
          { type: "other", description: "[82] PathMod" },
          "?",
          { type: "literal", value: "?", description: "\"?\"" },
          "+",
          { type: "literal", value: "+", description: "\"+\"" },
          { type: "other", description: "[83] PathPrimary" },
          "!",
          { type: "literal", value: "!", description: "\"!\"" },
          { type: "other", description: "[85] PathOneInPropertySet" },
          { type: "other", description: "[86] Integer" },
          { type: "other", description: "[100] TriplesNodePath" },
          function(c) {
              var triplesContext = [];
              var chainSubject = [];

              var triple = null;

              // catch NIL
              /*
               if(c.length == 1 && c[0].token && c[0].token === 'nil') {
               GlobalBlankNodeCounter++;
               return  {token: "triplesnodecollection",
               triplesContext:[{subject: {token:'blank', value:("_:"+GlobalBlankNodeCounter)},
               predicate:{token:'uri', prefix:null, suffix:null, value:'http://www.w3.org/1999/02/22-rdf-syntax-ns#rest'},
               object:  {token:'blank', value:("_:"+(GlobalBlankNodeCounter+1))}}],
               chainSubject:{token:'blank', value:("_:"+GlobalBlankNodeCounter)}};

               }
               */

              // other cases
              for(var i=0; i<c.length; i++) {
          	GlobalBlankNodeCounter++;
          	//_:b0  rdf:first  1 ;
          	//rdf:rest   _:b1 .
          	var nextObject = null;
          	if(c[i].chainSubject == null && c[i].triplesContext == null) {
          	    nextObject = c[i];
          	} else {
          	    nextObject = c[i].chainSubject;
          	    triplesContext = triplesContext.concat(c[i].triplesContext);
          	}
          	triple = {
          	    subject: {token:'blank', value:("_:"+GlobalBlankNodeCounter)},
          	    predicate:{token:'uri', prefix:null, suffix:null, value:'http://www.w3.org/1999/02/22-rdf-syntax-ns#first'},
          	    object:nextObject
          	};

          	if(i==0) {
          	    chainSubject.push(triple.subject);
          	}

          	triplesContext.push(triple);

          	if(i===(c.length-1)) {
          	    triple = {subject: {token:'blank', value:("_:"+GlobalBlankNodeCounter)},
          		predicate:{token:'uri', prefix:null, suffix:null, value:'http://www.w3.org/1999/02/22-rdf-syntax-ns#rest'},
          		object:   {token:'uri', prefix:null, suffix:null, value:'http://www.w3.org/1999/02/22-rdf-syntax-ns#nil'}};
          	} else {
          	    triple = {subject: {token:'blank', value:("_:"+GlobalBlankNodeCounter)},
          		predicate:{token:'uri', prefix:null, suffix:null, value:'http://www.w3.org/1999/02/22-rdf-syntax-ns#rest'},
          		object:  {token:'blank', value:("_:"+(GlobalBlankNodeCounter+1))} };
          	}

          	triplesContext.push(triple);
              }

              return {token:"triplesnodecollection", triplesContext:triplesContext, chainSubject:chainSubject};
          },
          { type: "other", description: "[87] TriplesNode" },
          function(c) {
              var triplesContext = [];
              var chainSubject = [];

              var triple = null;

              // catch NIL
              /*
               if(c.length == 1 && c[0].token && c[0].token === 'nil') {
               GlobalBlankNodeCounter++;
               return  {token: "triplesnodecollection",
               triplesContext:[{subject: {token:'blank', value:("_:"+GlobalBlankNodeCounter)},
               predicate:{token:'uri', prefix:null, suffix:null, value:'http://www.w3.org/1999/02/22-rdf-syntax-ns#rest'},
               object:  {token:'blank', value:("_:"+(GlobalBlankNodeCounter+1))}}],
               chainSubject:{token:'blank', value:("_:"+GlobalBlankNodeCounter)}};

               }
               */

              // other cases
              for(var i=0; i<c.length; i++) {
          	GlobalBlankNodeCounter++;
          	//_:b0  rdf:first  1 ;
          	//rdf:rest   _:b1 .
          	var nextObject = null;
          	if(c[i].chainSubject == null && c[i].triplesContext == null) {
          	    nextObject = c[i];
          	} else {
          	    nextObject = c[i].chainSubject;
          	    triplesContext = triplesContext.concat(nextObject.triplesContext);
          	}
          	triple = {subject: {token:'blank', value:("_:"+GlobalBlankNodeCounter)},
          	    predicate:{token:'uri', prefix:null, suffix:null, value:'http://www.w3.org/1999/02/22-rdf-syntax-ns#first'},
          	    object:nextObject };

          	if(i==0) {
          	    chainSubject.push(triple.subject);
          	}

          	triplesContext.push(triple);

          	if(i===(c.length-1)) {
          	    triple = {subject: {token:'blank', value:("_:"+GlobalBlankNodeCounter)},
          		predicate:{token:'uri', prefix:null, suffix:null, value:'http://www.w3.org/1999/02/22-rdf-syntax-ns#rest'},
          		object:   {token:'uri', prefix:null, suffix:null, value:'http://www.w3.org/1999/02/22-rdf-syntax-ns#nil'}};
          	} else {
          	    triple = {subject: {token:'blank', value:("_:"+GlobalBlankNodeCounter)},
          		predicate:{token:'uri', prefix:null, suffix:null, value:'http://www.w3.org/1999/02/22-rdf-syntax-ns#rest'},
          		object:  {token:'blank', value:("_:"+(GlobalBlankNodeCounter+1))} };
          	}

          	triplesContext.push(triple);
              }

              return {token:"triplesnodecollection", triplesContext:triplesContext, chainSubject:chainSubject};
          },
          { type: "other", description: "[101] BlankNodePropertyListPath" },
          "[",
          { type: "literal", value: "[", description: "\"[\"" },
          "]",
          { type: "literal", value: "]", description: "\"]\"" },
          function(pl) {
              GlobalBlankNodeCounter++;
              var subject = {token:'blank', value:'_:'+GlobalBlankNodeCounter};
               var newTriples =  [];

              for(var i=0; i< pl.pairs.length; i++) {
          	var pair = pl.pairs[i];
          	var triple = {}
          	triple.subject = subject;
          	triple.predicate = pair[0];
          	if(pair[1].length != null)
          	    pair[1] = pair[1][0]
          	triple.object = pair[1];
          	newTriples.push(triple);
              }

              return {
          	token: 'triplesnode',
          	kind: 'blanknodepropertylist',
          	triplesContext: pl.triplesContext.concat(newTriples),
          	chainSubject: subject
              };
          },
          { type: "other", description: "[88] BlankNodePropertyList" },
          function(pl) {

              GlobalBlankNodeCounter++;
              var subject = {token:'blank', value:'_:'+GlobalBlankNodeCounter};
              var newTriples =  [];

              for(var i=0; i< pl.pairs.length; i++) {
          	var pair = pl.pairs[i];
          	var triple = {}
          	triple.subject = subject;
          	triple.predicate = pair[0];
          	if(pair[1].length != null)
          	    pair[1] = pair[1][0]
          	triple.object = pair[1];
          	newTriples.push(triple);
              }

              return {
          	token: 'triplesnode',
          	kind: 'blanknodepropertylist',
          	triplesContext: pl.triplesContext.concat(newTriples),
          	chainSubject: subject
              };
          },
          { type: "other", description: "[103] CollectionPath" },
          function(gn) {
              return gn;
          },
          { type: "other", description: "[89] Collection" },
          { type: "other", description: "[105] GraphNodePath" },
          function(gn) {
              return gn[1];
          },
          { type: "other", description: "[90] GraphNode" },
          { type: "other", description: "[91] VarOrTerm" },
          { type: "other", description: "[92] VarOrIRIref" },
          { type: "other", description: "[93] Var" },
          function(v) {
              var term = {};
              term.token = 'var';
              term.value = v;
              return term;
          },
          { type: "other", description: "[94] GraphTerm" },
          { type: "other", description: "[95] Expression" },
          { type: "other", description: "[96] ConditionalOrExpression" },
          "||",
          { type: "literal", value: "||", description: "\"||\"" },
          function(v, vs) {
              if(vs.length === 0) {
          	return v;
              }

              var exp = {};
              exp.token = "expression";
              exp.expressionType = "conditionalor";
              var ops = [v];

              for(var i=0; i<vs.length; i++) {
          	ops.push(vs[i][3]);
              }

              exp.operands = ops;

              return exp;
          },
          { type: "other", description: "[97] ConditionalAndExpression" },
          "&&",
          { type: "literal", value: "&&", description: "\"&&\"" },
          function(v, vs) {
              if(vs.length === 0) {
          	return v;
              }
              var exp = {};
              exp.token = "expression";
              exp.expressionType = "conditionaland";
              var ops = [v];

              for(var i=0; i<vs.length; i++) {
          	ops.push(vs[i][3]);
              }

              exp.operands = ops;

              return exp;
          },
          { type: "other", description: "[98] ValueLogical" },
          { type: "other", description: "[99] RelationalExpression" },
          "=",
          { type: "literal", value: "=", description: "\"=\"" },
          "!=",
          { type: "literal", value: "!=", description: "\"!=\"" },
          "<",
          { type: "literal", value: "<", description: "\"<\"" },
          ">",
          { type: "literal", value: ">", description: "\">\"" },
          "<=",
          { type: "literal", value: "<=", description: "\"<=\"" },
          ">=",
          { type: "literal", value: ">=", description: "\">=\"" },
          "I",
          { type: "literal", value: "I", description: "\"I\"" },
          "i",
          { type: "literal", value: "i", description: "\"i\"" },
          "N",
          { type: "literal", value: "N", description: "\"N\"" },
          "n",
          { type: "literal", value: "n", description: "\"n\"" },
          "O",
          { type: "literal", value: "O", description: "\"O\"" },
          "o",
          { type: "literal", value: "o", description: "\"o\"" },
          "T",
          { type: "literal", value: "T", description: "\"T\"" },
          "t",
          { type: "literal", value: "t", description: "\"t\"" },
          function(op1, op2) {
              if(op2.length === 0) {
          	return op1;
              } else if(op2[0][1] === 'i' || op2[0][1] === 'I' || op2[0][1] === 'n' || op2[0][1] === 'N'){
          	var exp = {};

          	if(op2[0][1] === 'i' || op2[0][1] === 'I') {
          	    var operator = "=";
          	    exp.expressionType = "conditionalor"
          	} else {
          	    var operator = "!=";
          	    exp.expressionType = "conditionaland"
          	}
          	var lop = op1;
          	var rops = []
          	for(var opi=0; opi<op2[0].length; opi++) {
          	    if(op2[0][opi].token ==="args") {
          		rops = op2[0][opi].value;
          		break;
          	    }
          	}

          	exp.token = "expression";
          	exp.operands = [];
          	for(var i=0; i<rops.length; i++) {
          	    var nextOperand = {};
          	    nextOperand.token = "expression";
          	    nextOperand.expressionType = "relationalexpression";
          	    nextOperand.operator = operator;
          	    nextOperand.op1 = lop;
          	    nextOperand.op2 = rops[i];

          	    exp.operands.push(nextOperand);
          	}
          	return exp;
              } else {
          	var exp = {};
          	exp.expressionType = "relationalexpression"
          	exp.operator = op2[0][1];
          	exp.op1 = op1;
          	exp.op2 = op2[0][3];
          	exp.token = "expression";

          	return exp;
              }
          },
          { type: "other", description: "[100] NumericExpression" },
          { type: "other", description: "[101] AdditiveExpression" },
          "-",
          { type: "literal", value: "-", description: "\"-\"" },
          function(op1, ops) {
              if(ops.length === 0) {
          	return op1;
              }

              var ex = {};
              ex.token = 'expression';
              ex.expressionType = 'additiveexpression';
              ex.summand = op1;
              ex.summands = [];

              for(var i=0; i<ops.length; i++) {
          	var summand = ops[i];
          	var sum = {};
          	if(summand.length == 4 && typeof(summand[1]) === "string") {
          	    sum.operator = summand[1];
          	    sum.expression = summand[3];
          	} else {
          	    var subexp = {}
          	    var firstFactor = sum[0];
          	    var operator = sum[1][1];
          	    var secondFactor = sum[1][3];
          	    var operator = null;
          	    if(firstFactor.value < 0) {
          		sum.operator = '-';
          		firstFactor.value = - firstFactor.value;
          	    } else {
          		sum.operator = '+';
          	    }
          	    subexp.token = 'expression';
          	    subexp.expressionType = 'multiplicativeexpression';
          	    subexp.operator = firstFactor;
          	    subexp.factors = [{operator: operator, expression: secondFactor}];

          	    sum.expression = subexp;
          	}
          	ex.summands.push(sum);
              }

              return ex;
          },
          { type: "other", description: "[102] MultiplicativeExpression" },
          function(exp, exps) {
              if(exps.length === 0) {
          	return exp;
              }

              var ex = {};
              ex.token = 'expression';
              ex.expressionType = 'multiplicativeexpression';
              ex.factor = exp;
              ex.factors = [];
              for(var i=0; i<exps.length; i++) {
          	var factor = exps[i];
          	var fact = {};
          	fact.operator = factor[1];
          	fact.expression = factor[3];
          	ex.factors.push(fact);
              }

              return ex;
          },
          { type: "other", description: "[103] UnaryExpression" },
          function(e) {
              var ex = {};
              ex.token = 'expression';
              ex.expressionType = 'unaryexpression';
              ex.unaryexpression = "!";
              ex.expression = e;

              return ex;
          },
          function(v) {
              var ex = {};
              ex.token = 'expression';
              ex.expressionType = 'unaryexpression';
              ex.unaryexpression = "+";
              ex.expression = v;

              return ex;
          },
          function(v) {
              var ex = {};
              ex.token = 'expression';
              ex.expressionType = 'unaryexpression';
              ex.unaryexpression = "-";
              ex.expression = v;

              return ex;
          },
          { type: "other", description: "[104] PrimaryExpression" },
          function(v) {
              var ex = {};
              ex.token = 'expression';
              ex.expressionType = 'atomic';
              ex.primaryexpression = 'rdfliteral';
              ex.value = v;

              return ex;
          },
          function(v) {
              var ex = {};
              ex.token = 'expression';
              ex.expressionType = 'atomic';
              ex.primaryexpression = 'numericliteral';
              ex.value = v;

              return ex;
          },
          function(v) {
              var ex = {};
              ex.token = 'expression';
              ex.expressionType = 'atomic';
              ex.primaryexpression = 'booleanliteral';
              ex.value = v;

              return ex;
          },
          function(v) {
              var ex = {};
              ex.token = 'expression';
              ex.expressionType = 'atomic';
              ex.primaryexpression = 'var';
              ex.value = v;

              return ex;
          },
          { type: "other", description: "[105] BrackettedExpression" },
          function(e) {
              return e;
          },
          { type: "other", description: "[106] BuiltInCall" },
          "STR",
          { type: "literal", value: "STR", description: "\"STR\"" },
          "str",
          { type: "literal", value: "str", description: "\"str\"" },
          function(e) {
              var ex = {};
              ex.token = 'expression'
              ex.expressionType = 'builtincall'
              ex.builtincall = 'str'
              ex.args = [e]

              return ex;
          },
          "LANG",
          { type: "literal", value: "LANG", description: "\"LANG\"" },
          "lang",
          { type: "literal", value: "lang", description: "\"lang\"" },
          function(e) {
              var ex = {};
              ex.token = 'expression'
              ex.expressionType = 'builtincall'
              ex.builtincall = 'lang'
              ex.args = [e]

              return ex;
          },
          "LANGMATCHES",
          { type: "literal", value: "LANGMATCHES", description: "\"LANGMATCHES\"" },
          "langmatches",
          { type: "literal", value: "langmatches", description: "\"langmatches\"" },
          function(e1, e2) {
              var ex = {};
              ex.token = 'expression'
              ex.expressionType = 'builtincall'
              ex.builtincall = 'langmatches'
              ex.args = [e1,e2]

              return ex;
          },
          "DATATYPE",
          { type: "literal", value: "DATATYPE", description: "\"DATATYPE\"" },
          "datatype",
          { type: "literal", value: "datatype", description: "\"datatype\"" },
          function(e) {
              var ex = {};
              ex.token = 'expression'
              ex.expressionType = 'builtincall'
              ex.builtincall = 'datatype'
              ex.args = [e]

              return ex;
          },
          "BOUND",
          { type: "literal", value: "BOUND", description: "\"BOUND\"" },
          "bound",
          { type: "literal", value: "bound", description: "\"bound\"" },
          function(v) {
              var ex = {};
              ex.token = 'expression'
              ex.expressionType = 'builtincall'
              ex.builtincall = 'bound'
              ex.args = [v]

              return ex;
          },
          "IRI",
          { type: "literal", value: "IRI", description: "\"IRI\"" },
          "iri",
          { type: "literal", value: "iri", description: "\"iri\"" },
          function(e) {
              var ex = {};
              ex.token = 'expression';
              ex.expressionType = 'builtincall';
              ex.builtincall = 'iri'
              ex.args = [e];

              return ex;
          },
          "URI",
          { type: "literal", value: "URI", description: "\"URI\"" },
          "uri",
          { type: "literal", value: "uri", description: "\"uri\"" },
          function(e) {
              var ex = {};
              ex.token = 'expression';
              ex.expressionType = 'builtincall';
              ex.builtincall = 'uri'
              ex.args = [e];

              return ex;
          },
          "BNODE",
          { type: "literal", value: "BNODE", description: "\"BNODE\"" },
          "bnode",
          { type: "literal", value: "bnode", description: "\"bnode\"" },
          function(arg) {
              var ex = {};
              ex.token = 'expression';
              ex.expressionType = 'builtincall';
              ex.builtincall = 'bnode';
              if(arg.length === 5) {
          	ex.args = [arg[2]];
              } else {
          	ex.args = null;
              }

              return ex;
          },
          "COALESCE",
          { type: "literal", value: "COALESCE", description: "\"COALESCE\"" },
          "coalesce",
          { type: "literal", value: "coalesce", description: "\"coalesce\"" },
          function(args) {
              var ex = {};
              ex.token = 'expression';
              ex.expressionType = 'builtincall';
              ex.builtincall = 'coalesce';
              ex.args = args;

              return ex;
          },
          "IF",
          { type: "literal", value: "IF", description: "\"IF\"" },
          "if",
          { type: "literal", value: "if", description: "\"if\"" },
          function(test, trueCond, falseCond) {
              var ex = {};
              ex.token = 'expression';
              ex.expressionType = 'builtincall';
              ex.builtincall = 'if';
              ex.args = [test,trueCond,falseCond];

              return ex;
          },
          "ISLITERAL",
          { type: "literal", value: "ISLITERAL", description: "\"ISLITERAL\"" },
          "isliteral",
          { type: "literal", value: "isliteral", description: "\"isliteral\"" },
          "isLITERAL",
          { type: "literal", value: "isLITERAL", description: "\"isLITERAL\"" },
          function(arg) {
              var ex = {};
              ex.token = 'expression';
              ex.expressionType = 'builtincall';
              ex.builtincall = 'isliteral';
              ex.args = [arg];

              return ex;
          },
          "ISBLANK",
          { type: "literal", value: "ISBLANK", description: "\"ISBLANK\"" },
          "isblank",
          { type: "literal", value: "isblank", description: "\"isblank\"" },
          "isBLANK",
          { type: "literal", value: "isBLANK", description: "\"isBLANK\"" },
          function(arg) {
              var ex = {};
              ex.token = 'expression';
              ex.expressionType = 'builtincall';
              ex.builtincall = 'isblank';
              ex.args = [arg];

              return ex;
          },
          "SAMETERM",
          { type: "literal", value: "SAMETERM", description: "\"SAMETERM\"" },
          "sameterm",
          { type: "literal", value: "sameterm", description: "\"sameterm\"" },
          function(e1, e2) {
              var ex = {};
              ex.token = 'expression';
              ex.expressionType = 'builtincall';
              ex.builtincall = 'sameterm';
              ex.args = [e1, e2];
              return ex;
          },
          "ISURI",
          { type: "literal", value: "ISURI", description: "\"ISURI\"" },
          "isuri",
          { type: "literal", value: "isuri", description: "\"isuri\"" },
          "isURI",
          { type: "literal", value: "isURI", description: "\"isURI\"" },
          "ISIRI",
          { type: "literal", value: "ISIRI", description: "\"ISIRI\"" },
          "isiri",
          { type: "literal", value: "isiri", description: "\"isiri\"" },
          "isIRI",
          { type: "literal", value: "isIRI", description: "\"isIRI\"" },
          function(arg) {
              var ex = {};
              ex.token = 'expression';
              ex.expressionType = 'builtincall';
              ex.builtincall = 'isuri';
              ex.args = [arg];

              return ex;
          },
          "custom:",
          { type: "literal", value: "custom:", description: "\"custom:\"" },
          "CUSTOM:",
          { type: "literal", value: "CUSTOM:", description: "\"CUSTOM:\"" },
          /^[a-zA-Z0-9_]/,
          { type: "class", value: "[a-zA-Z0-9_]", description: "[a-zA-Z0-9_]" },
          function(fnname, alter, finalarg) {
              var ex = {};
              ex.token = 'expression';
              ex.expressionType = 'custom';
              ex.name = fnname.join('');
              var acum = [];
              for(var i=0; i<alter.length; i++)
          	acum.push(alter[i][1]);
              acum.push(finalarg);
              ex.args = acum;

              return ex;
          },
          { type: "other", description: "[107] RegexExpression" },
          "REGEX",
          { type: "literal", value: "REGEX", description: "\"REGEX\"" },
          "regex",
          { type: "literal", value: "regex", description: "\"regex\"" },
          function(e1, e2, eo) {
              var regex = {};
          regex.token = 'expression';
          regex.expressionType = 'regex';
          regex.text = e1;
          regex.pattern = e2;
          regex.flags = eo[2];

          return regex;
          },
          { type: "other", description: "[108] ExistsFunc" },
          "EXISTS",
          { type: "literal", value: "EXISTS", description: "\"EXISTS\"" },
          "exists",
          { type: "literal", value: "exists", description: "\"exists\"" },
          function(ggp) {
              var ex = {};
              ex.token = 'expression';
              ex.expressionType = 'builtincall';
              ex.builtincall = 'exists';
              ex.args = [ggp];

              return ex;
          },
          { type: "other", description: "[109] NotExistsFunc" },
          "NOT",
          { type: "literal", value: "NOT", description: "\"NOT\"" },
          "not",
          { type: "literal", value: "not", description: "\"not\"" },
          function(ggp) {
              var ex = {};
              ex.token = 'expression';
              ex.expressionType = 'builtincall';
              ex.builtincall = 'notexists';
              ex.args = [ggp];

              return ex;
          },
          { type: "other", description: "[110] Aggregate" },
          "COUNT",
          { type: "literal", value: "COUNT", description: "\"COUNT\"" },
          "count",
          { type: "literal", value: "count", description: "\"count\"" },
          function(d, e) {
              var exp = {};
          exp.token = 'expression';
          exp.expressionType = 'aggregate';
          exp.aggregateType = 'count';
          exp.distinct = (d != "" ? 'DISTINCT' : d);
          exp.expression = e;

          return exp;

          },
          "GROUP_CONCAT",
          { type: "literal", value: "GROUP_CONCAT", description: "\"GROUP_CONCAT\"" },
          "group_concat",
          { type: "literal", value: "group_concat", description: "\"group_concat\"" },
          "SEPARATOR",
          { type: "literal", value: "SEPARATOR", description: "\"SEPARATOR\"" },
          function(d, e, s) {
              var exp = {};
              exp.token = 'expression';
              exp.expressionType = 'aggregate';
              exp.aggregateType = 'group_concat';
              exp.distinct = (d != "" ? 'DISTINCT' : d);
              exp.expression = e;
              exp.separator = s;

              return exp;

          },
          "SUM",
          { type: "literal", value: "SUM", description: "\"SUM\"" },
          "sum",
          { type: "literal", value: "sum", description: "\"sum\"" },
          function(d, e) {
              var exp = {};
          exp.token = 'expression';
          exp.expressionType = 'aggregate';
          exp.aggregateType = 'sum';
          exp.distinct = (d != "" ? 'DISTINCT' : d);
          exp.expression = e;

          return exp;

          },
          "MIN",
          { type: "literal", value: "MIN", description: "\"MIN\"" },
          "min",
          { type: "literal", value: "min", description: "\"min\"" },
          function(d, e) {
              var exp = {};
          exp.token = 'expression';
          exp.expressionType = 'aggregate';
          exp.aggregateType = 'min';
          exp.distinct = (d != "" ? 'DISTINCT' : d);
          exp.expression = e;

          return exp;

          },
          "MAX",
          { type: "literal", value: "MAX", description: "\"MAX\"" },
          "max",
          { type: "literal", value: "max", description: "\"max\"" },
          function(d, e) {
              var exp = {};
          exp.token = 'expression'
          exp.expressionType = 'aggregate'
          exp.aggregateType = 'max'
          exp.distinct = (d != "" ? 'DISTINCT' : d);
          exp.expression = e

          return exp

          },
          "AVG",
          { type: "literal", value: "AVG", description: "\"AVG\"" },
          "avg",
          { type: "literal", value: "avg", description: "\"avg\"" },
          function(d, e) {
              var exp = {};
          exp.token = 'expression'
          exp.expressionType = 'aggregate'
          exp.aggregateType = 'avg'
          exp.distinct = (d != "" ? 'DISTINCT' : d);
          exp.expression = e

          return exp

          },
          { type: "other", description: "[117] IRIrefOrFunction" },
          function(i, args) {
              var fcall = {};
          fcall.token = "expression";
          fcall.expressionType = 'irireforfunction';
          fcall.iriref = i;
          fcall.args = args.value;

          return fcall;
          },
          { type: "other", description: "[112] RDFLiteral" },
          "^^",
          { type: "literal", value: "^^", description: "\"^^\"" },
          function(s, e) {
              if(typeof(e) === "string" && e.length > 0) {
              return {token:'literal', value:s.value, lang:e.slice(1), type:null}
          } else {
              if(e != null && typeof(e) === "object") {
          	e.shift(); // remove the '^^' char
          	return {token:'literal', value:s.value, lang:null, type:e[0] }
              } else {
          	return { token:'literal', value:s.value, lang:null, type:null }
              }
          }
          },
          { type: "other", description: "[113] NumericLiteral" },
          { type: "other", description: "[114] NumericLiteralUnsigned" },
          { type: "other", description: "[115] NumericLiteralPositive" },
          { type: "other", description: "[116] NumericLiteralNegative" },
          { type: "other", description: "[117] BooleanLiteral" },
          "TRUE",
          { type: "literal", value: "TRUE", description: "\"TRUE\"" },
          "true",
          { type: "literal", value: "true", description: "\"true\"" },
          function() {
              var lit = {};
              lit.token = "literal";
              lit.lang = null;
              lit.type = "http://www.w3.org/2001/XMLSchema#boolean";
              lit.value = true;
              return lit;
          },
          "FALSE",
          { type: "literal", value: "FALSE", description: "\"FALSE\"" },
          "false",
          { type: "literal", value: "false", description: "\"false\"" },
          function() {
              var lit = {};
              lit.token = "literal";
              lit.lang = null;
              lit.type = "http://www.w3.org/2001/XMLSchema#boolean";
              lit.value = false;
              return lit;
          },
          { type: "other", description: "[118] String" },
          function(s) { return {token:'string', value:s} },
          { type: "other", description: "[119] IRIref" },
          function(iri) { return {token: 'uri', prefix:null, suffix:null, value:iri} },
          function(p) { return p },
          { type: "other", description: "[120] PrefixedName" },
          function(p) { return {token: 'uri', prefix:p[0], suffix:p[1], value:null } },
          function(p) { return {token: 'uri', prefix:p, suffix:'', value:null } },
          { type: "other", description: "[121] BlankNode" },
          function(l) { return {token:'blank', value:l}},
          function() { GlobalBlankNodeCounter++; return {token:'blank', value:'_:'+GlobalBlankNodeCounter} },
          { type: "other", description: "[122] IRI_REF" },
          /^[^<>"{}|\^`\\]/,
          { type: "class", value: "[^<>\\\"\\{\\}|^`\\\\]", description: "[^<>\\\"\\{\\}|^`\\\\]" },
          function(iri_ref) { return iri_ref.join('') },
          { type: "other", description: "[123] PNAME_NS" },
          ":",
          { type: "literal", value: ":", description: "\":\"" },
          { type: "other", description: "[124] PNAME_LN" },
          function(p, s) { return [p, s] },
          { type: "other", description: "[125] BLANK_NODE_LABEL" },
          "_:",
          { type: "literal", value: "_:", description: "\"_:\"" },
          function(l) { return l },
          { type: "other", description: "[126] VAR1" },
          function(v) { return v },
          { type: "other", description: "[127] VAR2" },
          "$",
          { type: "literal", value: "$", description: "\"$\"" },
          { type: "other", description: "[128] LANGTAG" },
          "@",
          { type: "literal", value: "@", description: "\"@\"" },
          /^[a-zA-Z]/,
          { type: "class", value: "[a-zA-Z]", description: "[a-zA-Z]" },
          /^[a-zA-Z0-9]/,
          { type: "class", value: "[a-zA-Z0-9]", description: "[a-zA-Z0-9]" },
          function(a, b) {

              if(b.length===0) {
              return ("@"+a.join('')).toLowerCase();
              } else {
              return ("@"+a.join('')+"-"+b[0][1].join('')).toLowerCase();
              }
              },
          { type: "other", description: "[129] INTEGER" },
          /^[0-9]/,
          { type: "class", value: "[0-9]", description: "[0-9]" },
          function(d) {
              var lit = {};
              lit.token = "literal";
              lit.lang = null;
              lit.type = "http://www.w3.org/2001/XMLSchema#integer";
              lit.value = flattenString(d);
              return lit;
              },
          { type: "other", description: "[130] DECIMAL" },
          function(a, b, c) {

              var lit = {};
              lit.token = "literal";
              lit.lang = null;
              lit.type = "http://www.w3.org/2001/XMLSchema#decimal";
              lit.value = flattenString([a,b,c]);
              return lit;
              },
          function(a, b) {
              var lit = {};
              lit.token = "literal";
              lit.lang = null;
              lit.type = "http://www.w3.org/2001/XMLSchema#decimal";
              lit.value = flattenString([a,b]);
              return lit;
              },
          { type: "other", description: "[131] DOUBLE" },
          function(a, b, c, e) {
              var lit = {};
              lit.token = "literal";
              lit.lang = null;
              lit.type = "http://www.w3.org/2001/XMLSchema#double";
              lit.value = flattenString([a,b,c,e]);
              return lit;
              },
          function(a, b, c) {
              var lit = {};
              lit.token = "literal";
              lit.lang = null;
              lit.type = "http://www.w3.org/2001/XMLSchema#double";
              lit.value = flattenString([a,b,c]);
              return lit;
              },
          function(a, b) {
              var lit = {};
              lit.token = "literal";
              lit.lang = null;
              lit.type = "http://www.w3.org/2001/XMLSchema#double";
              lit.value = flattenString([a,b]);
              return lit;
              },
          { type: "other", description: "[132] INTEGER_POSITIVE" },
          function(d) { d.value = "+"+d.value; return d; },
          { type: "other", description: "[133] DECIMAL_POSITIVE" },
          function(d) { d.value = "+"+d.value; return d },
          { type: "other", description: "[134] DOUBLE_POSITIVE" },
          { type: "other", description: "[135] INTEGER_NEGATIVE" },
          function(d) { d.value = "-"+d.value; return d; },
          { type: "other", description: "[136] DECIMAL_NEGATIVE" },
          { type: "other", description: "[137] DOUBLE_NEGATIVE" },
          { type: "other", description: "[138] EXPONENT" },
          /^[eE]/,
          { type: "class", value: "[eE]", description: "[eE]" },
          /^[+\-]/,
          { type: "class", value: "[+-]", description: "[+-]" },
          function(a, b, c) { return flattenString([a,b,c]) },
          { type: "other", description: "[139] STRING_LITERAL1" },
          "'",
          { type: "literal", value: "'", description: "\"'\"" },
          /^[^'\\\n\r]/,
          { type: "class", value: "[^\\u0027\\u005C\\u000A\\u000D]", description: "[^\\u0027\\u005C\\u000A\\u000D]" },
          function(content) { return flattenString(content) },
          { type: "other", description: "[140] STRING_LITERAL2" },
          "\"",
          { type: "literal", value: "\"", description: "\"\\\"\"" },
          /^[^"\\\n\r]/,
          { type: "class", value: "[^\\u0022\\u005C\\u000A\\u000D]", description: "[^\\u0022\\u005C\\u000A\\u000D]" },
          { type: "other", description: "[141] STRING_LITERAL_LONG1" },
          "'''",
          { type: "literal", value: "'''", description: "\"'''\"" },
          /^[^'\\]/,
          { type: "class", value: "[^\\'\\\\]", description: "[^\\'\\\\]" },
          { type: "other", description: "[142] STRING_LITERAL_LONG2" },
          "\"\"\"",
          { type: "literal", value: "\"\"\"", description: "\"\\\"\\\"\\\"\"" },
          /^[^"\\]/,
          { type: "class", value: "[^\\\"\\\\]", description: "[^\\\"\\\\]" },
          { type: "other", description: "[143] ECHAR" },
          "\\",
          { type: "literal", value: "\\", description: "\"\\\\\"" },
          /^[tbnrf"']/,
          { type: "class", value: "[tbnrf\\\"\\']", description: "[tbnrf\\\"\\']" },
          { type: "other", description: "[144] NIL" },
          function() {

              return  {token: "triplesnodecollection",
              triplesContext:[],
              chainSubject:[{token:'uri', value:"http://www.w3.org/1999/02/22-rdf-syntax-ns#nil"}]};
              },
          { type: "other", description: "[145] WS" },
          /^[ ]/,
          { type: "class", value: "[\\u0020]", description: "[\\u0020]" },
          /^[\t]/,
          { type: "class", value: "[\\u0009]", description: "[\\u0009]" },
          /^[\r]/,
          { type: "class", value: "[\\u000D]", description: "[\\u000D]" },
          /^[\n]/,
          { type: "class", value: "[\\u000A]", description: "[\\u000A]" },
          { type: "other", description: " COMMENT" },
          "#",
          { type: "literal", value: "#", description: "\"#\"" },
          /^[^\n\r]/,
          { type: "class", value: "[^\\u000A\\u000D]", description: "[^\\u000A\\u000D]" },
          { type: "other", description: "[146] ANON" },
          { type: "other", description: "[147] PN_CHARS_BASE" },
          /^[A-Z]/,
          { type: "class", value: "[A-Z]", description: "[A-Z]" },
          /^[a-z]/,
          { type: "class", value: "[a-z]", description: "[a-z]" },
          /^[\xC0-\xD6]/,
          { type: "class", value: "[\\u00C0-\\u00D6]", description: "[\\u00C0-\\u00D6]" },
          /^[\xD8-\xF6]/,
          { type: "class", value: "[\\u00D8-\\u00F6]", description: "[\\u00D8-\\u00F6]" },
          /^[\xF8-\u02FF]/,
          { type: "class", value: "[\\u00F8-\\u02FF]", description: "[\\u00F8-\\u02FF]" },
          /^[\u0370-\u037D]/,
          { type: "class", value: "[\\u0370-\\u037D]", description: "[\\u0370-\\u037D]" },
          /^[\u037F-\u1FFF]/,
          { type: "class", value: "[\\u037F-\\u1FFF]", description: "[\\u037F-\\u1FFF]" },
          /^[\u200C-\u200D]/,
          { type: "class", value: "[\\u200C-\\u200D]", description: "[\\u200C-\\u200D]" },
          /^[\u2070-\u218F]/,
          { type: "class", value: "[\\u2070-\\u218F]", description: "[\\u2070-\\u218F]" },
          /^[\u2C00-\u2FEF]/,
          { type: "class", value: "[\\u2C00-\\u2FEF]", description: "[\\u2C00-\\u2FEF]" },
          /^[\u3001-\uD7FF]/,
          { type: "class", value: "[\\u3001-\\uD7FF]", description: "[\\u3001-\\uD7FF]" },
          /^[\uF900-\uFDCF]/,
          { type: "class", value: "[\\uF900-\\uFDCF]", description: "[\\uF900-\\uFDCF]" },
          /^[\uFDF0-\uFFFD]/,
          { type: "class", value: "[\\uFDF0-\\uFFFD]", description: "[\\uFDF0-\\uFFFD]" },
          /^[\u1000-\uEFFF]/,
          { type: "class", value: "[\\u1000-\\uEFFF]", description: "[\\u1000-\\uEFFF]" },
          { type: "other", description: "[148] PN_CHARS_U" },
          "_",
          { type: "literal", value: "_", description: "\"_\"" },
          { type: "other", description: "[149] VARNAME" },
          /^[\xB7]/,
          { type: "class", value: "[\\u00B7]", description: "[\\u00B7]" },
          /^[\u0300-\u036F]/,
          { type: "class", value: "[\\u0300-\\u036F]", description: "[\\u0300-\\u036F]" },
          /^[\u203F-\u2040]/,
          { type: "class", value: "[\\u203F-\\u2040]", description: "[\\u203F-\\u2040]" },
          function(init, rpart) { return init+rpart.join('') },
          { type: "other", description: "[150] PN_CHARS" },
          { type: "other", description: "[151] PN_PREFIX" },
          function(base, rest) { if(rest[rest.length-1] == '.'){
              throw new Error("Wrong PN_PREFIX, cannot finish with '.'")
              } else {
              return base + rest.join('');
              }},
          { type: "other", description: "[152] PN_LOCAL" },
          function(base, rest) {
            return base + (rest||[]).join('');
          },
          { type: "other", description: "[170] PLX" },
          { type: "other", description: "[171] PERCENT" },
          "%",
          { type: "literal", value: "%", description: "\"%\"" },
          function(h) {
            return h.join("");
          },
          { type: "other", description: "[172] HEX" },
          /^[A-F]/,
          { type: "class", value: "[A-F]", description: "[A-F]" },
          /^[a-f]/,
          { type: "class", value: "[a-f]", description: "[a-f]" },
          { type: "other", description: "[173] PN_LOCAL_ESC" },
          "~",
          { type: "literal", value: "~", description: "\"~\"" },
          "&",
          { type: "literal", value: "&", description: "\"&\"" },
          function(c) {
             return "\\"+c;
          }
        ],

        peg$bytecode = [
          peg$decode(";!"),
          peg$decode(";\".# &;?"),
          peg$decode("<;#=.\" 7 "),
          peg$decode("<%;$/N#;'./ &;*.) &;+.# &;,/3$;>/*$8#:\"##\"! )(#'#(\"'#&'#=.\" 7!"),
          peg$decode("<%;%.\" &\"/I#$;\xC00#*;\xC0&/9$$;&0#*;&&/)$8#:$#\"\" )(#'#(\"'#&'#=.\" 7#"),
          peg$decode("<%$;\xC00#*;\xC0&/\\#2&\"\"6&7'.) &2(\"\"6(7)/A$$;\xC00#*;\xC0&/1$;\xA9/($8$:*$! )($'#(#'#(\"'#&'#=.\" 7%"),
          peg$decode("<%$;\xC00#*;\xC0&/v#2,\"\"6,7-.) &2.\"\"6.7//[$$;\xC00#*;\xC0&/K$;\xAA/B$$;\xC00#*;\xC0&/2$;\xA9/)$8&:0&\"\" )(&'#(%'#($'#(#'#(\"'#&'#=.\" 7+"),
          peg$decode("<%;)/\x96#$;\xC00#*;\xC0&/\x86$$;-0#*;-&/v$$;\xC00#*;\xC0&/f$;1/]$$;\xC00#*;\xC0&/M$;2/D$$;\xC00#*;\xC0&/4$;</+$8):2)$(&$\")()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#=.\" 71"),
          peg$decode("<%;)/<#;1/3$;2/*$8#:4##\"! )(#'#(\"'#&'#=.\" 73"),
          peg$decode("<%$;\xC00#*;\xC0&/\u02A0#26\"\"6677.) &28\"\"6879/\u0285$$;\xC00#*;\xC0&/\u0275$2:\"\"6:7;.) &2<\"\"6<7=.5 &2>\"\"6>7?.) &2@\"\"6@7A.\" &\"/\u023D$$;\xC00#*;\xC0&/\u022D$$%$;\xC00#*;\xC0&/<#;\x8C/3$$;\xC00#*;\xC0&/#$+#)(#'#(\"'#&'#.\xCF &%$;\xC00#*;\xC0&/\xBE#2B\"\"6B7C/\xAF$$;\xC00#*;\xC0&/\x9F$;\x8E/\x96$$;\xC00#*;\xC0&/\x86$2D\"\"6D7E.) &2F\"\"6F7G/k$$;\xC00#*;\xC0&/[$;\x8C/R$$;\xC00#*;\xC0&/B$2H\"\"6H7I/3$$;\xC00#*;\xC0&/#$++)(+'#(*'#()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#/\u0102#0\xFF*%$;\xC00#*;\xC0&/<#;\x8C/3$$;\xC00#*;\xC0&/#$+#)(#'#(\"'#&'#.\xCF &%$;\xC00#*;\xC0&/\xBE#2B\"\"6B7C/\xAF$$;\xC00#*;\xC0&/\x9F$;\x8E/\x96$$;\xC00#*;\xC0&/\x86$2D\"\"6D7E.) &2F\"\"6F7G/k$$;\xC00#*;\xC0&/[$;\x8C/R$$;\xC00#*;\xC0&/B$2H\"\"6H7I/3$$;\xC00#*;\xC0&/#$++)(+'#(*'#()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#&&&#.S &%$;\xC00#*;\xC0&/B#2J\"\"6J7K/3$$;\xC00#*;\xC0&/#$+#)(#'#(\"'#&'#/)$8&:L&\"\" )(&'#(%'#($'#(#'#(\"'#&'#=.\" 75"),
          peg$decode("<%$;\xC00#*;\xC0&/\xB1#2N\"\"6N7O.) &2P\"\"6P7Q/\x96$$;\xC00#*;\xC0&/\x86$;h/}$$;\xC00#*;\xC0&/m$$;-0#*;-&/]$$;\xC00#*;\xC0&/M$;1/D$$;\xC00#*;\xC0&/4$;2/+$8*:R*$&$\" )(*'#()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.\u0116 &%$;\xC00#*;\xC0&/\u0105#2N\"\"6N7O.) &2P\"\"6P7Q/\xEA$$;\xC00#*;\xC0&/\xDA$$;-0#*;-&/\xCA$$;\xC00#*;\xC0&/\xBA$2S\"\"6S7T.) &2U\"\"6U7V/\x9F$$;\xC00#*;\xC0&/\x8F$2W\"\"6W7X/\x80$$;\xC00#*;\xC0&/p$;S.\" &\"/b$$;\xC00#*;\xC0&/R$2Y\"\"6Y7Z/C$$;\xC00#*;\xC0&/3$;2/*$8.:[.#*$ )(.'#(-'#(,'#(+'#(*'#()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#=.\" 7M"),
          peg$decode("<%2]\"\"6]7^/l#$;\x8B/&#0#*;\x8B&&&#.) &2J\"\"6J7K/J$$;-0#*;-&/:$;1.\" &\"/,$;2/#$+%)(%'#($'#(#'#(\"'#&'#=.\" 7\\"),
          peg$decode("<%$;\xC00#*;\xC0&/}#2`\"\"6`7a.) &2b\"\"6b7c/b$$;\xC00#*;\xC0&/R$$;-0#*;-&/B$$;\xC00#*;\xC0&/2$;1/)$8&:d&\"\" )(&'#(%'#($'#(#'#(\"'#&'#=.\" 7_"),
          peg$decode("<%2f\"\"6f7g.) &2h\"\"6h7i/W#$;\xC00#*;\xC0&/G$;..# &;//8$$;\xC00#*;\xC0&/($8$:j$!!)($'#(#'#(\"'#&'#=.\" 7e"),
          peg$decode("<%$;\xC00#*;\xC0&/1#;0/($8\":l\"! )(\"'#&'#=.\" 7k"),
          peg$decode("<%2n\"\"6n7o.) &2p\"\"6p7q/A#$;\xC00#*;\xC0&/1$;0/($8#:r#! )(#'#(\"'#&'#=.\" 7m"),
          peg$decode("<;\xA6=.\" 7s"),
          peg$decode("<%2S\"\"6S7T.) &2U\"\"6U7V.\" &\"/Q#$;\xC00#*;\xC0&/A$;T/8$$;\xC00#*;\xC0&/($8$:u$!!)($'#(#'#(\"'#&'#=.\" 7t"),
          peg$decode("<%;3.\" &\"/T#;5.\" &\"/F$;7.\" &\"/8$;9.\" &\"/*$8$:w$##! )($'#(#'#(\"'#&'#=.\" 7v"),
          peg$decode("<%2y\"\"6y7z.) &2{\"\"6{7|/y#$;\xC00#*;\xC0&/i$2}\"\"6}7~.) &2\"\"67\x80/N$$;\xC00#*;\xC0&/>$$;4/&#0#*;4&&&#/($8%:\x81%! )(%'#($'#(#'#(\"'#&'#=.\" 7x"),
          peg$decode("<%$;\xC00#*;\xC0&/A#;\x99/8$$;\xC00#*;\xC0&/($8#:\x83#!!)(#'#(\"'#&'#.\u014E &%$;\xC00#*;\xC0&/A#;e/8$$;\xC00#*;\xC0&/($8#:\x84#!!)(#'#(\"'#&'#.\u0119 &%$;\xC00#*;\xC0&/\xD3#2B\"\"6B7C/\xC4$$;\xC00#*;\xC0&/\xB4$;\x8E/\xAB$$;\xC00#*;\xC0&/\x9B$%2D\"\"6D7E.) &2F\"\"6F7G/<#$;\xC00#*;\xC0&/,$;\x8C/#$+#)(#'#(\"'#&'#.\" &\"/X$$;\xC00#*;\xC0&/H$2H\"\"6H7I/9$$;\xC00#*;\xC0&/)$8):\x85)\"%#)()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.R &%$;\xC00#*;\xC0&/A#;\x8C/8$$;\xC00#*;\xC0&/($8#:\x86#!!)(#'#(\"'#&'#=.\" 7\x82"),
          peg$decode("<%2\x88\"\"6\x887\x89/9#$;6/&#0#*;6&&&#/#$+\")(\"'#&'#=.\" 7\x87"),
          peg$decode("<;_=.\" 7\x8A"),
          peg$decode("<%2\x8C\"\"6\x8C7\x8D.) &2\x8E\"\"6\x8E7\x8F/\x89#$;\xC00#*;\xC0&/y$2}\"\"6}7~.) &2\"\"67\x80/^$$;\xC00#*;\xC0&/N$$;8/&#0#*;8&&&#/8$$;\xC00#*;\xC0&/($8&:\x90&!!)(&'#(%'#($'#(#'#(\"'#&'#=.\" 7\x8B"),
          peg$decode("<%2\x92\"\"6\x927\x93.A &2\x94\"\"6\x947\x95.5 &2\x96\"\"6\x967\x97.) &2\x98\"\"6\x987\x99/R#$;\xC00#*;\xC0&/B$;\x98/9$$;\xC00#*;\xC0&/)$8$:\x9A$\"#!)($'#(#'#(\"'#&'#.H &%;_.# &;\x8C/8#$;\xC00#*;\xC0&/($8\":\x9B\"!!)(\"'#&'#=.\" 7\x91"),
          peg$decode("<%%;:/1#;;.\" &\"/#$+\")(\"'#&'#.; &%;;/1#;:.\" &\"/#$+\")(\"'#&'#/' 8!:\x9D!! )=.\" 7\x9C"),
          peg$decode("<%2\x9F\"\"6\x9F7\xA0.) &2\xA1\"\"6\xA17\xA2/Q#$;\xC00#*;\xC0&/A$;\xB0/8$$;\xC00#*;\xC0&/($8$:\xA3$!!)($'#(#'#(\"'#&'#=.\" 7\x9E"),
          peg$decode("<%2\xA5\"\"6\xA57\xA6.) &2\xA7\"\"6\xA77\xA8/Q#$;\xC00#*;\xC0&/A$;\xB0/8$$;\xC00#*;\xC0&/($8$:\xA9$!!)($'#(#'#(\"'#&'#=.\" 7\xA4"),
          peg$decode("<%2\xAB\"\"6\xAB7\xAC/\xD7#$;\x8C0#*;\x8C&/\xC7$2W\"\"6W7X/\xB8$$%2B\"\"6B7C/H#$;=/&#0#*;=&&&#/2$2H\"\"6H7I/#$+#)(#'#(\"'#&'#.# &;\xBF0^*%2B\"\"6B7C/H#$;=/&#0#*;=&&&#/2$2H\"\"6H7I/#$+#)(#'#(\"'#&'#.# &;\xBF&/2$2Y\"\"6Y7Z/#$+%)(%'#($'#(#'#(\"'#&'#.\" &\"=.\" 7\xAA"),
          peg$decode("<;\xA6.; &;\x9F.5 &;\xA0./ &;\xA4.) &2\xAE\"\"6\xAE7\xAF=.\" 7\xAD"),
          peg$decode("<%%2\xB1\"\"6\xB17\xB2.) &2\xB3\"\"6\xB37\xB4/,#;a/#$+\")(\"'#&'#.\" &\"/' 8!:\xB5!! )=.\" 7\xB0"),
          peg$decode("<;@=.\" 7\xB6"),
          peg$decode("<%;$/\x8F#$;\xC00#*;\xC0&/$;A/v$%$;\xC00#*;\xC0&/P#2\xB8\"\"6\xB87\xB9/A$$;\xC00#*;\xC0&/1$;@.\" &\"/#$+$)($'#(#'#(\"'#&'#.\" &\"/*$8$:\xBA$##! )($'#(#'#(\"'#&'#=.\" 7\xB7"),
          peg$decode("<;B.G &;C.A &;D.; &;E.5 &;F./ &;G.) &;H.# &;I=.\" 7\xBB"),
          peg$decode("<%2\xBD\"\"6\xBD7\xBE.) &2\xBF\"\"6\xBF7\xC0/\x95#$;\xC00#*;\xC0&/\x85$;\xA6/|$$;\xC00#*;\xC0&/l$%2\xC1\"\"6\xC17\xC2.) &2\xC3\"\"6\xC37\xC4/<#$;\xC00#*;\xC0&/,$;M/#$+#)(#'#(\"'#&'#.\" &\"/)$8%:\xC5%\"\" )(%'#($'#(#'#(\"'#&'#=.\" 7\xBC"),
          peg$decode("<%2\xC7\"\"6\xC77\xC8.) &2\xC9\"\"6\xC97\xCA/q#$;\xC00#*;\xC0&/a$2\xCB\"\"6\xCB7\xCC.) &2\xCD\"\"6\xCD7\xCE.\" &\"/A$$;\xC00#*;\xC0&/1$;N/($8%:\xCF%! )(%'#($'#(#'#(\"'#&'#=.\" 7\xC6"),
          peg$decode("<%2\xD1\"\"6\xD17\xD2.) &2\xD3\"\"6\xD37\xD4/q#$;\xC00#*;\xC0&/a$2\xCB\"\"6\xCB7\xCC.) &2\xCD\"\"6\xCD7\xCE.\" &\"/A$$;\xC00#*;\xC0&/1$;N/($8%:\xD5%! )(%'#($'#(#'#(\"'#&'#=.\" 7\xD0"),
          peg$decode("<%2\xD7\"\"6\xD77\xD8.) &2\xD9\"\"6\xD97\xDA/q#$;\xC00#*;\xC0&/a$2\xCB\"\"6\xCB7\xCC.) &2\xCD\"\"6\xCD7\xCE.\" &\"/A$$;\xC00#*;\xC0&/1$;M/($8%:\xDB%! )(%'#($'#(#'#(\"'#&'#=.\" 7\xD6"),
          peg$decode("<%2\xDD\"\"6\xDD7\xDE.) &2\xDF\"\"6\xDF7\xE0/l#$;\xC00#*;\xC0&/\\$2\xE1\"\"6\xE17\xE2.) &2\xE3\"\"6\xE37\xE4/A$$;\xC00#*;\xC0&/1$;P/($8%:\xE5%! )(%'#($'#(#'#(\"'#&'#=.\" 7\xDC"),
          peg$decode("<%2\xE7\"\"6\xE77\xE8.) &2\xE9\"\"6\xE97\xEA/\\#$;\xC00#*;\xC0&/L$2\xE1\"\"6\xE17\xE2.) &2\xE3\"\"6\xE37\xE4/1$;P/($8$:\xEB$! )($'#(#'#(\"'#&'#=.\" 7\xE6"),
          peg$decode("<%2\xE7\"\"6\xE77\xE8.) &2\xE9\"\"6\xE97\xEA/l#$;\xC00#*;\xC0&/\\$2S\"\"6S7T.) &2U\"\"6U7V/A$$;\xC00#*;\xC0&/1$;T/($8%:\xED%! )(%'#($'#(#'#(\"'#&'#=.\" 7\xEC"),
          peg$decode("<%%2\xEF\"\"6\xEF7\xF0.) &2\xF1\"\"6\xF17\xF2/<#$;\xC00#*;\xC0&/,$;\xA6/#$+#)(#'#(\"'#&'#.\" &\"/\xE6#$;\xC00#*;\xC0&/\xD6$%;J/A#$;\xC00#*;\xC0&/1$;K.\" &\"/#$+#)(#'#(\"'#&'#.# &;K/\x9F$$;\xC00#*;\xC0&/\x8F$$;L0#*;L&/$$;\xC00#*;\xC0&/o$2S\"\"6S7T.) &2U\"\"6U7V/T$$;\xC00#*;\xC0&/D$;T/;$$;\xC00#*;\xC0&/+$8*:\xF3*$)'%!)(*'#()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#=.\" 7\xEE"),
          peg$decode("<%2\xE7\"\"6\xE77\xE8.) &2\xE9\"\"6\xE97\xEA/1#;O/($8\":\xF5\"! )(\"'#&'#=.\" 7\xF4"),
          peg$decode("<%2\xDD\"\"6\xDD7\xDE.) &2\xDF\"\"6\xDF7\xE0/1#;O/($8\":\xF5\"! )(\"'#&'#=.\" 7\xF6"),
          peg$decode("<%$;\xC00#*;\xC0&/\x97#2\xF8\"\"6\xF87\xF9.) &2\xFA\"\"6\xFA7\xFB/|$$;\xC00#*;\xC0&/l$;\xA6.X &%2n\"\"6n7o.) &2p\"\"6p7q/<#$;\xC00#*;\xC0&/,$;\xA6/#$+#)(#'#(\"'#&'#/($8$:\xFC$! )($'#(#'#(\"'#&'#=.\" 7\xF7"),
          peg$decode("<%2\xFE\"\"6\xFE7\xFF.) &2\u0100\"\"6\u01007\u0101/A#$;\xC00#*;\xC0&/1$;\xA6/($8#:\u0102#! )(#'#(\"'#&'#=.\" 7\xFD"),
          peg$decode("<%;M/' 8!:u!! ).\x86 &%2\u0104\"\"6\u01047\u0105.) &2\u0106\"\"6\u01067\u0107/& 8!:\u0108! ).c &%2n\"\"6n7o.) &2p\"\"6p7q/& 8!:\u0109! ).@ &%2\u010A\"\"6\u010A7\u010B.) &2\u010C\"\"6\u010C7\u010D/& 8!:\u010E! )=.\" 7\u0103"),
          peg$decode("<%$;\xC00#*;\xC0&/#2W\"\"6W7X/p$$;\xC00#*;\xC0&/`$;Q/W$$;\xC00#*;\xC0&/G$2Y\"\"6Y7Z/8$$;\xC00#*;\xC0&/($8':\u0110'!#)(''#(&'#(%'#($'#(#'#(\"'#&'#=.\" 7\u010F"),
          peg$decode("<%$;\xC00#*;\xC0&/#2W\"\"6W7X/p$$;\xC00#*;\xC0&/`$;Q/W$$;\xC00#*;\xC0&/G$2Y\"\"6Y7Z/8$$;\xC00#*;\xC0&/($8':\u0110'!#)(''#(&'#(%'#($'#(#'#(\"'#&'#=.\" 7\u0111"),
          peg$decode("<%;S.\" &\"/\x91#$%;R/E#2\u0113\"\"6\u01137\u0114.\" &\"/1$;S.\" &\"/#$+#)(#'#(\"'#&'#0O*%;R/E#2\u0113\"\"6\u01137\u0114.\" &\"/1$;S.\" &\"/#$+#)(#'#(\"'#&'#&/)$8\":\u0115\"\"! )(\"'#&'#=.\" 7\u0112"),
          peg$decode("<%$;\xC00#*;\xC0&/\xC9#2\xFE\"\"6\xFE7\xFF.) &2\u0100\"\"6\u01007\u0101/\xAE$$;\xC00#*;\xC0&/\x9E$;\x8B/\x95$$;\xC00#*;\xC0&/\x85$2W\"\"6W7X/v$$;\xC00#*;\xC0&/f$;S.\" &\"/X$$;\xC00#*;\xC0&/H$2Y\"\"6Y7Z/9$$;\xC00#*;\xC0&/)$8+:\u0117+\"'#)(+'#(*'#()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#=.\" 7\u0116"),
          peg$decode("<%;j/u#%$;\xC00#*;\xC0&/P#2\u0113\"\"6\u01137\u0114/A$$;\xC00#*;\xC0&/1$;S.\" &\"/#$+$)($'#(#'#(\"'#&'#.\" &\"/)$8\":\u0119\"\"! )(\"'#&'#=.\" 7\u0118"),
          peg$decode("<%2W\"\"6W7X/`#$;\xC00#*;\xC0&/P$;(/G$$;\xC00#*;\xC0&/7$2Y\"\"6Y7Z/($8%:\u011B%!\")(%'#($'#(#'#(\"'#&'#.p &%2W\"\"6W7X/`#$;\xC00#*;\xC0&/P$;U/G$$;\xC00#*;\xC0&/7$2Y\"\"6Y7Z/($8%:\u011B%!\")(%'#($'#(#'#(\"'#&'#=.\" 7\u011A"),
          peg$decode("<%;V.\" &\"/\xE1#$;\xC00#*;\xC0&/\xD1$$%;W/e#$;\xC00#*;\xC0&/U$2\u0113\"\"6\u01137\u0114.\" &\"/A$$;\xC00#*;\xC0&/1$;V.\" &\"/#$+%)(%'#($'#(#'#(\"'#&'#0o*%;W/e#$;\xC00#*;\xC0&/U$2\u0113\"\"6\u01137\u0114.\" &\"/A$$;\xC00#*;\xC0&/1$;V.\" &\"/#$+%)(%'#($'#(#'#(\"'#&'#&/)$8#:\u011D#\"\" )(#'#(\"'#&'#=.\" 7\u011C"),
          peg$decode("<%;s/e#%$;\xC00#*;\xC0&/@#2\u0113\"\"6\u01137\u0114/1$;V.\" &\"/#$+#)(#'#(\"'#&'#.\" &\"/)$8\":\u011F\"\"! )(\"'#&'#=.\" 7\u011E"),
          peg$decode("<;\\.G &;X.A &;[.; &;Y.5 &;Z./ &;].) &;^.# &;`=.\" 7\u0120"),
          peg$decode("<%$;\xC00#*;\xC0&/\\#2\u0122\"\"6\u01227\u0123.) &2\u0124\"\"6\u01247\u0125/A$$;\xC00#*;\xC0&/1$;T/($8$:\u0126$! )($'#(#'#(\"'#&'#=.\" 7\u0121"),
          peg$decode("<%$;\xC00#*;\xC0&/v#2\xFE\"\"6\xFE7\xFF.) &2\u0100\"\"6\u01007\u0101/[$$;\xC00#*;\xC0&/K$;\x8B/B$$;\xC00#*;\xC0&/2$;T/)$8&:\u0128&\"\" )(&'#(%'#($'#(#'#(\"'#&'#=.\" 7\u0127"),
          peg$decode("<%2\u012A\"\"6\u012A7\u012B/;#;\x8B/2$;T/)$8#:\u012C#\"! )(#'#(\"'#&'#=.\" 7\u0129"),
          peg$decode("<%2\u012E\"\"6\u012E7\u012F.) &2\u0130\"\"6\u01307\u0131/A#$;\xC00#*;\xC0&/1$;T/($8#:\u0132#! )(#'#(\"'#&'#=.\" 7\u012D"),
          peg$decode("<%;T/\xC3#$%$;\xC00#*;\xC0&/W#2\u0134\"\"6\u01347\u0135.) &2\u0136\"\"6\u01367\u0137/<$$;\xC00#*;\xC0&/,$;T/#$+$)($'#(#'#(\"'#&'#0h*%$;\xC00#*;\xC0&/W#2\u0134\"\"6\u01347\u0135.) &2\u0136\"\"6\u01367\u0137/<$$;\xC00#*;\xC0&/,$;T/#$+$)($'#(#'#(\"'#&'#&/)$8\":\u0138\"\"! )(\"'#&'#=.\" 7\u0133"),
          peg$decode("<%$;\xC00#*;\xC0&/\\#2\u013A\"\"6\u013A7\u013B.) &2\u013C\"\"6\u013C7\u013D/A$$;\xC00#*;\xC0&/1$;_/($8$:\u013E$! )($'#(#'#(\"'#&'#=.\" 7\u0139"),
          peg$decode("<%$;\xC00#*;\xC0&/\xDF#2\u0140\"\"6\u01407\u0141.) &2\u0142\"\"6\u01427\u0143/\xC4$$;\xC00#*;\xC0&/\xB4$2B\"\"6B7C/\xA5$$;\xC00#*;\xC0&/\x95$;\x8E/\x8C$$;\xC00#*;\xC0&/|$2F\"\"6F7G.) &2D\"\"6D7E/a$$;\xC00#*;\xC0&/Q$;\x8C/H$$;\xC00#*;\xC0&/8$2H\"\"6H7I/)$8,:\u0144,\"&\")(,'#(+'#(*'#()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#=.\" 7\u013F"),
          peg$decode("<;\x98.) &;\x99.# &;e=.\" 7\u0145"),
          peg$decode("<%$;\xC00#*;\xC0&/\\#2\xB1\"\"6\xB17\xB2.) &2\xB3\"\"6\xB37\xB4/A$$;\xC00#*;\xC0&/1$;a/($8$:\u0147$! )($'#(#'#(\"'#&'#=.\" 7\u0146"),
          peg$decode("<;b.# &;c=.\" 7\u0148"),
          peg$decode("<%$;\xC00#*;\xC0&/\x80#;\x8C/w$$;\xC00#*;\xC0&/g$2W\"\"6W7X/X$$;\xC00#*;\xC0&/H$$;d0#*;d&/8$2Y\"\"6Y7Z/)$8':\u014A'\"%!)(''#(&'#(%'#($'#(#'#(\"'#&'#=.\" 7\u0149"),
          peg$decode("<%$;\xC00#*;\xC0&/\u01CF#;\xBF.r &%2B\"\"6B7C/b#$;\xC00#*;\xC0&/R$$;\x8C0#*;\x8C&/B$$;\xC00#*;\xC0&/2$2H\"\"6H7I/#$+%)(%'#($'#(#'#(\"'#&'#/\u0171$$;\xC00#*;\xC0&/\u0161$2W\"\"6W7X/\u0152$$;\xC00#*;\xC0&/\u0142$$%$;\xC00#*;\xC0&/\x81#2B\"\"6B7C/r$$;\xC00#*;\xC0&/b$$;d0#*;d&/R$$;\xC00#*;\xC0&/B$2H\"\"6H7I/3$$;\xC00#*;\xC0&/#$+')(''#(&'#(%'#($'#(#'#(\"'#&'#.# &;\xBF0\x98*%$;\xC00#*;\xC0&/\x81#2B\"\"6B7C/r$$;\xC00#*;\xC0&/b$$;d0#*;d&/R$$;\xC00#*;\xC0&/B$2H\"\"6H7I/3$$;\xC00#*;\xC0&/#$+')(''#(&'#(%'#($'#(#'#(\"'#&'#.# &;\xBF&/H$$;\xC00#*;\xC0&/8$2Y\"\"6Y7Z/)$8(:\u014C(\"&\")(('#(''#(&'#(%'#($'#(#'#(\"'#&'#=.\" 7\u014B"),
          peg$decode("<%$;\xC00#*;\xC0&/_#;\xA9.; &;\x9F.5 &;\xA0./ &;\xA4.) &2\xAE\"\"6\xAE7\xAF/8$$;\xC00#*;\xC0&/($8#:\x86#!!)(#'#(\"'#&'#=.\" 7\u014D"),
          peg$decode("<%;\xA6/2#;f/)$8\":\u014F\"\"! )(\"'#&'#=.\" 7\u014E"),
          peg$decode("<%;\xBF/& 8!:\u0151! ).\xB4 &%2B\"\"6B7C/\xA4#2:\"\"6:7;.) &2<\"\"6<7=.\" &\"/\x84$;\x8E/{$$%2\u0152\"\"6\u01527\u0153/,#;\x8E/#$+\")(\"'#&'#0<*%2\u0152\"\"6\u01527\u0153/,#;\x8E/#$+\")(\"'#&'#&/9$2H\"\"6H7I/*$8%:\u0154%##\"!)(%'#($'#(#'#(\"'#&'#=.\" 7\u0150"),
          peg$decode("<%;\xBF/& 8!:\u0151! ).\xA5 &%2B\"\"6B7C/\x95#;\xA6.# &;\x8E/\x86$$%2\u0152\"\"6\u01527\u0153/2#;\xA6.# &;\x8E/#$+\")(\"'#&'#0B*%2\u0152\"\"6\u01527\u0153/2#;\xA6.# &;\x8E/#$+\")(\"'#&'#&/8$2H\"\"6H7I/)$8$:\u0156$\"\"!)($'#(#'#(\"'#&'#=.\" 7\u0155"),
          peg$decode("<%2W\"\"6W7X/e#$;\xC00#*;\xC0&/U$;i.\" &\"/G$$;\xC00#*;\xC0&/7$2Y\"\"6Y7Z/($8%:\u0158%!\")(%'#($'#(#'#(\"'#&'#=.\" 7\u0157"),
          peg$decode("<%;j/u#%$;\xC00#*;\xC0&/P#2\u0113\"\"6\u01137\u0114/A$$;\xC00#*;\xC0&/1$;i.\" &\"/#$+$)($'#(#'#(\"'#&'#.\" &\"/)$8\":\u015A\"\"! )(\"'#&'#=.\" 7\u0159"),
          peg$decode("<%$;\xC00#*;\xC0&/K#;\x8A/B$$;\xC00#*;\xC0&/2$;l/)$8$:\u015C$\"\" )($'#(#'#(\"'#&'#.\\ &%$;\xC00#*;\xC0&/K#;\x83/B$$;\xC00#*;\xC0&/2$;m/)$8$:\u015D$\"\" )($'#(#'#(\"'#&'#=.\" 7\u015B"),
          peg$decode("<%;v.# &;w/\u0121#$;\xC00#*;\xC0&/\u0111$;n/\u0108$$%$;\xC00#*;\xC0&/y#2\xB8\"\"6\xB87\xB9/j$$;\xC00#*;\xC0&/Z$%;v.# &;w/<#$;\xC00#*;\xC0&/,$;o/#$+#)(#'#(\"'#&'#.\" &\"/#$+$)($'#(#'#(\"'#&'#0\x8A*%$;\xC00#*;\xC0&/y#2\xB8\"\"6\xB87\xB9/j$$;\xC00#*;\xC0&/Z$%;v.# &;w/<#$;\xC00#*;\xC0&/,$;o/#$+#)(#'#(\"'#&'#.\" &\"/#$+$)($'#(#'#(\"'#&'#&/*$8$:\u015F$##! )($'#(#'#(\"'#&'#=.\" 7\u015E"),
          peg$decode("<%;r/\u0115#$;\xC00#*;\xC0&/\u0105$;o/\xFC$$%$;\xC00#*;\xC0&/s#2\xB8\"\"6\xB87\xB9/d$$;\xC00#*;\xC0&/T$%;r/<#$;\xC00#*;\xC0&/,$;o/#$+#)(#'#(\"'#&'#.\" &\"/#$+$)($'#(#'#(\"'#&'#0\x84*%$;\xC00#*;\xC0&/s#2\xB8\"\"6\xB87\xB9/d$$;\xC00#*;\xC0&/T$%;r/<#$;\xC00#*;\xC0&/,$;o/#$+#)(#'#(\"'#&'#.\" &\"/#$+$)($'#(#'#(\"'#&'#&/*$8$:\u0161$##! )($'#(#'#(\"'#&'#=.\" 7\u0160"),
          peg$decode("<;l.\" &\"=.\" 7\u0162"),
          peg$decode("<%;p/\x9B#$;\xC00#*;\xC0&/\x8B$$%2\u0152\"\"6\u01527\u0153/<#$;\xC00#*;\xC0&/,$;p/#$+#)(#'#(\"'#&'#0L*%2\u0152\"\"6\u01527\u0153/<#$;\xC00#*;\xC0&/,$;p/#$+#)(#'#(\"'#&'#&/)$8#:\u0164#\"\" )(#'#(\"'#&'#=.\" 7\u0163"),
          peg$decode("<%;q/\x9B#$;\xC00#*;\xC0&/\x8B$$%2\u0152\"\"6\u01527\u0153/<#$;\xC00#*;\xC0&/,$;q/#$+#)(#'#(\"'#&'#0L*%2\u0152\"\"6\u01527\u0153/<#$;\xC00#*;\xC0&/,$;q/#$+#)(#'#(\"'#&'#&/)$8#:\u0166#\"\" )(#'#(\"'#&'#=.\" 7\u0165"),
          peg$decode("<;\x88=.\" 7\u0167"),
          peg$decode("<;\x89=.\" 7\u0168"),
          peg$decode("<;\x8B.4 &%2\u016A\"\"6\u016A7\u016B/& 8!:\u016C! )=.\" 7\u0169"),
          peg$decode("<%$;\xC00#*;\xC0&/K#;\x8A/B$$;\xC00#*;\xC0&/2$;t/)$8$:\u016E$\"\" )($'#(#'#(\"'#&'#.\\ &%$;\xC00#*;\xC0&/K#;\x82/B$$;\xC00#*;\xC0&/2$;u/)$8$:\u016F$\"\" )($'#(#'#(\"'#&'#=.\" 7\u016D"),
          peg$decode("<%;v.# &;w/\u0101#$;\xC00#*;\xC0&/\xF1$;n/\xE8$$%$;\xC00#*;\xC0&/i#2\xB8\"\"6\xB87\xB9/Z$$;\xC00#*;\xC0&/J$%;v.# &;w/,#;o/#$+\")(\"'#&'#.\" &\"/#$+$)($'#(#'#(\"'#&'#0z*%$;\xC00#*;\xC0&/i#2\xB8\"\"6\xB87\xB9/Z$$;\xC00#*;\xC0&/J$%;v.# &;w/,#;o/#$+\")(\"'#&'#.\" &\"/#$+$)($'#(#'#(\"'#&'#&/*$8$:\u0171$##! )($'#(#'#(\"'#&'#=.\" 7\u0170"),
          peg$decode("<;k.\" &\"=.\" 7\u0172"),
          peg$decode("<%;x/' 8!:\u0174!! )=.\" 7\u0173"),
          peg$decode("<;\x8C=.\" 7\u0175"),
          peg$decode("<;y=.\" 7\u0176"),
          peg$decode("<%;z/k#$%2\u0178\"\"6\u01787\u0179/,#;z/#$+\")(\"'#&'#0<*%2\u0178\"\"6\u01787\u0179/,#;z/#$+\")(\"'#&'#&/)$8\":\u017A\"\"! )(\"'#&'#=.\" 7\u0177"),
          peg$decode("<%;|/k#$%2\u017C\"\"6\u017C7\u017D/,#;|/#$+\")(\"'#&'#0<*%2\u017C\"\"6\u017C7\u017D/,#;|/#$+\")(\"'#&'#&/)$8\":\u017E\"\"! )(\"'#&'#=.\" 7\u017B"),
          peg$decode("<%;~/7#;}.\" &\"/)$8\":\u0180\"\"! )(\"'#&'#=.\" 7\u017F"),
          peg$decode("<;{.A &%2\u0182\"\"6\u01827\u0183/1#;{/($8\":\u0184\"! )(\"'#&'#=.\" 7\u0181"),
          peg$decode("<2J\"\"6J7K.\xDF &2\u0186\"\"6\u01867\u0187.\xD3 &2\u0188\"\"6\u01887\u0189.\xC7 &%2W\"\"6W7X/\xB7#%;\x81/v#%2\u0152\"\"6\u01527\u0153/Q#2Y\"\"6Y7Z.< &%;\x81/2#2Y\"\"6Y7Z/#$+\")(\"'#&'#/#$+\")(\"'#&'#.) &2Y\"\"6Y7Z/#$+\")(\"'#&'#.K &%2\u0152\"\"6\u01527\u0153/;#;\x81/2$2Y\"\"6Y7Z/#$+#)(#'#(\"'#&'#/#$+\")(\"'#&'#=.\" 7\u0185"),
          peg$decode("<;\xA6.\x86 &%2\u016A\"\"6\u016A7\u016B/& 8!:\u016C! ).o &%2\u018B\"\"6\u018B7\u018C/,#;/#$+\")(\"'#&'#.P &%2B\"\"6B7C/@#;x/7$2H\"\"6H7I/($8#:\u011B#!!)(#'#(\"'#&'#=.\" 7\u018A"),
          peg$decode(";\x80.\x9C &%2B\"\"6B7C/\x8C#%;\x80/e#$%2\u0178\"\"6\u01787\u0179/,#;\x80/#$+\")(\"'#&'#0<*%2\u0178\"\"6\u01787\u0179/,#;\x80/#$+\")(\"'#&'#&/#$+\")(\"'#&'#.\" &\"/2$2H\"\"6H7I/#$+#)(#'#(\"'#&'#"),
          peg$decode("<;\xA6.T &2\u016A\"\"6\u016A7\u016B.H &%2\u0182\"\"6\u01827\u0183/8#;\xA6.) &2\u016A\"\"6\u016A7\u016B/#$+\")(\"'#&'#=.\" 7\u018D"),
          peg$decode("<;\xB0=.\" 7\u018E"),
          peg$decode("<%;\x86/' 8!:\u0190!! ).# &;\x84=.\" 7\u018F"),
          peg$decode("<%;\x87/' 8!:\u0192!! ).# &;\x85=.\" 7\u0191"),
          peg$decode("<%$;\xC00#*;\xC0&/o#2\u0194\"\"6\u01947\u0195/`$$;\xC00#*;\xC0&/P$;t/G$2\u0196\"\"6\u01967\u0197/8$$;\xC00#*;\xC0&/($8&:\u0198&!\")(&'#(%'#($'#(#'#(\"'#&'#=.\" 7\u0193"),
          peg$decode("<%$;\xC00#*;\xC0&/#2\u0194\"\"6\u01947\u0195/p$$;\xC00#*;\xC0&/`$;l/W$$;\xC00#*;\xC0&/G$2\u0196\"\"6\u01967\u0197/8$$;\xC00#*;\xC0&/($8':\u019A'!#)(''#(&'#(%'#($'#(#'#(\"'#&'#=.\" 7\u0199"),
          peg$decode("<%$;\xC00#*;\xC0&/\x8C#2B\"\"6B7C/}$$;\xC00#*;\xC0&/m$$;\x88/&#0#*;\x88&&&#/W$$;\xC00#*;\xC0&/G$2H\"\"6H7I/8$$;\xC00#*;\xC0&/($8':\u019C'!#)(''#(&'#(%'#($'#(#'#(\"'#&'#=.\" 7\u019B"),
          peg$decode("<%$;\xC00#*;\xC0&/\x8C#2B\"\"6B7C/}$$;\xC00#*;\xC0&/m$$;\x89/&#0#*;\x89&&&#/W$$;\xC00#*;\xC0&/G$2H\"\"6H7I/8$$;\xC00#*;\xC0&/($8':\u019C'!#)(''#(&'#(%'#($'#(#'#(\"'#&'#=.\" 7\u019D"),
          peg$decode("<%%$;\xC00#*;\xC0&/<#;\x8A/3$$;\xC00#*;\xC0&/#$+#)(#'#(\"'#&'#.M &%$;\xC00#*;\xC0&/<#;\x82/3$$;\xC00#*;\xC0&/#$+#)(#'#(\"'#&'#/' 8!:\u019F!! )=.\" 7\u019E"),
          peg$decode("<%%$;\xC00#*;\xC0&/<#;\x8A/3$$;\xC00#*;\xC0&/#$+#)(#'#(\"'#&'#.M &%$;\xC00#*;\xC0&/<#;\x83/3$$;\xC00#*;\xC0&/#$+#)(#'#(\"'#&'#/' 8!:\u019F!! )=.\" 7\u01A0"),
          peg$decode("<;\x8C.# &;\x8D=.\" 7\u01A1"),
          peg$decode("<;\x8C.# &;\xA6=.\" 7\u01A2"),
          peg$decode("<%$;\xC00#*;\xC0&/G#;\xAD.# &;\xAE/8$$;\xC00#*;\xC0&/($8#:\u01A4#!!)(#'#(\"'#&'#=.\" 7\u01A3"),
          peg$decode("<;\xA6.; &;\x9F.5 &;\xA0./ &;\xA4.) &;\xA8.# &;\xBF=.\" 7\u01A5"),
          peg$decode("<;\x8F=.\" 7\u01A6"),
          peg$decode("<%;\x90/\xAB#$%$;\xC00#*;\xC0&/K#2\u01A8\"\"6\u01A87\u01A9/<$$;\xC00#*;\xC0&/,$;\x90/#$+$)($'#(#'#(\"'#&'#0\\*%$;\xC00#*;\xC0&/K#2\u01A8\"\"6\u01A87\u01A9/<$$;\xC00#*;\xC0&/,$;\x90/#$+$)($'#(#'#(\"'#&'#&/)$8\":\u01AA\"\"! )(\"'#&'#=.\" 7\u01A7"),
          peg$decode("<%;\x91/\xAB#$%$;\xC00#*;\xC0&/K#2\u01AC\"\"6\u01AC7\u01AD/<$$;\xC00#*;\xC0&/,$;\x91/#$+$)($'#(#'#(\"'#&'#0\\*%$;\xC00#*;\xC0&/K#2\u01AC\"\"6\u01AC7\u01AD/<$$;\xC00#*;\xC0&/,$;\x91/#$+$)($'#(#'#(\"'#&'#&/)$8\":\u01AE\"\"! )(\"'#&'#=.\" 7\u01AB"),
          peg$decode("<;\x92=.\" 7\u01AF"),
          peg$decode("<%;\x93/\u057B#$%$;\xC00#*;\xC0&/K#2\u01B1\"\"6\u01B17\u01B2/<$$;\xC00#*;\xC0&/,$;\x93/#$+$)($'#(#'#(\"'#&'#.\u0285 &%$;\xC00#*;\xC0&/K#2\u01B3\"\"6\u01B37\u01B4/<$$;\xC00#*;\xC0&/,$;\x93/#$+$)($'#(#'#(\"'#&'#.\u0246 &%$;\xC00#*;\xC0&/K#2\u01B5\"\"6\u01B57\u01B6/<$$;\xC00#*;\xC0&/,$;\x93/#$+$)($'#(#'#(\"'#&'#.\u0207 &%$;\xC00#*;\xC0&/K#2\u01B7\"\"6\u01B77\u01B8/<$$;\xC00#*;\xC0&/,$;\x93/#$+$)($'#(#'#(\"'#&'#.\u01C8 &%$;\xC00#*;\xC0&/K#2\u01B9\"\"6\u01B97\u01BA/<$$;\xC00#*;\xC0&/,$;\x93/#$+$)($'#(#'#(\"'#&'#.\u0189 &%$;\xC00#*;\xC0&/K#2\u01BB\"\"6\u01BB7\u01BC/<$$;\xC00#*;\xC0&/,$;\x93/#$+$)($'#(#'#(\"'#&'#.\u014A &%$;\xC00#*;\xC0&/r#2\u01BD\"\"6\u01BD7\u01BE.) &2\u01BF\"\"6\u01BF7\u01C0/W$2\u01C1\"\"6\u01C17\u01C2.) &2\u01C3\"\"6\u01C37\u01C4/<$$;\xC00#*;\xC0&/,$;g/#$+%)(%'#($'#(#'#(\"'#&'#.\xE4 &%$;\xC00#*;\xC0&/\xD3#2\u01C1\"\"6\u01C17\u01C2.) &2\u01C3\"\"6\u01C37\u01C4/\xB8$2\u01C5\"\"6\u01C57\u01C6.) &2\u01C7\"\"6\u01C77\u01C8/\x9D$2\u01C9\"\"6\u01C97\u01CA.) &2\u01CB\"\"6\u01CB7\u01CC/\x82$$;\xC00#*;\xC0&/r$2\u01BD\"\"6\u01BD7\u01BE.) &2\u01BF\"\"6\u01BF7\u01C0/W$2\u01C1\"\"6\u01C17\u01C2.) &2\u01C3\"\"6\u01C37\u01C4/<$$;\xC00#*;\xC0&/,$;g/#$+))()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#0\u02C4*%$;\xC00#*;\xC0&/K#2\u01B1\"\"6\u01B17\u01B2/<$$;\xC00#*;\xC0&/,$;\x93/#$+$)($'#(#'#(\"'#&'#.\u0285 &%$;\xC00#*;\xC0&/K#2\u01B3\"\"6\u01B37\u01B4/<$$;\xC00#*;\xC0&/,$;\x93/#$+$)($'#(#'#(\"'#&'#.\u0246 &%$;\xC00#*;\xC0&/K#2\u01B5\"\"6\u01B57\u01B6/<$$;\xC00#*;\xC0&/,$;\x93/#$+$)($'#(#'#(\"'#&'#.\u0207 &%$;\xC00#*;\xC0&/K#2\u01B7\"\"6\u01B77\u01B8/<$$;\xC00#*;\xC0&/,$;\x93/#$+$)($'#(#'#(\"'#&'#.\u01C8 &%$;\xC00#*;\xC0&/K#2\u01B9\"\"6\u01B97\u01BA/<$$;\xC00#*;\xC0&/,$;\x93/#$+$)($'#(#'#(\"'#&'#.\u0189 &%$;\xC00#*;\xC0&/K#2\u01BB\"\"6\u01BB7\u01BC/<$$;\xC00#*;\xC0&/,$;\x93/#$+$)($'#(#'#(\"'#&'#.\u014A &%$;\xC00#*;\xC0&/r#2\u01BD\"\"6\u01BD7\u01BE.) &2\u01BF\"\"6\u01BF7\u01C0/W$2\u01C1\"\"6\u01C17\u01C2.) &2\u01C3\"\"6\u01C37\u01C4/<$$;\xC00#*;\xC0&/,$;g/#$+%)(%'#($'#(#'#(\"'#&'#.\xE4 &%$;\xC00#*;\xC0&/\xD3#2\u01C1\"\"6\u01C17\u01C2.) &2\u01C3\"\"6\u01C37\u01C4/\xB8$2\u01C5\"\"6\u01C57\u01C6.) &2\u01C7\"\"6\u01C77\u01C8/\x9D$2\u01C9\"\"6\u01C97\u01CA.) &2\u01CB\"\"6\u01CB7\u01CC/\x82$$;\xC00#*;\xC0&/r$2\u01BD\"\"6\u01BD7\u01BE.) &2\u01BF\"\"6\u01BF7\u01C0/W$2\u01C1\"\"6\u01C17\u01C2.) &2\u01C3\"\"6\u01C37\u01C4/<$$;\xC00#*;\xC0&/,$;g/#$+))()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#&/)$8\":\u01CD\"\"! )(\"'#&'#=.\" 7\u01B0"),
          peg$decode("<;\x94=.\" 7\u01CE"),
          peg$decode("<%;\x95/\u0261#$%$;\xC00#*;\xC0&/K#2\u0188\"\"6\u01887\u0189/<$$;\xC00#*;\xC0&/,$;\x95/#$+$)($'#(#'#(\"'#&'#.\xF8 &%$;\xC00#*;\xC0&/K#2\u01D0\"\"6\u01D07\u01D1/<$$;\xC00#*;\xC0&/,$;\x95/#$+$)($'#(#'#(\"'#&'#.\xB9 &%;\xA3.# &;\xA3/\xA9#%$;\xC00#*;\xC0&/K#2J\"\"6J7K/<$$;\xC00#*;\xC0&/,$;\x96/#$+$)($'#(#'#(\"'#&'#.\\ &%$;\xC00#*;\xC0&/K#2\u017C\"\"6\u017C7\u017D/<$$;\xC00#*;\xC0&/,$;\x96/#$+$)($'#(#'#(\"'#&'#.\" &\"/#$+\")(\"'#&'#0\u0137*%$;\xC00#*;\xC0&/K#2\u0188\"\"6\u01887\u0189/<$$;\xC00#*;\xC0&/,$;\x95/#$+$)($'#(#'#(\"'#&'#.\xF8 &%$;\xC00#*;\xC0&/K#2\u01D0\"\"6\u01D07\u01D1/<$$;\xC00#*;\xC0&/,$;\x95/#$+$)($'#(#'#(\"'#&'#.\xB9 &%;\xA3.# &;\xA3/\xA9#%$;\xC00#*;\xC0&/K#2J\"\"6J7K/<$$;\xC00#*;\xC0&/,$;\x96/#$+$)($'#(#'#(\"'#&'#.\\ &%$;\xC00#*;\xC0&/K#2\u017C\"\"6\u017C7\u017D/<$$;\xC00#*;\xC0&/,$;\x96/#$+$)($'#(#'#(\"'#&'#.\" &\"/#$+\")(\"'#&'#&/)$8\":\u01D2\"\"! )(\"'#&'#=.\" 7\u01CF"),
          peg$decode("<%;\x96/\u0129#$%$;\xC00#*;\xC0&/K#2J\"\"6J7K/<$$;\xC00#*;\xC0&/,$;\x96/#$+$)($'#(#'#(\"'#&'#.\\ &%$;\xC00#*;\xC0&/K#2\u017C\"\"6\u017C7\u017D/<$$;\xC00#*;\xC0&/,$;\x96/#$+$)($'#(#'#(\"'#&'#0\x9B*%$;\xC00#*;\xC0&/K#2J\"\"6J7K/<$$;\xC00#*;\xC0&/,$;\x96/#$+$)($'#(#'#(\"'#&'#.\\ &%$;\xC00#*;\xC0&/K#2\u017C\"\"6\u017C7\u017D/<$$;\xC00#*;\xC0&/,$;\x96/#$+$)($'#(#'#(\"'#&'#&/)$8\":\u01D4\"\"! )(\"'#&'#=.\" 7\u01D3"),
          peg$decode("<%2\u018B\"\"6\u018B7\u018C/A#$;\xC00#*;\xC0&/1$;\x97/($8#:\u01D6#! )(#'#(\"'#&'#.\x8B &%2\u0188\"\"6\u01887\u0189/A#$;\xC00#*;\xC0&/1$;\x97/($8#:\u01D7#! )(#'#(\"'#&'#.W &%2\u01D0\"\"6\u01D07\u01D1/A#$;\xC00#*;\xC0&/1$;\x97/($8#:\u01D8#! )(#'#(\"'#&'#.# &;\x97=.\" 7\u01D5"),
          peg$decode("<;\x98.w &;\x99.q &;\x9E.k &%;\x9F/' 8!:\u01DA!! ).Y &%;\xA0/' 8!:\u01DB!! ).G &%;\xA4/' 8!:\u01DC!! ).5 &;\x9D./ &%;\x8C/' 8!:\u01DD!! )=.\" 7\u01D9"),
          peg$decode("<%2B\"\"6B7C/`#$;\xC00#*;\xC0&/P$;\x8E/G$$;\xC00#*;\xC0&/7$2H\"\"6H7I/($8%:\u01DF%!\")(%'#($'#(#'#(\"'#&'#=.\" 7\u01DE"),
          peg$decode("<%2\u01E1\"\"6\u01E17\u01E2.) &2\u01E3\"\"6\u01E37\u01E4/#$;\xC00#*;\xC0&/o$2B\"\"6B7C/`$$;\xC00#*;\xC0&/P$;\x8E/G$$;\xC00#*;\xC0&/7$2H\"\"6H7I/($8':\u01E5'!\")(''#(&'#(%'#($'#(#'#(\"'#&'#.\u0897 &%2\u01E6\"\"6\u01E67\u01E7.) &2\u01E8\"\"6\u01E87\u01E9/#$;\xC00#*;\xC0&/o$2B\"\"6B7C/`$$;\xC00#*;\xC0&/P$;\x8E/G$$;\xC00#*;\xC0&/7$2H\"\"6H7I/($8':\u01EA'!\")(''#(&'#(%'#($'#(#'#(\"'#&'#.\u0819 &%2\u01EB\"\"6\u01EB7\u01EC.) &2\u01ED\"\"6\u01ED7\u01EE/\xB8#$;\xC00#*;\xC0&/\xA8$2B\"\"6B7C/\x99$$;\xC00#*;\xC0&/\x89$;\x8E/\x80$$;\xC00#*;\xC0&/p$2\u0152\"\"6\u01527\u0153/a$$;\xC00#*;\xC0&/Q$;\x8E/H$$;\xC00#*;\xC0&/8$2H\"\"6H7I/)$8+:\u01EF+\"&\")(+'#(*'#()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.\u0762 &%2\u01F0\"\"6\u01F07\u01F1.) &2\u01F2\"\"6\u01F27\u01F3/#$;\xC00#*;\xC0&/o$2B\"\"6B7C/`$$;\xC00#*;\xC0&/P$;\x8E/G$$;\xC00#*;\xC0&/7$2H\"\"6H7I/($8':\u01F4'!\")(''#(&'#(%'#($'#(#'#(\"'#&'#.\u06E4 &%2\u01F5\"\"6\u01F57\u01F6.) &2\u01F7\"\"6\u01F77\u01F8/#$;\xC00#*;\xC0&/o$2B\"\"6B7C/`$$;\xC00#*;\xC0&/P$;\x8C/G$$;\xC00#*;\xC0&/7$2H\"\"6H7I/($8':\u01F9'!\")(''#(&'#(%'#($'#(#'#(\"'#&'#.\u0666 &%2\u01FA\"\"6\u01FA7\u01FB.) &2\u01FC\"\"6\u01FC7\u01FD/#$;\xC00#*;\xC0&/o$2B\"\"6B7C/`$$;\xC00#*;\xC0&/P$;\x8E/G$$;\xC00#*;\xC0&/7$2H\"\"6H7I/($8':\u01FE'!\")(''#(&'#(%'#($'#(#'#(\"'#&'#.\u05E8 &%2\u01FF\"\"6\u01FF7\u0200.) &2\u0201\"\"6\u02017\u0202/#$;\xC00#*;\xC0&/o$2B\"\"6B7C/`$$;\xC00#*;\xC0&/P$;\x8E/G$$;\xC00#*;\xC0&/7$2H\"\"6H7I/($8':\u0203'!\")(''#(&'#(%'#($'#(#'#(\"'#&'#.\u056A &%2\u0204\"\"6\u02047\u0205.) &2\u0206\"\"6\u02067\u0207/\x8F#$;\xC00#*;\xC0&/$%2B\"\"6B7C/[#$;\xC00#*;\xC0&/K$;\x8E/B$$;\xC00#*;\xC0&/2$2H\"\"6H7I/#$+%)(%'#($'#(#'#(\"'#&'#.# &;\xBF/($8#:\u0208#! )(#'#(\"'#&'#.\u04DC &%2\u0209\"\"6\u02097\u020A.) &2\u020B\"\"6\u020B7\u020C/A#$;\xC00#*;\xC0&/1$;g/($8#:\u020D#! )(#'#(\"'#&'#.\u049C &%2\u020E\"\"6\u020E7\u020F.) &2\u0210\"\"6\u02107\u0211/\xF1#$;\xC00#*;\xC0&/\xE1$2B\"\"6B7C/\xD2$$;\xC00#*;\xC0&/\xC2$;\x8E/\xB9$$;\xC00#*;\xC0&/\xA9$2\u0152\"\"6\u01527\u0153/\x9A$$;\xC00#*;\xC0&/\x8A$;\x8E/\x81$$;\xC00#*;\xC0&/q$2\u0152\"\"6\u01527\u0153/b$$;\xC00#*;\xC0&/R$;\x8E/I$$;\xC00#*;\xC0&/9$2H\"\"6H7I/*$8/:\u0212/#*&\")(/'#(.'#(-'#(,'#(+'#(*'#()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.\u03AC &%2\u0213\"\"6\u02137\u0214.5 &2\u0215\"\"6\u02157\u0216.) &2\u0217\"\"6\u02177\u0218/#$;\xC00#*;\xC0&/o$2B\"\"6B7C/`$$;\xC00#*;\xC0&/P$;\x8E/G$$;\xC00#*;\xC0&/7$2H\"\"6H7I/($8':\u0219'!\")(''#(&'#(%'#($'#(#'#(\"'#&'#.\u0322 &%2\u021A\"\"6\u021A7\u021B.5 &2\u021C\"\"6\u021C7\u021D.) &2\u021E\"\"6\u021E7\u021F/#$;\xC00#*;\xC0&/o$2B\"\"6B7C/`$$;\xC00#*;\xC0&/P$;\x8E/G$$;\xC00#*;\xC0&/7$2H\"\"6H7I/($8':\u0220'!\")(''#(&'#(%'#($'#(#'#(\"'#&'#.\u0298 &%2\u0221\"\"6\u02217\u0222.) &2\u0223\"\"6\u02237\u0224/\xB8#$;\xC00#*;\xC0&/\xA8$2B\"\"6B7C/\x99$$;\xC00#*;\xC0&/\x89$;\x8E/\x80$$;\xC00#*;\xC0&/p$2\u0152\"\"6\u01527\u0153/a$$;\xC00#*;\xC0&/Q$;\x8E/H$$;\xC00#*;\xC0&/8$2H\"\"6H7I/)$8+:\u0225+\"&\")(+'#(*'#()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.\u01E1 &%2\u0226\"\"6\u02267\u0227.Y &2\u0228\"\"6\u02287\u0229.M &2\u022A\"\"6\u022A7\u022B.A &2\u022C\"\"6\u022C7\u022D.5 &2\u022E\"\"6\u022E7\u022F.) &2\u0230\"\"6\u02307\u0231/#$;\xC00#*;\xC0&/o$2B\"\"6B7C/`$$;\xC00#*;\xC0&/P$;\x8E/G$$;\xC00#*;\xC0&/7$2H\"\"6H7I/($8':\u0232'!\")(''#(&'#(%'#($'#(#'#(\"'#&'#.\u0133 &%2\u0233\"\"6\u02337\u0234.) &2\u0235\"\"6\u02357\u0236/\u0105#$4\u0237\"\"5!7\u0238/,#0)*4\u0237\"\"5!7\u0238&&&#/\xE3$$;\xC00#*;\xC0&/\xD3$2B\"\"6B7C/\xC4$$%$;\xC00#*;\xC0&/;#;\x8E/2$2\u0152\"\"6\u01527\u0153/#$+#)(#'#(\"'#&'#0L*%$;\xC00#*;\xC0&/;#;\x8E/2$2\u0152\"\"6\u01527\u0153/#$+#)(#'#(\"'#&'#&/b$$;\xC00#*;\xC0&/R$;\x8E/I$$;\xC00#*;\xC0&/9$2H\"\"6H7I/*$8):\u0239)#'$\")()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#./ &;\x9A.) &;\x9B.# &;\x9C=.\" 7\u01E0"),
          peg$decode("<%2\u023B\"\"6\u023B7\u023C.) &2\u023D\"\"6\u023D7\u023E/\u0100#$;\xC00#*;\xC0&/\xF0$2B\"\"6B7C/\xE1$$;\xC00#*;\xC0&/\xD1$;\x8E/\xC8$$;\xC00#*;\xC0&/\xB8$2\u0152\"\"6\u01527\u0153/\xA9$$;\xC00#*;\xC0&/\x99$;\x8E/\x90$$;\xC00#*;\xC0&/\x80$%2\u0152\"\"6\u01527\u0153/<#$;\xC00#*;\xC0&/,$;\x8E/#$+#)(#'#(\"'#&'#.\" &\"/I$$;\xC00#*;\xC0&/9$2H\"\"6H7I/*$8-:\u023F-#($\")(-'#(,'#(+'#(*'#()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#=.\" 7\u023A"),
          peg$decode("<%2\u0241\"\"6\u02417\u0242.) &2\u0243\"\"6\u02437\u0244/A#$;\xC00#*;\xC0&/1$;T/($8#:\u0245#! )(#'#(\"'#&'#=.\" 7\u0240"),
          peg$decode("<%2\u0247\"\"6\u02477\u0248.) &2\u0249\"\"6\u02497\u024A/l#$;\xC00#*;\xC0&/\\$2\u0241\"\"6\u02417\u0242.) &2\u0243\"\"6\u02437\u0244/A$$;\xC00#*;\xC0&/1$;T/($8%:\u024B%! )(%'#($'#(#'#(\"'#&'#=.\" 7\u0246"),
          peg$decode("<%2\u024D\"\"6\u024D7\u024E.) &2\u024F\"\"6\u024F7\u0250/\xCC#$;\xC00#*;\xC0&/\xBC$2B\"\"6B7C/\xAD$$;\xC00#*;\xC0&/\x9D$2:\"\"6:7;.) &2<\"\"6<7=.\" &\"/}$$;\xC00#*;\xC0&/m$2J\"\"6J7K.# &;\x8E/X$$;\xC00#*;\xC0&/H$2H\"\"6H7I/9$$;\xC00#*;\xC0&/)$8*:\u0251*\"%#)(*'#()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.\u044E &%2\u0252\"\"6\u02527\u0253.) &2\u0254\"\"6\u02547\u0255/\u0136#$;\xC00#*;\xC0&/\u0126$2B\"\"6B7C/\u0117$$;\xC00#*;\xC0&/\u0107$2:\"\"6:7;.) &2<\"\"6<7=.\" &\"/\xE7$$;\xC00#*;\xC0&/\xD7$;\x8E/\xCE$%2\xB8\"\"6\xB87\xB9/\x8A#$;\xC00#*;\xC0&/z$2\u0256\"\"6\u02567\u0257/k$$;\xC00#*;\xC0&/[$2\u01B1\"\"6\u01B17\u01B2/L$$;\xC00#*;\xC0&/<$;\xA5/3$$;\xC00#*;\xC0&/#$+()(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.\" &\"/I$2H\"\"6H7I/:$$;\xC00#*;\xC0&/*$8*:\u0258*#%#\")(*'#()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.\u0319 &%2\u0259\"\"6\u02597\u025A.) &2\u025B\"\"6\u025B7\u025C/\xC0#$;\xC00#*;\xC0&/\xB0$2B\"\"6B7C/\xA1$$;\xC00#*;\xC0&/\x91$2:\"\"6:7;.) &2<\"\"6<7=.\" &\"/q$$;\xC00#*;\xC0&/a$;\x8E/X$$;\xC00#*;\xC0&/H$2H\"\"6H7I/9$$;\xC00#*;\xC0&/)$8*:\u025D*\"%#)(*'#()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.\u025A &%2\u025E\"\"6\u025E7\u025F.) &2\u0260\"\"6\u02607\u0261/\xC0#$;\xC00#*;\xC0&/\xB0$2B\"\"6B7C/\xA1$$;\xC00#*;\xC0&/\x91$2:\"\"6:7;.) &2<\"\"6<7=.\" &\"/q$$;\xC00#*;\xC0&/a$;\x8E/X$$;\xC00#*;\xC0&/H$2H\"\"6H7I/9$$;\xC00#*;\xC0&/)$8*:\u0262*\"%#)(*'#()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.\u019B &%2\u0263\"\"6\u02637\u0264.) &2\u0265\"\"6\u02657\u0266/\xC0#$;\xC00#*;\xC0&/\xB0$2B\"\"6B7C/\xA1$$;\xC00#*;\xC0&/\x91$2:\"\"6:7;.) &2<\"\"6<7=.\" &\"/q$$;\xC00#*;\xC0&/a$;\x8E/X$$;\xC00#*;\xC0&/H$2H\"\"6H7I/9$$;\xC00#*;\xC0&/)$8*:\u0267*\"%#)(*'#()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.\xDC &%2\u0268\"\"6\u02687\u0269.) &2\u026A\"\"6\u026A7\u026B/\xC0#$;\xC00#*;\xC0&/\xB0$2B\"\"6B7C/\xA1$$;\xC00#*;\xC0&/\x91$2:\"\"6:7;.) &2<\"\"6<7=.\" &\"/q$$;\xC00#*;\xC0&/a$;\x8E/X$$;\xC00#*;\xC0&/H$2H\"\"6H7I/9$$;\xC00#*;\xC0&/)$8*:\u026C*\"%#)(*'#()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#=.\" 7\u024C"),
          peg$decode("<%;\xA6/7#;f.\" &\"/)$8\":\u026E\"\"! )(\"'#&'#=.\" 7\u026D"),
          peg$decode("<%;\xA5/V#;\xAF.< &%2\u0270\"\"6\u02707\u0271/,#;\xA6/#$+\")(\"'#&'#.\" &\"/)$8\":\u0272\"\"! )(\"'#&'#=.\" 7\u026F"),
          peg$decode("<;\xA1.) &;\xA2.# &;\xA3=.\" 7\u0273"),
          peg$decode("<;\xB2.) &;\xB1.# &;\xB0=.\" 7\u0274"),
          peg$decode("<;\xB5.) &;\xB4.# &;\xB3=.\" 7\u0275"),
          peg$decode("<;\xB8.) &;\xB7.# &;\xB6=.\" 7\u0276"),
          peg$decode("<%2\u0278\"\"6\u02787\u0279.) &2\u027A\"\"6\u027A7\u027B/& 8!:\u027C! ).@ &%2\u027D\"\"6\u027D7\u027E.) &2\u027F\"\"6\u027F7\u0280/& 8!:\u0281! )=.\" 7\u0277"),
          peg$decode("<%;\xBC/' 8!:\u0283!! ).S &%;\xBD/' 8!:\u0283!! ).A &%;\xBA/' 8!:\u0283!! )./ &%;\xBB/' 8!:\u0283!! )=.\" 7\u0282"),
          peg$decode("<%;\xA9/' 8!:\u0285!! )./ &%;\xA7/' 8!:\u0286!! )=.\" 7\u0284"),
          peg$decode("<%;\xAB/' 8!:\u0288!! )./ &%;\xAA/' 8!:\u0289!! )=.\" 7\u0287"),
          peg$decode("<%;\xAC/' 8!:\u028B!! ).. &%;\xC2/& 8!:\u028C! )=.\" 7\u028A"),
          peg$decode("<%2\u01B5\"\"6\u01B57\u01B6/S#$4\u028E\"\"5!7\u028F0)*4\u028E\"\"5!7\u028F&/7$2\u01B7\"\"6\u01B77\u01B8/($8#:\u0290#!!)(#'#(\"'#&'#=.\" 7\u028D"),
          peg$decode("<%;\xC7.\" &\"/7#2\u0292\"\"6\u02927\u0293/($8\":\u0286\"!!)(\"'#&'#=.\" 7\u0291"),
          peg$decode("<%;\xAA/2#;\xC8/)$8\":\u0295\"\"! )(\"'#&'#=.\" 7\u0294"),
          peg$decode("<%2\u0297\"\"6\u02977\u0298/1#;\xC8/($8\":\u0299\"! )(\"'#&'#=.\" 7\u0296"),
          peg$decode("<%2\u0186\"\"6\u01867\u0187/1#;\xC5/($8\":\u029B\"! )(\"'#&'#=.\" 7\u029A"),
          peg$decode("<%2\u029D\"\"6\u029D7\u029E/1#;\xC5/($8\":\u029B\"! )(\"'#&'#=.\" 7\u029C"),
          peg$decode("<%2\u02A0\"\"6\u02A07\u02A1/\xBF#$4\u02A2\"\"5!7\u02A3/,#0)*4\u02A2\"\"5!7\u02A3&&&#/\x9D$$%2\u01D0\"\"6\u01D07\u01D1/E#$4\u02A4\"\"5!7\u02A5/,#0)*4\u02A4\"\"5!7\u02A5&&&#/#$+\")(\"'#&'#0U*%2\u01D0\"\"6\u01D07\u01D1/E#$4\u02A4\"\"5!7\u02A5/,#0)*4\u02A4\"\"5!7\u02A5&&&#/#$+\")(\"'#&'#&/)$8#:\u02A6#\"! )(#'#(\"'#&'#=.\" 7\u029F"),
          peg$decode("<%$4\u02A8\"\"5!7\u02A9/,#0)*4\u02A8\"\"5!7\u02A9&&&#/' 8!:\u02AA!! )=.\" 7\u02A7"),
          peg$decode("<%$4\u02A8\"\"5!7\u02A9/,#0)*4\u02A8\"\"5!7\u02A9&&&#/U#2\u0113\"\"6\u01137\u0114/F$$4\u02A8\"\"5!7\u02A90)*4\u02A8\"\"5!7\u02A9&/*$8#:\u02AC##\"! )(#'#(\"'#&'#.[ &%2\u0113\"\"6\u01137\u0114/K#$4\u02A8\"\"5!7\u02A9/,#0)*4\u02A8\"\"5!7\u02A9&&&#/)$8\":\u02AD\"\"! )(\"'#&'#=.\" 7\u02AB"),
          peg$decode("<%$4\u02A8\"\"5!7\u02A9/,#0)*4\u02A8\"\"5!7\u02A9&&&#/_#2\u0113\"\"6\u01137\u0114/P$$4\u02A8\"\"5!7\u02A90)*4\u02A8\"\"5!7\u02A9&/4$;\xB9/+$8$:\u02AF$$#\"! )($'#(#'#(\"'#&'#.\x9D &%2\u0113\"\"6\u01137\u0114/U#$4\u02A8\"\"5!7\u02A9/,#0)*4\u02A8\"\"5!7\u02A9&&&#/3$;\xB9/*$8#:\u02B0##\"! )(#'#(\"'#&'#.U &%$4\u02A8\"\"5!7\u02A9/,#0)*4\u02A8\"\"5!7\u02A9&&&#/2#;\xB9/)$8\":\u02B1\"\"! )(\"'#&'#=.\" 7\u02AE"),
          peg$decode("<%2\u0188\"\"6\u01887\u0189/1#;\xB0/($8\":\u02B3\"! )(\"'#&'#=.\" 7\u02B2"),
          peg$decode("<%2\u0188\"\"6\u01887\u0189/1#;\xB1/($8\":\u02B5\"! )(\"'#&'#=.\" 7\u02B4"),
          peg$decode("<%2\u0188\"\"6\u01887\u0189/1#;\xB2/($8\":\u02B5\"! )(\"'#&'#=.\" 7\u02B6"),
          peg$decode("<%2\u01D0\"\"6\u01D07\u01D1/1#;\xB0/($8\":\u02B8\"! )(\"'#&'#=.\" 7\u02B7"),
          peg$decode("<%2\u01D0\"\"6\u01D07\u01D1/1#;\xB1/($8\":\u02B8\"! )(\"'#&'#=.\" 7\u02B9"),
          peg$decode("<%2\u01D0\"\"6\u01D07\u01D1/1#;\xB2/($8\":\u02B8\"! )(\"'#&'#=.\" 7\u02BA"),
          peg$decode("<%4\u02BC\"\"5!7\u02BD/`#4\u02BE\"\"5!7\u02BF.\" &\"/L$$4\u02A8\"\"5!7\u02A9/,#0)*4\u02A8\"\"5!7\u02A9&&&#/*$8#:\u02C0##\"! )(#'#(\"'#&'#=.\" 7\u02BB"),
          peg$decode("<%2\u02C2\"\"6\u02C27\u02C3/_#$4\u02C4\"\"5!7\u02C5.# &;\xBE0/*4\u02C4\"\"5!7\u02C5.# &;\xBE&/7$2\u02C2\"\"6\u02C27\u02C3/($8#:\u02C6#!!)(#'#(\"'#&'#=.\" 7\u02C1"),
          peg$decode("<%2\u02C8\"\"6\u02C87\u02C9/_#$4\u02CA\"\"5!7\u02CB.# &;\xBE0/*4\u02CA\"\"5!7\u02CB.# &;\xBE&/7$2\u02C8\"\"6\u02C87\u02C9/($8#:\u02C6#!!)(#'#(\"'#&'#=.\" 7\u02C7"),
          peg$decode("<%2\u02CD\"\"6\u02CD7\u02CE/_#$4\u02CF\"\"5!7\u02D0.# &;\xBE0/*4\u02CF\"\"5!7\u02D0.# &;\xBE&/7$2\u02CD\"\"6\u02CD7\u02CE/($8#:\u02C6#!!)(#'#(\"'#&'#=.\" 7\u02CC"),
          peg$decode("<%2\u02D2\"\"6\u02D27\u02D3/_#$4\u02D4\"\"5!7\u02D5.# &;\xBE0/*4\u02D4\"\"5!7\u02D5.# &;\xBE&/7$2\u02D2\"\"6\u02D27\u02D3/($8#:\u02C6#!!)(#'#(\"'#&'#=.\" 7\u02D1"),
          peg$decode("<%2\u02D7\"\"6\u02D77\u02D8/2#4\u02D9\"\"5!7\u02DA/#$+\")(\"'#&'#=.\" 7\u02D6"),
          peg$decode("<%2B\"\"6B7C/F#$;\xC00#*;\xC0&/6$2H\"\"6H7I/'$8#:\u02DC# )(#'#(\"'#&'#=.\" 7\u02DB"),
          peg$decode("<4\u02DE\"\"5!7\u02DF.G &4\u02E0\"\"5!7\u02E1.; &4\u02E2\"\"5!7\u02E3./ &4\u02E4\"\"5!7\u02E5.# &;\xC1=.\" 7\u02DD"),
          peg$decode("<%2\u02E7\"\"6\u02E77\u02E8/?#$4\u02E9\"\"5!7\u02EA0)*4\u02E9\"\"5!7\u02EA&/#$+\")(\"'#&'#=.\" 7\u02E6"),
          peg$decode("<%2\u0194\"\"6\u01947\u0195/B#$;\xC00#*;\xC0&/2$2\u0196\"\"6\u01967\u0197/#$+#)(#'#(\"'#&'#=.\" 7\u02EB"),
          peg$decode("<4\u02ED\"\"5!7\u02EE.\xB9 &4\u02EF\"\"5!7\u02F0.\xAD &4\u02F1\"\"5!7\u02F2.\xA1 &4\u02F3\"\"5!7\u02F4.\x95 &4\u02F5\"\"5!7\u02F6.\x89 &4\u02F7\"\"5!7\u02F8.} &4\u02F9\"\"5!7\u02FA.q &4\u02FB\"\"5!7\u02FC.e &4\u02FD\"\"5!7\u02FE.Y &4\u02FF\"\"5!7\u0300.M &4\u0301\"\"5!7\u0302.A &4\u0303\"\"5!7\u0304.5 &4\u0305\"\"5!7\u0306.) &4\u0307\"\"5!7\u0308=.\" 7\u02EC"),
          peg$decode("<;\xC3.) &2\u030A\"\"6\u030A7\u030B=.\" 7\u0309"),
          peg$decode("<%;\xC4.) &4\u02A8\"\"5!7\u02A9/\x99#$;\xC4.M &4\u02A8\"\"5!7\u02A9.A &4\u030D\"\"5!7\u030E.5 &4\u030F\"\"5!7\u0310.) &4\u0311\"\"5!7\u03120S*;\xC4.M &4\u02A8\"\"5!7\u02A9.A &4\u030D\"\"5!7\u030E.5 &4\u030F\"\"5!7\u0310.) &4\u0311\"\"5!7\u0312&/)$8\":\u0313\"\"! )(\"'#&'#=.\" 7\u030C"),
          peg$decode("<;\xC4.Y &2\u01D0\"\"6\u01D07\u01D1.M &4\u02A8\"\"5!7\u02A9.A &4\u030D\"\"5!7\u030E.5 &4\u030F\"\"5!7\u0310.) &4\u0311\"\"5!7\u0312=.\" 7\u0314"),
          peg$decode("<%;\xC3/Q#$;\xC6.) &2\u0113\"\"6\u01137\u01140/*;\xC6.) &2\u0113\"\"6\u01137\u0114&/)$8\":\u0316\"\"! )(\"'#&'#=.\" 7\u0315"),
          peg$decode("<%;\xC4.; &4\u02A8\"\"5!7\u02A9./ &2\u0292\"\"6\u02927\u0293.# &;\xC9/u#$;\xC6.; &2\u0113\"\"6\u01137\u0114./ &2\u0292\"\"6\u02927\u0293.# &;\xC90A*;\xC6.; &2\u0113\"\"6\u01137\u0114./ &2\u0292\"\"6\u02927\u0293.# &;\xC9&/)$8\":\u0318\"\"! )(\"'#&'#=.\" 7\u0317"),
          peg$decode("<;\xCA.# &;\xCC=.\" 7\u0319"),
          peg$decode("<%%2\u031B\"\"6\u031B7\u031C/5#;\xCB/,$;\xCB/#$+#)(#'#(\"'#&'#/' 8!:\u031D!! )=.\" 7\u031A"),
          peg$decode("<4\u02A8\"\"5!7\u02A9.5 &4\u031F\"\"5!7\u0320.) &4\u0321\"\"5!7\u0322=.\" 7\u031E"),
          peg$decode("<%2\u02D7\"\"6\u02D77\u02D8/\u0127#2\u030A\"\"6\u030A7\u030B.\u010D &2\u0324\"\"6\u03247\u0325.\u0101 &2\u0113\"\"6\u01137\u0114.\xF5 &2\u01D0\"\"6\u01D07\u01D1.\xE9 &2\u018B\"\"6\u018B7\u018C.\xDD &2\u029D\"\"6\u029D7\u029E.\xD1 &2\u0326\"\"6\u03267\u0327.\xC5 &2\u02C2\"\"6\u02C27\u02C3.\xB9 &2B\"\"6B7C.\xAD &2H\"\"6H7I.\xA1 &2J\"\"6J7K.\x95 &2\u0188\"\"6\u01887\u0189.\x89 &2\u0152\"\"6\u01527\u0153.} &2\xB8\"\"6\xB87\xB9.q &2\u0292\"\"6\u02927\u0293.e &2\u01B1\"\"6\u01B17\u01B2.Y &2\u017C\"\"6\u017C7\u017D.M &2\u0186\"\"6\u01867\u0187.A &2\u02E7\"\"6\u02E77\u02E8.5 &2\u02A0\"\"6\u02A07\u02A1.) &2\u031B\"\"6\u031B7\u031C/($8\":\u0328\"! )(\"'#&'#=.\" 7\u0323")
        ],

        peg$currPos          = 0,
        peg$savedPos         = 0,
        peg$posDetailsCache  = [{ line: 1, column: 1, seenCR: false }],
        peg$maxFailPos       = 0,
        peg$maxFailExpected  = [],
        peg$silentFails      = 0,

        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleIndices)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleIndex = peg$startRuleIndices[options.startRule];
    }

    function text() {
      return input.substring(peg$savedPos, peg$currPos);
    }

    function location() {
      return peg$computeLocation(peg$savedPos, peg$currPos);
    }

    function expected(description) {
      throw peg$buildException(
        null,
        [{ type: "other", description: description }],
        input.substring(peg$savedPos, peg$currPos),
        peg$computeLocation(peg$savedPos, peg$currPos)
      );
    }

    function error(message) {
      throw peg$buildException(
        message,
        null,
        input.substring(peg$savedPos, peg$currPos),
        peg$computeLocation(peg$savedPos, peg$currPos)
      );
    }

    function peg$computePosDetails(pos) {
      var details = peg$posDetailsCache[pos],
          p, ch;

      if (details) {
        return details;
      } else {
        p = pos - 1;
        while (!peg$posDetailsCache[p]) {
          p--;
        }

        details = peg$posDetailsCache[p];
        details = {
          line:   details.line,
          column: details.column,
          seenCR: details.seenCR
        };

        while (p < pos) {
          ch = input.charAt(p);
          if (ch === "\n") {
            if (!details.seenCR) { details.line++; }
            details.column = 1;
            details.seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            details.line++;
            details.column = 1;
            details.seenCR = true;
          } else {
            details.column++;
            details.seenCR = false;
          }

          p++;
        }

        peg$posDetailsCache[pos] = details;
        return details;
      }
    }

    function peg$computeLocation(startPos, endPos) {
      var startPosDetails = peg$computePosDetails(startPos),
          endPosDetails   = peg$computePosDetails(endPos);

      return {
        start: {
          offset: startPos,
          line:   startPosDetails.line,
          column: startPosDetails.column
        },
        end: {
          offset: endPos,
          line:   endPosDetails.line,
          column: endPosDetails.column
        }
      };
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) { return; }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$buildException(message, expected, found, location) {
      function cleanupExpected(expected) {
        var i = 1;

        expected.sort(function(a, b) {
          if (a.description < b.description) {
            return -1;
          } else if (a.description > b.description) {
            return 1;
          } else {
            return 0;
          }
        });

        while (i < expected.length) {
          if (expected[i - 1] === expected[i]) {
            expected.splice(i, 1);
          } else {
            i++;
          }
        }
      }

      function buildMessage(expected, found) {
        function stringEscape(s) {
          function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }

          return s
            .replace(/\\/g,   '\\\\')
            .replace(/"/g,    '\\"')
            .replace(/\x08/g, '\\b')
            .replace(/\t/g,   '\\t')
            .replace(/\n/g,   '\\n')
            .replace(/\f/g,   '\\f')
            .replace(/\r/g,   '\\r')
            .replace(/[\x00-\x07\x0B\x0E\x0F]/g, function(ch) { return '\\x0' + hex(ch); })
            .replace(/[\x10-\x1F\x80-\xFF]/g,    function(ch) { return '\\x'  + hex(ch); })
            .replace(/[\u0100-\u0FFF]/g,         function(ch) { return '\\u0' + hex(ch); })
            .replace(/[\u1000-\uFFFF]/g,         function(ch) { return '\\u'  + hex(ch); });
        }

        var expectedDescs = new Array(expected.length),
            expectedDesc, foundDesc, i;

        for (i = 0; i < expected.length; i++) {
          expectedDescs[i] = expected[i].description;
        }

        expectedDesc = expected.length > 1
          ? expectedDescs.slice(0, -1).join(", ")
              + " or "
              + expectedDescs[expected.length - 1]
          : expectedDescs[0];

        foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";

        return "Expected " + expectedDesc + " but " + foundDesc + " found.";
      }

      if (expected !== null) {
        cleanupExpected(expected);
      }

      return new peg$SyntaxError(
        message !== null ? message : buildMessage(expected, found),
        expected,
        found,
        location
      );
    }

    function peg$decode(s) {
      var bc = new Array(s.length), i;

      for (i = 0; i < s.length; i++) {
        bc[i] = s.charCodeAt(i) - 32;
      }

      return bc;
    }

    function peg$parseRule(index) {
      var bc    = peg$bytecode[index],
          ip    = 0,
          ips   = [],
          end   = bc.length,
          ends  = [],
          stack = [],
          params, i;

      while (true) {
        while (ip < end) {
          switch (bc[ip]) {
            case 0:
              stack.push(peg$consts[bc[ip + 1]]);
              ip += 2;
              break;

            case 1:
              stack.push(void 0);
              ip++;
              break;

            case 2:
              stack.push(null);
              ip++;
              break;

            case 3:
              stack.push(peg$FAILED);
              ip++;
              break;

            case 4:
              stack.push([]);
              ip++;
              break;

            case 5:
              stack.push(peg$currPos);
              ip++;
              break;

            case 6:
              stack.pop();
              ip++;
              break;

            case 7:
              peg$currPos = stack.pop();
              ip++;
              break;

            case 8:
              stack.length -= bc[ip + 1];
              ip += 2;
              break;

            case 9:
              stack.splice(-2, 1);
              ip++;
              break;

            case 10:
              stack[stack.length - 2].push(stack.pop());
              ip++;
              break;

            case 11:
              stack.push(stack.splice(stack.length - bc[ip + 1], bc[ip + 1]));
              ip += 2;
              break;

            case 12:
              stack.push(input.substring(stack.pop(), peg$currPos));
              ip++;
              break;

            case 13:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (stack[stack.length - 1]) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 14:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (stack[stack.length - 1] === peg$FAILED) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 15:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (stack[stack.length - 1] !== peg$FAILED) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 16:
              if (stack[stack.length - 1] !== peg$FAILED) {
                ends.push(end);
                ips.push(ip);

                end = ip + 2 + bc[ip + 1];
                ip += 2;
              } else {
                ip += 2 + bc[ip + 1];
              }

              break;

            case 17:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (input.length > peg$currPos) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 18:
              ends.push(end);
              ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

              if (input.substr(peg$currPos, peg$consts[bc[ip + 1]].length) === peg$consts[bc[ip + 1]]) {
                end = ip + 4 + bc[ip + 2];
                ip += 4;
              } else {
                end = ip + 4 + bc[ip + 2] + bc[ip + 3];
                ip += 4 + bc[ip + 2];
              }

              break;

            case 19:
              ends.push(end);
              ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

              if (input.substr(peg$currPos, peg$consts[bc[ip + 1]].length).toLowerCase() === peg$consts[bc[ip + 1]]) {
                end = ip + 4 + bc[ip + 2];
                ip += 4;
              } else {
                end = ip + 4 + bc[ip + 2] + bc[ip + 3];
                ip += 4 + bc[ip + 2];
              }

              break;

            case 20:
              ends.push(end);
              ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

              if (peg$consts[bc[ip + 1]].test(input.charAt(peg$currPos))) {
                end = ip + 4 + bc[ip + 2];
                ip += 4;
              } else {
                end = ip + 4 + bc[ip + 2] + bc[ip + 3];
                ip += 4 + bc[ip + 2];
              }

              break;

            case 21:
              stack.push(input.substr(peg$currPos, bc[ip + 1]));
              peg$currPos += bc[ip + 1];
              ip += 2;
              break;

            case 22:
              stack.push(peg$consts[bc[ip + 1]]);
              peg$currPos += peg$consts[bc[ip + 1]].length;
              ip += 2;
              break;

            case 23:
              stack.push(peg$FAILED);
              if (peg$silentFails === 0) {
                peg$fail(peg$consts[bc[ip + 1]]);
              }
              ip += 2;
              break;

            case 24:
              peg$savedPos = stack[stack.length - 1 - bc[ip + 1]];
              ip += 2;
              break;

            case 25:
              peg$savedPos = peg$currPos;
              ip++;
              break;

            case 26:
              params = bc.slice(ip + 4, ip + 4 + bc[ip + 3]);
              for (i = 0; i < bc[ip + 3]; i++) {
                params[i] = stack[stack.length - 1 - params[i]];
              }

              stack.splice(
                stack.length - bc[ip + 2],
                bc[ip + 2],
                peg$consts[bc[ip + 1]].apply(null, params)
              );

              ip += 4 + bc[ip + 3];
              break;

            case 27:
              stack.push(peg$parseRule(bc[ip + 1]));
              ip += 2;
              break;

            case 28:
              peg$silentFails++;
              ip++;
              break;

            case 29:
              peg$silentFails--;
              ip++;
              break;

            default:
              throw new Error("Invalid opcode: " + bc[ip] + ".");
          }
        }

        if (ends.length > 0) {
          end = ends.pop();
          ip = ips.pop();
        } else {
          break;
        }
      }

      return stack[0];
    }


        var flattenString = function(arrs) {
    	var acum ="";
    	for(var i=0; i< arrs.length; i++) {
    	  if(typeof(arrs[i])==='string') {
    	    acum = acum + arrs[i];
    	  } else {
    	    acum = acum + arrs[i].join('');
    	  }
    	}

    	return acum;
        }


        var GlobalBlankNodeCounter = 0;

        var prefixes = {};

        var registerPrefix = function(prefix, uri) {
    	prefixes[prefix] = uri;
        }

        var registerDefaultPrefix = function(uri) {
    	prefixes[null] = uri;
        }

        var arrayToString = function(array) {
    	var tmp = "";
    	if(array == null)
    	  return null;

    	for(var i=0; i<array.length; i++) {
    	    tmp = tmp + array[i];
    	}

    	return tmp.toUpperCase();
        }


    peg$result = peg$parseRule(peg$startRuleIndex);

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        peg$fail({ type: "end", description: "end of input" });
      }

      throw peg$buildException(
        null,
        peg$maxFailExpected,
        peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
        peg$maxFailPos < input.length
          ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
          : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
      );
    }
  }

  return {
    SyntaxError: peg$SyntaxError,
    parse:       peg$parse
  };
})()